/*
*Very Large Integer Library, License - Version 1.0 - May 3rd, 2012
*
*Timothee Ewart - University of Geneva, 
*Andreas Hehn - Swiss Federal Institute of technology Zurich 
*
*Permission is hereby granted, free of charge, to any person or organization
*obtaining a copy of the software and accompanying documentation covered by
*this license (the "Software") to use, reproduce, display, distribute,
*execute, and transmit the Software, and to prepare derivative works of the
*Software, and to permit third-parties to whom the Software is furnished to
*do so, all subject to the following:
*
*The copyright notices in the Software and this entire statement, including
*the above license grant, this restriction and the following disclaimer,
*must be included in all copies of the Software, in whole or in part, and
*all derivative works of the Software, unless such copies or derivative
*works are solely in the form of machine-executable object code generated by
*a source language processor.
*
*THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
*IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
*FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
*SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
*FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
*ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
*DEALINGS IN THE SOFTWARE.
*/

#ifndef VLI_BIT_MASKS_HPP
#define VLI_BIT_MASKS_HPP

#include <boost/static_assert.hpp>

namespace vli
{

// LOG_BASE
template <typename T>
struct data_bits
{
    //The following line ensures that the default template is never used
    // -> only specializations are valid.
    BOOST_STATIC_ASSERT(sizeof(T) == 0); 
    enum { value = 0 };
};


template <>
struct data_bits<unsigned long int>
{
   BOOST_STATIC_ASSERT( sizeof(long unsigned int) == 8 ); 
    enum { value = 63 };
};

template <>
struct data_bits<unsigned int>
{
    BOOST_STATIC_ASSERT( sizeof(unsigned int) == 4 );
    enum { value = 30 };
};

template <typename T>
struct base
{
    enum { value = static_cast<T>(1)<<(data_bits<T>::value)};
};

template <typename T>
struct data_mask
{
    enum { value = static_cast<T>(base<T>::value)-1};
};

template <typename T>
struct max_value
{
    enum { value = data_mask<T>::value };
};

} //namespace vli

#endif //VLI_BIT_MASKS_HPP
