/*
*Very Large Integer Library, License - Version 1.0 - May 3rd, 2012
*
*Timothee Ewart - University of Geneva, 
*Andreas Hehn - Swiss Federal Institute of technology Zurich.
*
*Permission is hereby granted, free of charge, to any person or organization
*obtaining a copy of the software and accompanying documentation covered by
*this license (the "Software") to use, reproduce, display, distribute,
*execute, and transmit the Software, and to prepare derivative works of the
*Software, and to permit third-parties to whom the Software is furnished to
*do so, all subject to the following:
*
*The copyright notices in the Software and this entire statement, including
*the above license grant, this restriction and the following disclaimer,
*must be included in all copies of the Software, in whole or in part, and
*all derivative works of the Software, unless such copies or derivative
*works are solely in the form of machine-executable object code generated by
*a source language processor.
*
*THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
*IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
*FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
*SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
*FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
*ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
*DEALINGS IN THE SOFTWARE.
*/

#ifndef KERNELS_CPU_X86_84_SUB_ASM_H
#define KERNELS_CPU_X86_84_SUB_ASM_H

//#include "vli/detail/cpu/x86_64/kernel_implementation_macros.h"

namespace vli {
    namespace detail {
                    // new functions type : VLI<n*64> - VLI<n*64> : sub128_128, sub192_192 ...
                    template <std::size_t NumWords>
                    void sub(boost::uint64_t* x,  boost::uint64_t const*  y);
                     
                     #define FUNCTION_sub_nbits_nbits(z, n, unused) \
                         template<> \
                         void sub<(n+2)>( boost::uint64_t* x,  boost::uint64_t const* y){\
                         asm(                                                                                 \
                                 BOOST_PP_REPEAT(BOOST_PP_ADD(n,2), Substraction, ~)                          \
                                 : : :"rax","memory"                                                          \
                            );                                                                                \
                         }                                                                                    \

                     BOOST_PP_REPEAT(VLI_MAX_ITERATION, FUNCTION_sub_nbits_nbits, ~)
                     #undef FUNCTION_sub_nbits_nbits
                     
                    template <std::size_t NumWords>
                    void sub(boost::uint64_t* x,  boost::uint64_t const b);

                     //new functions type : VLI<n*64> - VLI<64> : sub192_64, sub256_64
                     //the case is done after sub128_64
                     #define FUNCTION_sub_nbits_64bits(z, n, unused) \
                          template<> \
                          void sub<(n+2)>( boost::uint64_t* x,  boost::uint64_t const b){   \
                          asm(                                                                                   \
                              "movq   %%rsi              , %%rax   \n"                                           \
                              "movq   %%rax              , %%rcx   \n" /*  XOR then AND could make a cpy */      \
                              "movq   (%%rdi)            , %%r9    \n"                                           \
                              "sarq   $63                , %%rcx   \n" /* get the sign */                        \
                              "subq   %%rsi              , %%r9    \n"                                           \
                              "movq   %%r9               , (%%rdi) \n"                                          \
                              BOOST_PP_REPEAT(BOOST_PP_ADD(n,1), Substraction2, ~)                               \
                              : : :"rax","r8","r9","rcx","memory"                                                \
                            );                                                                                   \
                          }                                                                                      \

                     BOOST_PP_REPEAT(VLI_MAX_ITERATION, FUNCTION_sub_nbits_64bits, ~)
                     #undef FUNCTION_sub_nbits_64bits

    } // end namespace detail
} // end namespace vli

#endif
