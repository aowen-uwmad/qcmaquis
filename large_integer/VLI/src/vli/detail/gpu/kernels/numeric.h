/*
*Very Large Integer Library, License - Version 1.0 - May 3rd, 2012
*
*Timothee Ewart - University of Geneva, 
*Andreas Hehn - Swiss Federal Institute of technology Zurich.
*
*Permission is hereby granted, free of charge, to any person or organization
*obtaining a copy of the software and accompanying documentation covered by
*this license (the "Software") to use, reproduce, display, distribute,
*execute, and transmit the Software, and to prepare derivative works of the
*Software, and to permit third-parties to whom the Software is furnished to
*do so, all subject to the following:
*
*The copyright notices in the Software and this entire statement, including
*the above license grant, this restriction and the following disclaimer,
*must be included in all copies of the Software, in whole or in part, and
*all derivative works of the Software, unless such copies or derivative
*works are solely in the form of machine-executable object code generated by
*a source language processor.
*
*THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
*IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
*FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
*SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
*FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
*ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
*DEALINGS IN THE SOFTWARE.
*/
#include "vli/detail/gpu/tasklist/single_coefficient_task.h"
#include "vli/detail/gpu/kernels/kernel_macros.h"

namespace vli {
    namespace detail  {
                      template <class BaseInt, std::size_t Size>
                      __device__ void multiplies(BaseInt* res, BaseInt* res1, BaseInt* c1, BaseInt* c2);
                      //addition 256+256, 384+384, 512+512
                      #define FUNCTION_add_nbits_nbits(z, n, unused) \
                           __device__ void NAME_ADD_NBITS_PLUS_NBITS(BOOST_PP_MUL(2,BOOST_PP_ADD(n,1)))(unsigned int* x, unsigned int const* y); \
                       
                      BOOST_PP_REPEAT(3, FUNCTION_add_nbits_nbits, ~)
                      #undef FUNCTION_add_nbits_nbits
                      
                      //multiplication 128*128, 129*129, 256*256
                      #define FUNCTION_mul_twobits_nbits_nbits(z, n, unused) \
                           __device__ void NAME_MUL_TWONBITS_NBITS_NBITS(BOOST_PP_ADD(n,1))(unsigned int* x, unsigned int const* y, unsigned int const* w); \
                       
                      BOOST_PP_REPEAT(3, FUNCTION_mul_twobits_nbits_nbits, ~)
                      #undef FUNCTION_mul_twobits_nbits_nbits
                      
                      //negation 128 to 384, 64 stride 
                      #define FUNCTION_negate_nbits(z, n, unused) \
                           __device__ void NAME_NEGATE_NBITS(n)(unsigned int* x); \
                      
                     BOOST_PP_REPEAT(7, FUNCTION_negate_nbits, ~)
                     #undef FUNCTION_negate_nbits

     } // end namespace detail
} // end namespace vli



