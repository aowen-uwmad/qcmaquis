/*
*Very Large Integer Library, License - Version 1.0 - May 3rd, 2012
*
*Timothee Ewart - University of Geneva, 
*Andreas Hehn - Swiss Federal Institute of technology Zurich.
*
*Permission is hereby granted, free of charge, to any person or organization
*obtaining a copy of the software and accompanying documentation covered by
*this license (the "Software") to use, reproduce, display, distribute,
*execute, and transmit the Software, and to prepare derivative works of the
*Software, and to permit third-parties to whom the Software is furnished to
*do so, all subject to the following:
*
*The copyright notices in the Software and this entire statement, including
*the above license grant, this restriction and the following disclaimer,
*must be included in all copies of the Software, in whole or in part, and
*all derivative works of the Software, unless such copies or derivative
*works are solely in the form of machine-executable object code generated by
*a source language processor.
*
*THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
*IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
*FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
*SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
*FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
*ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
*DEALINGS IN THE SOFTWARE.
*/

#include "vli/detail/singleton.h"

#ifndef GPU_MEM_BLOCK_H
#define GPU_MEM_BLOCK_H

namespace vli {
namespace detail {

    // we allocate the mem only one time so pattern of this class singleton
    template <typename BaseInt>
    class gpu_memblock : public Singleton<gpu_memblock>  {
        friend class Singleton<gpu_memblock>; // to have access to the Instance, Destroy functions into the singleton class
        public:
        typedef BaseInt value_type;
        private:
        gpu_memblock();
        gpu_memblock(gpu_memblock const& );
        gpu_memblock& operator=(gpu_memblock const& );
        void resize(std::size_t vli_size, unsigned int order, std::size_t vectorsize) {
            std::size_t req_size = vectorsize * size * order * order;
            if( req_size > block_size_) {
                if (V1Data_ != 0 )
                    cudaFree((void*)this->V1Data_);
                if (V2Data_ != 0 )
                    cudaFree((void*)this->V2Data_);
                if(VinterData_ != 0)
                    cudaFree((void*)this->VinterData_);
                if(PoutData_ != 0)
                    cudaFree((void*)this->PoutData_);
                cudaMalloc((void**)&(this->V1Data_), req_size*sizeof(BaseInt));
                cudaMalloc((void**)&(this->V2Data_), req_size*sizeof(BaseInt));
                cudaMalloc((void**)&(this->VinterData_), vectorsize * 2*size * 2*order * 2*order * sizeof(BaseInt));
                cudaMalloc((void**)&(this->PoutData_), 2*size*2*order*2*order*sizeof(BaseInt));
                block_size_ = req_size;
            }

            // TODO due to ghost element, to remove one day!
            if( req_size != block_size_)
                cudaMemset((void*)this->PoutData_,0,2*size*2*order*2*order*sizeof(BaseInt));
        }

        std::size_t block_size_;

        public:
        ~gpu_memblock();
        static gpu_memblock* Instance(std::size_t vli_size, unsigned int order, std::size_t vectorsize) {
            gpu_memblock* instance = Singleton<gpu_memblock>::Instance();
            instance->resize(size,order,vectorsize);
            return instance;
        }
        BaseInt* V1Data_; // input vector 1
        BaseInt* V2Data_; // input vector 2
        BaseInt* VinterData_; // inter value before the final reduction
        BaseInt* PoutData_; // final output
    };

    } //end namespace detail
} //end namespce vli  

#include "vli/detail/gpu_mem_block.hpp"

#endif //INNER_PRODUCT_GPU_BOOSTER_HPP
