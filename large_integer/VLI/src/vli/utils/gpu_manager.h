/*
*Very Large Integer Library, License - Version 1.0 - May 3rd, 2012
*
*Timothee Ewart - University of Geneva, 
*Andreas Hehn - Swiss Federal Institute of technology Zurich 
*
*Permission is hereby granted, free of charge, to any person or organization
*obtaining a copy of the software and accompanying documentation covered by
*this license (the "Software") to use, reproduce, display, distribute,
*execute, and transmit the Software, and to prepare derivative works of the
*Software, and to permit third-parties to whom the Software is furnished to
*do so, all subject to the following:
*
*The copyright notices in the Software and this entire statement, including
*the above license grant, this restriction and the following disclaimer,
*must be included in all copies of the Software, in whole or in part, and
*all derivative works of the Software, unless such copies or derivative
*works are solely in the form of machine-executable object code generated by
*a source language processor.
*
*THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
*IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
*FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
*SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
*FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
*ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
*DEALINGS IN THE SOFTWARE.
*/

#ifndef __GPU_MANAGER__
#define __GPU_MANAGER__

// utilities and system includes
#include <cuda.h>

#include "boost/lexical_cast.hpp"
#include <cuda_runtime_api.h>
#include <stdexcept>

namespace gpu
{
	class gpu_manager
	{
	private:
		gpu_manager(int device);
		gpu_manager(gpu_manager const&);
		gpu_manager& operator=(gpu_manager const&);
	public:
		~gpu_manager();
		static gpu_manager& instance();
		cudaDeviceProp GetDeviceProperties() const;		
		void constructor();
		void destructor();
        std::size_t GetmaxThreadsPerBlock();        
	private: 
		
		/**
			All fields of the devices are in
		*/
		cudaDeviceProp deviceProp_;	
		/**
			num of the device, will be link to ambient to avoid two init on the device 0
		*/
		int device_;
	};
        
	void cu_check_error(cudaError_t  const& err, std::size_t line)
	{
		switch (err) 
		{
            case cudaSuccess:
                break;
			case cudaErrorInvalidDevicePointer:
				throw(std::runtime_error("cudaErrorInvalidDevicePointer, in " + boost::lexical_cast<std::string>(__FILE__) + boost::lexical_cast<std::string>(line) ));
				break;
				
			case cudaErrorMemoryAllocation:
				throw(std::runtime_error("cudaErrorMemoryAllocation in " + boost::lexical_cast<std::string>(__FILE__) + boost::lexical_cast<std::string>(line) ));
				break;
				
			case cudaErrorInitializationError:
				throw(std::runtime_error("cudaErrorInitializationError in " + boost::lexical_cast<std::string>(__FILE__) + boost::lexical_cast<std::string>(line) ));
				break;	
				
			case cudaErrorInvalidMemcpyDirection:	
				throw(std::runtime_error("cudaErrorInvalidMemcpyDirection in " + boost::lexical_cast<std::string>(__FILE__) + boost::lexical_cast<std::string>(line) ));
				break;	
			
			case cudaErrorInvalidValue:
				throw(std::runtime_error("cudaErrorInvalidValue in " + boost::lexical_cast<std::string>(__FILE__) + boost::lexical_cast<std::string>(line) ));
				break;
			
            default:
                char const* cuda_msg = cudaGetErrorString(err);
				throw(std::runtime_error("Unknown CUDA error (Error:"+ boost::lexical_cast<std::string>(err) +") in " + boost::lexical_cast<std::string>(__FILE__) + boost::lexical_cast<std::string>(line) + "\n cuda message:" + std::string(cuda_msg) ));
				break;
		}
	}
}


#endif
