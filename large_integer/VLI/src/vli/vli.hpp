/*
*Very Large Integer Library, License - Version 1.0 - May 3rd, 2012
*
*Timothee Ewart - University of Geneva, 
*Andreas Hehn - Swiss Federal Institute of technology Zurich.
*
*Permission is hereby granted, free of charge, to any person or organization
*obtaining a copy of the software and accompanying documentation covered by
*this license (the "Software") to use, reproduce, display, distribute,
*execute, and transmit the Software, and to prepare derivative works of the
*Software, and to permit third-parties to whom the Software is furnished to
*do so, all subject to the following:
*
*The copyright notices in the Software and this entire statement, including
*the above license grant, this restriction and the following disclaimer,
*must be included in all copies of the Software, in whole or in part, and
*all derivative works of the Software, unless such copies or derivative
*works are solely in the form of machine-executable object code generated by
*a source language processor.
*
*THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
*IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
*FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
*SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
*FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
*ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
*DEALINGS IN THE SOFTWARE.
*/

#ifndef VLI_VLI_CPU_HPP
#define VLI_VLI_CPU_HPP

#include "vli.h"

namespace vlilib {
namespace detail {
    
    template <typename GMPClass>
    struct gmp_convert_helper {
        template <std::size_t NumBits>
        static GMPClass apply(vli<NumBits> a) {
            typedef typename vli<NumBits>::value_type value_type;
            bool const neg = a.is_negative();
            if(neg)
                negate_inplace(a);
            GMPClass result(0);
            GMPClass factor(1);
            
// C - Andreas  I do not know why it compiles on your machine, as the boost::uint64_t is an unsigned long long int, it should be not compatible with gmp,
// C           12.2 C++ Interface Integers
// C
// C          â€” Function: mpz_class::mpz_class (type n)
// C        Construct an mpz_class. All the standard C++ types may be used, except long long and long double, and all the GMP C++ classes can be used.
// C        Any necessary conversion follows the corresponding C function, for example double follows mpz_set_d (see Assigning Integers).
// C        do your compiler make a cast during the compilation ? it sounds 16/32/64 bits machines history ....
            
            GMPClass const segment_factor( mpz_class(~boost::lexical_cast<unsigned long int >(value_type(0))) + 1 );

            for(typename vli<NumBits>::size_type i=0; i< vli<NumBits>::numwords; ++i) {
                result += factor * static_cast<unsigned long int>(a[i]);
                factor *= segment_factor;
            }
            if(neg)
                result *= -1;
            return result;
        }
    };
} // end namespace detail

// C - constructors, copy-swap, access operators
template <std::size_t NumBits>
vli<NumBits>::vli(){
    memset((void*)&data_[0],0,numwords*sizeof(value_type));
}

template <std::size_t NumBits>
vli<NumBits>::vli(long int num) {

    data_[0] = num;
    long int a = num >> std::numeric_limits<long int>::digits;
    for(size_type i=1; i< numwords; ++i)
        data_[i] = a; // WARNING it should be -a, but it works like that WHY ??????

}

#if defined __GNU_MP_VERSION
template <std::size_t NumBits>
vli<NumBits>::operator mpz_class() const{
    return detail::gmp_convert_helper<mpz_class>::apply(*this);
}

template <std::size_t NumBits>
vli<NumBits>::operator mpq_class() const{
    return detail::gmp_convert_helper<mpq_class>::apply(*this);
}   
#endif //__GNU_MP_VERSION


template <std::size_t NumBits>
typename vli<NumBits>::value_type& vli<NumBits>::operator[](size_type i){
    assert( i < numwords );
    return *(data_+i);
}

template <std::size_t NumBits>
const typename vli<NumBits>::value_type& vli<NumBits>::operator[](size_type i) const{
    assert( i < numwords );
    return *(data_+i);
}
// c equality operator

template <std::size_t NumBits>
vli<NumBits> vli<NumBits>::operator-() const{
    vli tmp(*this);
    tmp.negate();
    return tmp;
}

template <std::size_t NumBits>
bool vli<NumBits>::operator == (vli const& vli_a) const{
    int n = memcmp((void*)data_,(void*)vli_a.data_,numwords*sizeof(value_type));
    return (0 == n);
}

template <std::size_t NumBits>
bool vli<NumBits>::operator < (vli const& vli_a) const{
    vli tmp(*this);
    return ( (tmp -= vli_a).is_negative() );
}

template <std::size_t NumBits>
bool vli<NumBits>::operator < (int i) const{
    vli tmp1(*this);
    vli tmp2(i);    
    return ( (tmp1-=tmp2).is_negative() );
}

template <std::size_t NumBits>      
bool vli<NumBits>::operator > (vli vli_a) const{
    return ( (vli_a-=*this).is_negative() );
}

template <std::size_t NumBits>
bool vli<NumBits>::operator > (int i) const{
    vli tmp(i);
    return ( (tmp-=*this).is_negative() );
}

template <std::size_t NumBits>
bool vli<NumBits>::is_zero() const{
    bool result = (data_[0] == 0);
    for(std::size_t i=1; i < numwords; ++i)
        result &= (data_[i] == 0);
    return result;
}
// c - negative number

template <std::size_t NumBits>
void vli<NumBits>::negate(){
    for(size_type i=0; i < numwords; ++i)
        data_[i] = (~data_[i]);
    (*this)+=1;
}

template <std::size_t NumBits>
bool vli<NumBits>::is_negative() const{
    return static_cast<bool>( data_[numwords-1] >> (std::numeric_limits<value_type>::digits-1) );
}
// c - basic operators
template <std::size_t NumBits>
vli<NumBits>& vli<NumBits>::operator += (vli<NumBits> const& vli_a){
    using vlilib::plus_assign;
    plus_assign(*this,vli_a);
    return *this;
}

template <std::size_t NumBits>
vli<NumBits>& vli<NumBits>::operator += (value_type const a){
    using vlilib::plus_assign;
    plus_assign(*this,a);
    return *this;
}

template <std::size_t NumBits>
vli<NumBits>& vli<NumBits>::operator -= (vli<NumBits> const& vli_a){
    using vlilib::minus_assign;
    minus_assign(*this,vli_a);
    return *this;
}

template <std::size_t NumBits>
vli<NumBits>& vli<NumBits>::operator -= (value_type const a){
    using vlilib::minus_assign;
    minus_assign(*this,a);
    return *this;
}

template <std::size_t NumBits>
vli<NumBits>& vli<NumBits>::operator *= (value_type const a){
    using vlilib::multiplies_assign;
    multiplies_assign(*this,a);
    return *this;
}

template <std::size_t NumBits>
vli<NumBits>& vli<NumBits>::operator *= (vli<NumBits> const& vli_a){
    using vlilib::multiplies_assign;
    multiplies_assign(*this,vli_a);
    return *this;
}

template <std::size_t NumBits>
void vli<NumBits>::print_raw(std::ostream& os) const{
    os << "(" ;
    for(size_type i = numwords-1; i > 0; --i)
        os << data_[i]<<" ";
    os << data_[0];
    os << ")";
}    

template <std::size_t NumBits>
void vli<NumBits>::print(std::ostream& os) const{
    os<<get_str();
}

/**
 * Returns a string with a base10 represenation of the VLI
 */
template <std::size_t NumBits>
std::string vli<NumBits>::get_str() const {
    vli<NumBits> tmp;
    
    if((*this).is_negative()){
        const_cast<vli<NumBits> & >(*this).negate();

        for(size_type i=0; i<numwords; ++i)
            tmp[i] = (*this)[i];
    
        tmp.negate();
        const_cast<vli<NumBits> & >(*this).negate();
    }else{
        for(size_type i=0; i<numwords; ++i)
            tmp[i] = (*this)[i];
    }
    
    if(tmp.is_negative()){
        tmp.negate();
        size_type ten_exp = order_of_magnitude_base10(tmp);
        return std::string("-")+get_str_helper_inplace(tmp,ten_exp);
    }else{
        size_type ten_exp = order_of_magnitude_base10(tmp);
        return get_str_helper_inplace(tmp,ten_exp);
    }
}

/**
 * Returns the order of magnitude of 'value' in base10
 */
template <std::size_t NumBits>
typename vli<NumBits>::size_type vli<NumBits>::order_of_magnitude_base10(vli<NumBits> const& value) const {
    assert(!value.is_negative());
    
    vli<NumBits> value_cpy(value);
    vli<NumBits> decimal(1);
    size_type exp = 0;
    
    // Find correct order (10^exp) 
    while(!value_cpy.is_negative()){
        value_cpy=value; // reset
        vli<NumBits> previous_decimal(decimal);
        decimal *= 10;
        ++exp;
        if(decimal < previous_decimal) // Overflow! (we can handle it.)
        {
            break;
        }
        value_cpy-=decimal;
    }
    --exp;
    return exp;
}

/**
 * A helper function to generate the base10 representation for get_str().
 */
template <std::size_t NumBits>
std::string vli<NumBits>::get_str_helper_inplace(vli<NumBits>& value, size_type ten_exp) const {
    assert(!value.is_negative());
    
    // Create a number 10^(exponent-1) sin
    vli<NumBits> dec(1);
    for(size_type e=0; e < ten_exp; ++e)
        dec *= 10;
    
    // Find the right digit for 10^ten_exp
    vli<NumBits> value_cpy(value);
    int digit=0;
    while((!value_cpy.is_negative()) && digit<=11){
        value_cpy = value; // reset
        ++digit;
        if(digit*dec < (digit-1)*dec){ // Overflow (we can handle it.)
            break;
        }
        value_cpy-= digit*dec;
    }
    --digit; // we went to far
    
    assert(digit >=0);
    assert(digit < 10); 
    
    value-= digit*dec;
    
    if(ten_exp <= 0)
        return boost::lexical_cast<std::string>(digit);
    else
        return boost::lexical_cast<std::string>(digit)+get_str_helper_inplace(value,ten_exp-1);
}

// free function algebra 
template <std::size_t NumBits>
void mul(vli<2*NumBits>& vli_res, vli<NumBits> const&  vli_a, vli<NumBits> const& vli_b) {
    multiplies<NumBits>(vli_res, vli_a, vli_b);
}

template <std::size_t NumBits>
void multiply_add(vli<2*NumBits>& vli_res, vli<NumBits> const&  vli_a, vli<NumBits> const& vli_b) {
    multiply_add_assign<NumBits>(vli_res, vli_a, vli_b);
}

template <std::size_t NumBits>
bool is_zero(vli<NumBits> const& v) {
    return v.is_zero();
}

template <std::size_t NumBits>
void negate_inplace(vli<NumBits>& v) {
    v.negate();
}

template <std::size_t NumBits>
const vli<NumBits+64> plus_extend (vli<NumBits> const &vli_a, vli<NumBits> const& vli_b){
      vli<NumBits+64> vli_res;
      plus_extend_assign<NumBits>(vli_res,vli_a,vli_b);
      return vli_res;
}
    
template <std::size_t NumBits>
const vli<NumBits> operator + (vli<NumBits> vli_a, int b){
    vli_a += b;
    return vli_a;
}
    
template <std::size_t NumBits>
const vli<NumBits> operator + (int b, vli<NumBits> const& vli_a){
    return vli_a+b;
}
        
template <std::size_t NumBits>
const vli<NumBits> operator - (vli<NumBits> vli_a, int b){
    vli_a -= b;
    return vli_a;
}

template <std::size_t NumBits>
const vli<NumBits> operator * (vli<NumBits>  vli_a, vli<NumBits> const& vli_b){
    vli_a *= vli_b;
    return vli_a;
}

template <std::size_t NumBits>
const vli<NumBits> operator * (vli<NumBits> vli_a, int b){
    vli_a *= b;
    return vli_a;
}

template <std::size_t NumBits>
const vli<NumBits> operator * (int b, vli<NumBits> const& a){
    return a*b;
}

//stream
template <std::size_t NumBits>
std::ostream& operator<< (std::ostream& os,  vli<NumBits> const& vli){
    if(os.flags() & std::ios_base::hex)
        vli.print_raw(os);
    else
        vli.print(os);
    return os;
}

} // end namespace vli

#endif
