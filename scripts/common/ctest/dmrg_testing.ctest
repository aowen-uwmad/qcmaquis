# MAQUIS_DMRG Common Dashboard Script
#
# This script contains basic dashboard driver code common to all
# clients.
#
# Put this script in a directory such as "~/Dashboards/Scripts" or
# "c:/Dashboards/Scripts".  Create a file next to this script, say
# 'my_dashboard.cmake', with code of the following form:
#
#   # Client maintainer: me@mydomain.net
#   set(CTEST_SITE "machine.site")
#   set(CTEST_BUILD_NAME "Platform-Compiler")
#   set(CTEST_BUILD_CONFIGURATION Debug)
#   set(CTEST_CMAKE_GENERATOR "Unix Makefiles")
#   include(${CTEST_SCRIPT_DIRECTORY}/dmrg_testing.ctest)
#   dmrg_testing()
#
# Then run a scheduled task (cron job) with a command line such as
#
#   ctest -S ~/Dashboards/Scripts/my_dashboard.cmake -V
#
# By default the script expect to have the dmrg sources in ./src/dmrg
# and will build in the ./build directory.
#
# The following variables may be set before including this script
# to configure it:
#
#   dashboard_model       = Nightly | Experimental | Continuous
#   dashboard_root        = Change root directory
#   dashboard_sources     = List of source directories (that need update).
#                           The first element of the list must be the dmrg
#                           source directory.
#                           Default: ${dashboard_root}/src/dmrg
#   dashboard_binary_dir  = Name of binary directory (${dashboard_root}/build)
#   dashboard_cache       = Initial CMakeCache.txt file content
#   CTEST_SVN_COMMAND     = path to svn command-line client
#   CTEST_BUILD_FLAGS     = build tool arguments (ex: -j2)
#   CTEST_TEST_ARGS       = ctest_test args (ex: PARALLEL_LEVEL 4)
#   CMAKE_MAKE_PROGRAM    = Path to "make" tool to use
#
# For Makefile generators the script may be executed from an
# environment already configured to use the desired compilers.
# Alternatively the environment may be set at the top of the script:
#
#   set(ENV{CC}  /path/to/cc)   # C compiler
#   set(ENV{CXX} /path/to/cxx)  # C++ compiler
#   set(ENV{FC}  /path/to/fc)   # Fortran compiler (optional)
#   set(ENV{LD_LIBRARY_PATH} /path/to/vendor/lib) # (if necessary)


#=============================================================================
# 
# MAQUIS DMRG Project
# 
# Copyright (C) 2011-2013 by Michele Dolfi <dolfim@phys.ethz.ch>
# 
# Testing script adapted from CMake testing: cmake_common.cmake.
# 
#=============================================================================

cmake_minimum_required(VERSION 2.8.2 FATAL_ERROR)

### CDASH SUBMISSION SETTINGS
set(CTEST_PROJECT_NAME MAQUIS_DMRG)
set(CTEST_NIGHTLY_START_TIME "01:00:00 UTC")
set(CTEST_DROP_METHOD "http")
set(CTEST_DROP_SITE "alps.comp-phys.org")
set(CTEST_DROP_LOCATION "/cdash/submit.php?project=MAQUIS+-+-DMRG")
set(CTEST_DROP_SITE_CDASH TRUE)

### CTEST DEFAULT VALUES
# Default to a Debug build.
if(NOT DEFINED CTEST_BUILD_CONFIGURATION)
  set(CTEST_BUILD_CONFIGURATION Debug)
endif()

# Default to Makefile generator.
if(NOT DEFINED CTEST_CMAKE_GENERATOR)
  set(CTEST_CMAKE_GENERATOR "Unix Makefiles")
endif()

# Look for a SVN command-line client.
if(NOT DEFINED CTEST_SVN_COMMAND)
    find_program(CTEST_SVN_COMMAND svn)
endif()


### CTEST COMMON MACROS

# Helper macro to write the initial cache.
macro(write_cache)
  set(cache_build_type "")
  set(cache_make_program "")
  if(CTEST_CMAKE_GENERATOR MATCHES "Make")
    set(cache_build_type CMAKE_BUILD_TYPE:STRING=${CTEST_BUILD_CONFIGURATION})
    if(CMAKE_MAKE_PROGRAM)
      set(cache_make_program CMAKE_MAKE_PROGRAM:FILEPATH=${CMAKE_MAKE_PROGRAM})
    endif()
  endif()
  file(WRITE ${CTEST_BINARY_DIRECTORY}/CMakeCache.txt "
SITE:STRING=${CTEST_SITE}
BUILDNAME:STRING=${CTEST_BUILD_NAME}
DART_TESTING_TIMEOUT:STRING=${CTEST_TEST_TIMEOUT}
SVN_EXECUTABLE:FILEPATH=${CTEST_SVN_COMMAND}
${cache_build_type}
${cache_make_program}
${dashboard_cache}
")
endmacro(write_cache)


# Main testing function
macro(dmrg_testing)
  set(dashboard_user_home "$ENV{HOME}")

  # Select the top dashboard directory.
  if(NOT DEFINED dashboard_root)
    get_filename_component(CTEST_DASHBOARD_ROOT ${CTEST_SCRIPT_DIRECTORY} ABSOLUTE)
  endif()
  if(NOT DEFINED CTEST_DASHBOARD_ROOT)
    get_filename_component(CTEST_DASHBOARD_ROOT ${dashboard_root} ABSOLUTE)
  endif()

  if(NOT DEFINED dashboard_sources)
    list(APPEND dashboard_sources "${CTEST_DASHBOARD_ROOT}/src/dmrg")
  endif()

  # Select the model (Nightly, Experimental, Continuous).
  if(NOT DEFINED dashboard_model)
    set(dashboard_model Nightly)
  endif()
  if(NOT "${dashboard_model}" MATCHES "^(Nightly|Experimental|Continuous)$")
    message(FATAL_ERROR "dashboard_model must be Nightly, Experimental, or Continuous")
  endif()

  # Select a build directory name.
  if(NOT DEFINED CTEST_BINARY_DIRECTORY AND DEFINED dashboard_binary_dir)
    set(CTEST_BINARY_DIRECTORY ${dashboard_binary_dir})
  else()
    set(CTEST_BINARY_DIRECTORY ${CTEST_DASHBOARD_ROOT}/build)
  endif()

  # Test time limit
  if(NOT DEFINED CTEST_TEST_TIMEOUT)
    set(CTEST_TEST_TIMEOUT 1500)
  endif(NOT DEFINED CTEST_TEST_TIMEOUT)


  #-----------------------------------------------------------------------------


  # Point source directory to CMakeLists.txt
  list(GET dashboard_sources 0 CTEST_SOURCE_DIRECTORY)

  # Send the main script as a note.
  list(APPEND CTEST_NOTES_FILES
    "${CTEST_SCRIPT_DIRECTORY}/${CTEST_SCRIPT_NAME}"
    "${CMAKE_CURRENT_LIST_FILE}"
    )

  # Check for required variables.
  foreach(req
      CTEST_CMAKE_GENERATOR
      CTEST_SITE
      CTEST_BUILD_NAME
      CTEST_SVN_COMMAND
      dashboard_sources
      )
    if(NOT DEFINED ${req})
      message(FATAL_ERROR "The containing script must set ${req}")
    endif()
  endforeach(req)

  # Print summary information.
  set(vars "")
  foreach(v
      CTEST_SITE
      CTEST_BUILD_NAME
      CTEST_SOURCE_DIRECTORY
      CTEST_BINARY_DIRECTORY
      CTEST_CMAKE_GENERATOR
      CTEST_BUILD_CONFIGURATION
      CTEST_SVN_COMMAND
      CTEST_CHECKOUT_COMMAND
      CTEST_CONFIGURE_COMMAND
      CTEST_SCRIPT_DIRECTORY
      CTEST_TEST_TIMEOUT
      )
    set(vars "${vars}  ${v}=[${${v}}]\n")
  endforeach(v)
  message("Dashboard script configuration:\n${vars}\n")

  # Avoid non-ascii characters in tool output.
  set(ENV{LC_ALL} C)


  # Start with a fresh build tree.
  file(MAKE_DIRECTORY "${CTEST_BINARY_DIRECTORY}")
  if(NOT "${CTEST_SOURCE_DIRECTORY}" STREQUAL "${CTEST_BINARY_DIRECTORY}")
    message("Clearing build tree...")
    ctest_empty_binary_directory(${CTEST_BINARY_DIRECTORY})
  endif()

  set(dashboard_continuous 0)
  if("${dashboard_model}" STREQUAL "Continuous")
    set(dashboard_continuous 1)
  endif()


  # Loop for continous build
  set(dashboard_done 0)
  while(NOT dashboard_done)
    if(dashboard_continuous)
      set(START_TIME ${CTEST_ELAPSED_TIME})
    endif()
    set(ENV{HOME} "${dashboard_user_home}")

    # Start a new submission.
    ctest_start(${dashboard_model})

    # Always build if the tree is fresh.
    set(dashboard_fresh 0)
    if(NOT EXISTS "${CTEST_BINARY_DIRECTORY}/CMakeCache.txt")
      set(dashboard_fresh 1)
      message("Starting fresh build...")
      write_cache()
    endif()

    # Look for updates.
    set(count_total 0)
    foreach(isource ${dashboard_sources})
      ctest_update(RETURN_VALUE count)
      math(EXPR count_total "${count_total}+${count}")
    endforeach()
    message("Found ${count_total} changed files")
    if(dashboard_fresh OR NOT dashboard_continuous OR count_total GREATER 0)
      ctest_configure()
      ctest_read_custom_files(${CTEST_BINARY_DIRECTORY})
    
      # Build everything
      ctest_build()

      # Run tests
      ctest_test(${CTEST_TEST_ARGS})
      # Get test timing from output log
      # todo

      # Submit results
      if(NOT dashboard_no_submit)
        ctest_submit()
      endif()
    endif()

    if(dashboard_continuous)
      # Delay until at least 5 minutes past START_TIME
      ctest_sleep(${START_TIME} 300 ${CTEST_ELAPSED_TIME})
      if(${CTEST_ELAPSED_TIME} GREATER 43200)
        set(dashboard_done 1)
      endif()
    else()
      # Not continuous, so we are done.
      set(dashboard_done 1)
    endif()
  endwhile()
endmacro(dmrg_testing)

