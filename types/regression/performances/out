       
namespace std __attribute__ ((__visibility__ ("default"))) {
}
typedef long int ptrdiff_t;

typedef long unsigned int size_t;

namespace std __attribute__ ((__visibility__ ("default"))) {
  using ::ptrdiff_t;

  using ::size_t;

}
       
namespace std __attribute__ ((__visibility__ ("default"))) {
  namespace rel_ops
  {
    template <class _Tp>
      inline bool
      operator!=(const _Tp& __x, const _Tp& __y)
      { return !(__x == __y);
 }
    template <class _Tp>
      inline bool
      operator>(const _Tp& __x, const _Tp& __y)
      { return __y < __x;
 }
    template <class _Tp>
      inline bool
      operator<=(const _Tp& __x, const _Tp& __y)
      { return !(__y < __x);
 }
    template <class _Tp>
      inline bool
      operator>=(const _Tp& __x, const _Tp& __y)
      { return !(__x < __y);
 }
  }
}
       
namespace std __attribute__ ((__visibility__ ("default"))) {
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
    {
     
      _Tp __tmp = (__a);

      __a = (__b);

      __b = (__tmp);

    }
}
namespace std __attribute__ ((__visibility__ ("default"))) {
  template<class _T1, class _T2>
    struct pair
    {
      typedef _T1 first_type;

      typedef _T2 second_type;

      _T1 first;

      _T2 second;

      pair()
      : first(), second() { }
      pair(const _T1& __a, const _T2& __b)
      : first(__a), second(__b) { }
      template<class _U1, class _U2>
        pair(const pair<_U1, _U2>& __p)
 : first(__p.first),
   second(__p.second) { }
    };

  template<class _T1, class _T2>
    inline bool
    operator==(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return __x.first == __y.first && __x.second == __y.second;
 }
  template<class _T1, class _T2>
    inline bool
    operator<(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return __x.first < __y.first
      || (!(__y.first < __x.first) && __x.second < __y.second);
 }
  template<class _T1, class _T2>
    inline bool
    operator!=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return !(__x == __y);
 }
  template<class _T1, class _T2>
    inline bool
    operator>(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return __y < __x;
 }
  template<class _T1, class _T2>
    inline bool
    operator<=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return !(__y < __x);
 }
  template<class _T1, class _T2>
    inline bool
    operator>=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return !(__x < __y);
 }
  template<class _T1, class _T2>
    inline pair<_T1, _T2>
    make_pair(_T1 __x, _T2 __y)
    { return pair<_T1, _T2>(__x, __y);
 }
}
extern "C" {
typedef unsigned char __u_char;

typedef unsigned short int __u_short;

typedef unsigned int __u_int;

typedef unsigned long int __u_long;

typedef signed char __int8_t;

typedef unsigned char __uint8_t;

typedef signed short int __int16_t;

typedef unsigned short int __uint16_t;

typedef signed int __int32_t;

typedef unsigned int __uint32_t;

typedef signed long int __int64_t;

typedef unsigned long int __uint64_t;

typedef long int __quad_t;

typedef unsigned long int __u_quad_t;

typedef unsigned long int __dev_t;

typedef unsigned int __uid_t;

typedef unsigned int __gid_t;

typedef unsigned long int __ino_t;

typedef unsigned long int __ino64_t;

typedef unsigned int __mode_t;

typedef unsigned long int __nlink_t;

typedef long int __off_t;

typedef long int __off64_t;

typedef int __pid_t;

typedef struct { int __val[2];
 } __fsid_t;

typedef long int __clock_t;

typedef unsigned long int __rlim_t;

typedef unsigned long int __rlim64_t;

typedef unsigned int __id_t;

typedef long int __time_t;

typedef unsigned int __useconds_t;

typedef long int __suseconds_t;

typedef int __daddr_t;

typedef long int __swblk_t;

typedef int __key_t;

typedef int __clockid_t;

typedef void * __timer_t;

typedef long int __blksize_t;

typedef long int __blkcnt_t;

typedef long int __blkcnt64_t;

typedef unsigned long int __fsblkcnt_t;

typedef unsigned long int __fsblkcnt64_t;

typedef unsigned long int __fsfilcnt_t;

typedef unsigned long int __fsfilcnt64_t;

typedef long int __ssize_t;

typedef __off64_t __loff_t;

typedef __quad_t *__qaddr_t;

typedef char *__caddr_t;

typedef long int __intptr_t;

typedef unsigned int __socklen_t;

typedef __ssize_t ssize_t;

typedef __gid_t gid_t;

typedef __uid_t uid_t;

typedef __off_t off_t;

typedef __off64_t off64_t;

typedef __useconds_t useconds_t;

typedef __pid_t pid_t;

typedef __intptr_t intptr_t;

typedef __socklen_t socklen_t;

extern int access (__const char *__name, int __type) throw () __attribute__ ((__nonnull__ (1)));

extern int euidaccess (__const char *__name, int __type)
     throw () __attribute__ ((__nonnull__ (1)));

extern int eaccess (__const char *__name, int __type)
     throw () __attribute__ ((__nonnull__ (1)));

extern int faccessat (int __fd, __const char *__file, int __type, int __flag)
     throw () __attribute__ ((__nonnull__ (2))) ;

extern __off_t lseek (int __fd, __off_t __offset, int __whence) throw ();

extern __off64_t lseek64 (int __fd, __off64_t __offset, int __whence)
     throw ();

extern int close (int __fd);

extern ssize_t read (int __fd, void *__buf, size_t __nbytes) ;

extern ssize_t write (int __fd, __const void *__buf, size_t __n) ;

extern ssize_t pread (int __fd, void *__buf, size_t __nbytes,
        __off_t __offset) ;

extern ssize_t pwrite (int __fd, __const void *__buf, size_t __n,
         __off_t __offset) ;

extern ssize_t pread64 (int __fd, void *__buf, size_t __nbytes,
   __off64_t __offset) ;

extern ssize_t pwrite64 (int __fd, __const void *__buf, size_t __n,
    __off64_t __offset) ;

extern int pipe (int __pipedes[2]) throw () ;

extern int pipe2 (int __pipedes[2], int __flags) throw () ;

extern unsigned int alarm (unsigned int __seconds) throw ();

extern unsigned int sleep (unsigned int __seconds);

extern __useconds_t ualarm (__useconds_t __value, __useconds_t __interval)
     throw ();

extern int usleep (__useconds_t __useconds);

extern int pause (void);

extern int chown (__const char *__file, __uid_t __owner, __gid_t __group)
     throw () __attribute__ ((__nonnull__ (1))) ;

extern int fchown (int __fd, __uid_t __owner, __gid_t __group) throw () ;

extern int lchown (__const char *__file, __uid_t __owner, __gid_t __group)
     throw () __attribute__ ((__nonnull__ (1))) ;

extern int fchownat (int __fd, __const char *__file, __uid_t __owner,
       __gid_t __group, int __flag)
     throw () __attribute__ ((__nonnull__ (2))) ;

extern int chdir (__const char *__path) throw () __attribute__ ((__nonnull__ (1))) ;

extern int fchdir (int __fd) throw () ;

extern char *getcwd (char *__buf, size_t __size) throw () ;

extern char *get_current_dir_name (void) throw ();

extern char *getwd (char *__buf)
     throw () __attribute__ ((__nonnull__ (1))) __attribute__ ((__deprecated__)) ;

extern int dup (int __fd) throw () ;

extern int dup2 (int __fd, int __fd2) throw ();

extern int dup3 (int __fd, int __fd2, int __flags) throw ();

extern char **__environ;

extern char **environ;

extern int execve (__const char *__path, char *__const __argv[],
     char *__const __envp[]) throw () __attribute__ ((__nonnull__ (1)));

extern int fexecve (int __fd, char *__const __argv[], char *__const __envp[])
     throw ();

extern int execv (__const char *__path, char *__const __argv[])
     throw () __attribute__ ((__nonnull__ (1)));

extern int execle (__const char *__path, __const char *__arg, ...)
     throw () __attribute__ ((__nonnull__ (1)));

extern int execl (__const char *__path, __const char *__arg, ...)
     throw () __attribute__ ((__nonnull__ (1)));

extern int execvp (__const char *__file, char *__const __argv[])
     throw () __attribute__ ((__nonnull__ (1)));

extern int execlp (__const char *__file, __const char *__arg, ...)
     throw () __attribute__ ((__nonnull__ (1)));

extern int execvpe (__const char *__file, char *__const __argv[],
      char *__const __envp[])
     throw () __attribute__ ((__nonnull__ (1)));

extern int nice (int __inc) throw () ;

extern void _exit (int __status) __attribute__ ((__noreturn__));

enum
  {
    _PC_LINK_MAX,
    _PC_MAX_CANON,
    _PC_MAX_INPUT,
    _PC_NAME_MAX,
    _PC_PATH_MAX,
    _PC_PIPE_BUF,
    _PC_CHOWN_RESTRICTED,
    _PC_NO_TRUNC,
    _PC_VDISABLE,
    _PC_SYNC_IO,
    _PC_ASYNC_IO,
    _PC_PRIO_IO,
    _PC_SOCK_MAXBUF,
    _PC_FILESIZEBITS,
    _PC_REC_INCR_XFER_SIZE,
    _PC_REC_MAX_XFER_SIZE,
    _PC_REC_MIN_XFER_SIZE,
    _PC_REC_XFER_ALIGN,
    _PC_ALLOC_SIZE_MIN,
    _PC_SYMLINK_MAX,
    _PC_2_SYMLINKS
  };

enum
  {
    _SC_ARG_MAX,
    _SC_CHILD_MAX,
    _SC_CLK_TCK,
    _SC_NGROUPS_MAX,
    _SC_OPEN_MAX,
    _SC_STREAM_MAX,
    _SC_TZNAME_MAX,
    _SC_JOB_CONTROL,
    _SC_SAVED_IDS,
    _SC_REALTIME_SIGNALS,
    _SC_PRIORITY_SCHEDULING,
    _SC_TIMERS,
    _SC_ASYNCHRONOUS_IO,
    _SC_PRIORITIZED_IO,
    _SC_SYNCHRONIZED_IO,
    _SC_FSYNC,
    _SC_MAPPED_FILES,
    _SC_MEMLOCK,
    _SC_MEMLOCK_RANGE,
    _SC_MEMORY_PROTECTION,
    _SC_MESSAGE_PASSING,
    _SC_SEMAPHORES,
    _SC_SHARED_MEMORY_OBJECTS,
    _SC_AIO_LISTIO_MAX,
    _SC_AIO_MAX,
    _SC_AIO_PRIO_DELTA_MAX,
    _SC_DELAYTIMER_MAX,
    _SC_MQ_OPEN_MAX,
    _SC_MQ_PRIO_MAX,
    _SC_VERSION,
    _SC_PAGESIZE,
    _SC_RTSIG_MAX,
    _SC_SEM_NSEMS_MAX,
    _SC_SEM_VALUE_MAX,
    _SC_SIGQUEUE_MAX,
    _SC_TIMER_MAX,
    _SC_BC_BASE_MAX,
    _SC_BC_DIM_MAX,
    _SC_BC_SCALE_MAX,
    _SC_BC_STRING_MAX,
    _SC_COLL_WEIGHTS_MAX,
    _SC_EQUIV_CLASS_MAX,
    _SC_EXPR_NEST_MAX,
    _SC_LINE_MAX,
    _SC_RE_DUP_MAX,
    _SC_CHARCLASS_NAME_MAX,
    _SC_2_VERSION,
    _SC_2_C_BIND,
    _SC_2_C_DEV,
    _SC_2_FORT_DEV,
    _SC_2_FORT_RUN,
    _SC_2_SW_DEV,
    _SC_2_LOCALEDEF,
    _SC_PII,
    _SC_PII_XTI,
    _SC_PII_SOCKET,
    _SC_PII_INTERNET,
    _SC_PII_OSI,
    _SC_POLL,
    _SC_SELECT,
    _SC_UIO_MAXIOV,
    _SC_IOV_MAX = _SC_UIO_MAXIOV,
    _SC_PII_INTERNET_STREAM,
    _SC_PII_INTERNET_DGRAM,
    _SC_PII_OSI_COTS,
    _SC_PII_OSI_CLTS,
    _SC_PII_OSI_M,
    _SC_T_IOV_MAX,
    _SC_THREADS,
    _SC_THREAD_SAFE_FUNCTIONS,
    _SC_GETGR_R_SIZE_MAX,
    _SC_GETPW_R_SIZE_MAX,
    _SC_LOGIN_NAME_MAX,
    _SC_TTY_NAME_MAX,
    _SC_THREAD_DESTRUCTOR_ITERATIONS,
    _SC_THREAD_KEYS_MAX,
    _SC_THREAD_STACK_MIN,
    _SC_THREAD_THREADS_MAX,
    _SC_THREAD_ATTR_STACKADDR,
    _SC_THREAD_ATTR_STACKSIZE,
    _SC_THREAD_PRIORITY_SCHEDULING,
    _SC_THREAD_PRIO_INHERIT,
    _SC_THREAD_PRIO_PROTECT,
    _SC_THREAD_PROCESS_SHARED,
    _SC_NPROCESSORS_CONF,
    _SC_NPROCESSORS_ONLN,
    _SC_PHYS_PAGES,
    _SC_AVPHYS_PAGES,
    _SC_ATEXIT_MAX,
    _SC_PASS_MAX,
    _SC_XOPEN_VERSION,
    _SC_XOPEN_XCU_VERSION,
    _SC_XOPEN_UNIX,
    _SC_XOPEN_CRYPT,
    _SC_XOPEN_ENH_I18N,
    _SC_XOPEN_SHM,
    _SC_2_CHAR_TERM,
    _SC_2_C_VERSION,
    _SC_2_UPE,
    _SC_XOPEN_XPG2,
    _SC_XOPEN_XPG3,
    _SC_XOPEN_XPG4,
    _SC_CHAR_BIT,
    _SC_CHAR_MAX,
    _SC_CHAR_MIN,
    _SC_INT_MAX,
    _SC_INT_MIN,
    _SC_LONG_BIT,
    _SC_WORD_BIT,
    _SC_MB_LEN_MAX,
    _SC_NZERO,
    _SC_SSIZE_MAX,
    _SC_SCHAR_MAX,
    _SC_SCHAR_MIN,
    _SC_SHRT_MAX,
    _SC_SHRT_MIN,
    _SC_UCHAR_MAX,
    _SC_UINT_MAX,
    _SC_ULONG_MAX,
    _SC_USHRT_MAX,
    _SC_NL_ARGMAX,
    _SC_NL_LANGMAX,
    _SC_NL_MSGMAX,
    _SC_NL_NMAX,
    _SC_NL_SETMAX,
    _SC_NL_TEXTMAX,
    _SC_XBS5_ILP32_OFF32,
    _SC_XBS5_ILP32_OFFBIG,
    _SC_XBS5_LP64_OFF64,
    _SC_XBS5_LPBIG_OFFBIG,
    _SC_XOPEN_LEGACY,
    _SC_XOPEN_REALTIME,
    _SC_XOPEN_REALTIME_THREADS,
    _SC_ADVISORY_INFO,
    _SC_BARRIERS,
    _SC_BASE,
    _SC_C_LANG_SUPPORT,
    _SC_C_LANG_SUPPORT_R,
    _SC_CLOCK_SELECTION,
    _SC_CPUTIME,
    _SC_THREAD_CPUTIME,
    _SC_DEVICE_IO,
    _SC_DEVICE_SPECIFIC,
    _SC_DEVICE_SPECIFIC_R,
    _SC_FD_MGMT,
    _SC_FIFO,
    _SC_PIPE,
    _SC_FILE_ATTRIBUTES,
    _SC_FILE_LOCKING,
    _SC_FILE_SYSTEM,
    _SC_MONOTONIC_CLOCK,

    _SC_MULTI_PROCESS,

    _SC_SINGLE_PROCESS,

    _SC_NETWORKING,

    _SC_READER_WRITER_LOCKS,

    _SC_SPIN_LOCKS,

    _SC_REGEXP,

    _SC_REGEX_VERSION,

    _SC_SHELL,

    _SC_SIGNALS,

    _SC_SPAWN,

    _SC_SPORADIC_SERVER,

    _SC_THREAD_SPORADIC_SERVER,

    _SC_SYSTEM_DATABASE,

    _SC_SYSTEM_DATABASE_R,

    _SC_TIMEOUTS,

    _SC_TYPED_MEMORY_OBJECTS,

    _SC_USER_GROUPS,

    _SC_USER_GROUPS_R,

    _SC_2_PBS,

    _SC_2_PBS_ACCOUNTING,

    _SC_2_PBS_LOCATE,

    _SC_2_PBS_MESSAGE,

    _SC_2_PBS_TRACK,

    _SC_SYMLOOP_MAX,

    _SC_STREAMS,

    _SC_2_PBS_CHECKPOINT,


    _SC_V6_ILP32_OFF32,

    _SC_V6_ILP32_OFFBIG,

    _SC_V6_LP64_OFF64,

    _SC_V6_LPBIG_OFFBIG,


    _SC_HOST_NAME_MAX,

    _SC_TRACE,

    _SC_TRACE_EVENT_FILTER,

    _SC_TRACE_INHERIT,

    _SC_TRACE_LOG,


    _SC_LEVEL1_ICACHE_SIZE,

    _SC_LEVEL1_ICACHE_ASSOC,

    _SC_LEVEL1_ICACHE_LINESIZE,

    _SC_LEVEL1_DCACHE_SIZE,

    _SC_LEVEL1_DCACHE_ASSOC,

    _SC_LEVEL1_DCACHE_LINESIZE,

    _SC_LEVEL2_CACHE_SIZE,

    _SC_LEVEL2_CACHE_ASSOC,

    _SC_LEVEL2_CACHE_LINESIZE,

    _SC_LEVEL3_CACHE_SIZE,

    _SC_LEVEL3_CACHE_ASSOC,

    _SC_LEVEL3_CACHE_LINESIZE,

    _SC_LEVEL4_CACHE_SIZE,

    _SC_LEVEL4_CACHE_ASSOC,

    _SC_LEVEL4_CACHE_LINESIZE,



    _SC_IPV6 = _SC_LEVEL1_ICACHE_SIZE + 50,

    _SC_RAW_SOCKETS,


    _SC_V7_ILP32_OFF32,

    _SC_V7_ILP32_OFFBIG,

    _SC_V7_LP64_OFF64,

    _SC_V7_LPBIG_OFFBIG,


    _SC_SS_REPL_MAX,


    _SC_TRACE_EVENT_NAME_MAX,

    _SC_TRACE_NAME_MAX,

    _SC_TRACE_SYS_MAX,

    _SC_TRACE_USER_EVENT_MAX,


    _SC_XOPEN_STREAMS,


    _SC_THREAD_ROBUST_PRIO_INHERIT,

    _SC_THREAD_ROBUST_PRIO_PROTECT,

  };



enum
  {
    _CS_PATH,


    _CS_V6_WIDTH_RESTRICTED_ENVS,



    _CS_GNU_LIBC_VERSION,

    _CS_GNU_LIBPTHREAD_VERSION,


    _CS_V5_WIDTH_RESTRICTED_ENVS,



    _CS_V7_WIDTH_RESTRICTED_ENVS,



    _CS_LFS_CFLAGS = 1000,

    _CS_LFS_LDFLAGS,

    _CS_LFS_LIBS,

    _CS_LFS_LINTFLAGS,

    _CS_LFS64_CFLAGS,

    _CS_LFS64_LDFLAGS,

    _CS_LFS64_LIBS,

    _CS_LFS64_LINTFLAGS,


    _CS_XBS5_ILP32_OFF32_CFLAGS = 1100,

    _CS_XBS5_ILP32_OFF32_LDFLAGS,

    _CS_XBS5_ILP32_OFF32_LIBS,

    _CS_XBS5_ILP32_OFF32_LINTFLAGS,

    _CS_XBS5_ILP32_OFFBIG_CFLAGS,

    _CS_XBS5_ILP32_OFFBIG_LDFLAGS,

    _CS_XBS5_ILP32_OFFBIG_LIBS,

    _CS_XBS5_ILP32_OFFBIG_LINTFLAGS,

    _CS_XBS5_LP64_OFF64_CFLAGS,

    _CS_XBS5_LP64_OFF64_LDFLAGS,

    _CS_XBS5_LP64_OFF64_LIBS,

    _CS_XBS5_LP64_OFF64_LINTFLAGS,

    _CS_XBS5_LPBIG_OFFBIG_CFLAGS,

    _CS_XBS5_LPBIG_OFFBIG_LDFLAGS,

    _CS_XBS5_LPBIG_OFFBIG_LIBS,

    _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS,


    _CS_POSIX_V6_ILP32_OFF32_CFLAGS,

    _CS_POSIX_V6_ILP32_OFF32_LDFLAGS,

    _CS_POSIX_V6_ILP32_OFF32_LIBS,

    _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS,

    _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS,

    _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS,

    _CS_POSIX_V6_ILP32_OFFBIG_LIBS,

    _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS,

    _CS_POSIX_V6_LP64_OFF64_CFLAGS,

    _CS_POSIX_V6_LP64_OFF64_LDFLAGS,

    _CS_POSIX_V6_LP64_OFF64_LIBS,

    _CS_POSIX_V6_LP64_OFF64_LINTFLAGS,

    _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS,

    _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS,

    _CS_POSIX_V6_LPBIG_OFFBIG_LIBS,

    _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS,


    _CS_POSIX_V7_ILP32_OFF32_CFLAGS,

    _CS_POSIX_V7_ILP32_OFF32_LDFLAGS,

    _CS_POSIX_V7_ILP32_OFF32_LIBS,

    _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS,

    _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS,

    _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS,

    _CS_POSIX_V7_ILP32_OFFBIG_LIBS,

    _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS,

    _CS_POSIX_V7_LP64_OFF64_CFLAGS,

    _CS_POSIX_V7_LP64_OFF64_LDFLAGS,

    _CS_POSIX_V7_LP64_OFF64_LIBS,

    _CS_POSIX_V7_LP64_OFF64_LINTFLAGS,

    _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS,

    _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS,

    _CS_POSIX_V7_LPBIG_OFFBIG_LIBS,

    _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS

  };

extern long int pathconf (__const char *__path, int __name)
     throw () __attribute__ ((__nonnull__ (1)));

extern long int fpathconf (int __fd, int __name) throw ();

extern long int sysconf (int __name) throw ();

extern size_t confstr (int __name, char *__buf, size_t __len) throw ();

extern __pid_t getpid (void) throw ();

extern __pid_t getppid (void) throw ();

extern __pid_t getpgrp (void) throw ();

extern __pid_t __getpgid (__pid_t __pid) throw ();

extern __pid_t getpgid (__pid_t __pid) throw ();

extern int setpgid (__pid_t __pid, __pid_t __pgid) throw ();

extern int setpgrp (void) throw ();

extern __pid_t setsid (void) throw ();



extern __pid_t getsid (__pid_t __pid) throw ();




extern __uid_t getuid (void) throw ();



extern __uid_t geteuid (void) throw ();



extern __gid_t getgid (void) throw ();



extern __gid_t getegid (void) throw ();





extern int getgroups (int __size, __gid_t __list[]) throw () ;




extern int group_member (__gid_t __gid) throw ();







extern int setuid (__uid_t __uid) throw ();





extern int setreuid (__uid_t __ruid, __uid_t __euid) throw ();





extern int seteuid (__uid_t __uid) throw ();







extern int setgid (__gid_t __gid) throw ();





extern int setregid (__gid_t __rgid, __gid_t __egid) throw ();





extern int setegid (__gid_t __gid) throw ();






extern int getresuid (__uid_t *__ruid, __uid_t *__euid, __uid_t *__suid)
     throw ();




extern int getresgid (__gid_t *__rgid, __gid_t *__egid, __gid_t *__sgid)
     throw ();




extern int setresuid (__uid_t __ruid, __uid_t __euid, __uid_t __suid)
     throw ();




extern int setresgid (__gid_t __rgid, __gid_t __egid, __gid_t __sgid)
     throw ();







extern __pid_t fork (void) throw ();







extern __pid_t vfork (void) throw ();






extern char *ttyname (int __fd) throw ();




extern int ttyname_r (int __fd, char *__buf, size_t __buflen)
     throw () __attribute__ ((__nonnull__ (2))) ;




extern int isatty (int __fd) throw ();






extern int ttyslot (void) throw ();





extern int link (__const char *__from, __const char *__to)
     throw () __attribute__ ((__nonnull__ (1, 2))) ;





extern int linkat (int __fromfd, __const char *__from, int __tofd,
     __const char *__to, int __flags)
     throw () __attribute__ ((__nonnull__ (2, 4))) ;





extern int symlink (__const char *__from, __const char *__to)
     throw () __attribute__ ((__nonnull__ (1, 2))) ;





extern ssize_t readlink (__const char *__restrict __path,
    char *__restrict __buf, size_t __len)
     throw () __attribute__ ((__nonnull__ (1, 2))) ;





extern int symlinkat (__const char *__from, int __tofd,
        __const char *__to) throw () __attribute__ ((__nonnull__ (1, 3))) ;



extern ssize_t readlinkat (int __fd, __const char *__restrict __path,
      char *__restrict __buf, size_t __len)
     throw () __attribute__ ((__nonnull__ (2, 3))) ;




extern int unlink (__const char *__name) throw () __attribute__ ((__nonnull__ (1)));




extern int unlinkat (int __fd, __const char *__name, int __flag)
     throw () __attribute__ ((__nonnull__ (2)));




extern int rmdir (__const char *__path) throw () __attribute__ ((__nonnull__ (1)));




extern __pid_t tcgetpgrp (int __fd) throw ();



extern int tcsetpgrp (int __fd, __pid_t __pgrp_id) throw ();







extern char *getlogin (void);








extern int getlogin_r (char *__name, size_t __name_len) __attribute__ ((__nonnull__ (1)));





extern int setlogin (__const char *__name) throw () __attribute__ ((__nonnull__ (1)));

extern "C" {
extern char *optarg;

extern int optind;

extern int opterr;

extern int optopt;

extern int getopt (int ___argc, char *const *___argv, const char *__shortopts)
       throw ();

}
extern int gethostname (char *__name, size_t __len) throw () __attribute__ ((__nonnull__ (1)));

extern int sethostname (__const char *__name, size_t __len)
     throw () __attribute__ ((__nonnull__ (1))) ;

extern int sethostid (long int __id) throw () ;

extern int getdomainname (char *__name, size_t __len)
     throw () __attribute__ ((__nonnull__ (1))) ;

extern int setdomainname (__const char *__name, size_t __len)
     throw () __attribute__ ((__nonnull__ (1))) ;

extern int vhangup (void) throw ();

extern int revoke (__const char *__file) throw () __attribute__ ((__nonnull__ (1))) ;

extern int profil (unsigned short int *__sample_buffer, size_t __size,
     size_t __offset, unsigned int __scale)
     throw () __attribute__ ((__nonnull__ (1)));

extern int acct (__const char *__name) throw ();

extern char *getusershell (void) throw ();

extern void endusershell (void) throw ();

extern void setusershell (void) throw ();

extern int daemon (int __nochdir, int __noclose) throw () ;

extern int chroot (__const char *__path) throw () __attribute__ ((__nonnull__ (1))) ;

extern char *getpass (__const char *__prompt) __attribute__ ((__nonnull__ (1)));

extern int fsync (int __fd);

extern long int gethostid (void);

extern void sync (void) throw ();

extern int getpagesize (void) throw () __attribute__ ((__const__));

extern int getdtablesize (void) throw ();

extern int truncate (__const char *__file, __off_t __length)
     throw () __attribute__ ((__nonnull__ (1))) ;

extern int truncate64 (__const char *__file, __off64_t __length)
     throw () __attribute__ ((__nonnull__ (1))) ;

extern int ftruncate (int __fd, __off_t __length) throw () ;

extern int ftruncate64 (int __fd, __off64_t __length) throw () ;

extern int brk (void *__addr) throw () ;

extern void *sbrk (intptr_t __delta) throw ();

extern long int syscall (long int __sysno, ...) throw ();

extern int lockf (int __fd, int __cmd, __off_t __len) ;

extern int lockf64 (int __fd, int __cmd, __off64_t __len) ;

extern int fdatasync (int __fildes);

extern char *crypt (__const char *__key, __const char *__salt)
     throw () __attribute__ ((__nonnull__ (1, 2)));

extern void encrypt (char *__block, int __edflag) throw () __attribute__ ((__nonnull__ (1)));

extern void swab (__const void *__restrict __from, void *__restrict __to,
    ssize_t __n) throw () __attribute__ ((__nonnull__ (1, 2)));

extern char *ctermid (char *__s) throw ();

}
       
       
extern "C" {
union wait
  {
    int w_status;

    struct
      {
 unsigned int __w_termsig:7;

 unsigned int __w_coredump:1;

 unsigned int __w_retcode:8;

 unsigned int:16;

      } __wait_terminated;

    struct
      {
 unsigned int __w_stopval:8;

 unsigned int __w_stopsig:8;

 unsigned int:16;

      } __wait_stopped;

  };


typedef struct
  {
    int quot;

    int rem;

  } div_t;

typedef struct
  {
    long int quot;

    long int rem;

  } ldiv_t;



__extension__ typedef struct
  {
    long long int quot;

    long long int rem;

  } lldiv_t;


extern size_t __ctype_get_mb_cur_max (void) throw () ;


extern double atof (__const char *__nptr)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;

extern int atoi (__const char *__nptr)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;

extern long int atol (__const char *__nptr)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;



__extension__ extern long long int atoll (__const char *__nptr)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;



extern double strtod (__const char *__restrict __nptr,
        char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1))) ;



extern float strtof (__const char *__restrict __nptr,
       char **__restrict __endptr) throw () __attribute__ ((__nonnull__ (1))) ;

extern long double strtold (__const char *__restrict __nptr,
       char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1))) ;



extern long int strtol (__const char *__restrict __nptr,
   char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1))) ;

extern unsigned long int strtoul (__const char *__restrict __nptr,
      char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1))) ;


__extension__
extern long long int strtoq (__const char *__restrict __nptr,
        char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1))) ;

__extension__
extern unsigned long long int strtouq (__const char *__restrict __nptr,
           char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1))) ;


__extension__
extern long long int strtoll (__const char *__restrict __nptr,
         char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1))) ;

__extension__
extern unsigned long long int strtoull (__const char *__restrict __nptr,
     char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1))) ;


typedef struct __locale_struct
{
  struct locale_data *__locales[13];

  const unsigned short int *__ctype_b;

  const int *__ctype_tolower;

  const int *__ctype_toupper;

  const char *__names[13];

} *__locale_t;

typedef __locale_t locale_t;

extern long int strtol_l (__const char *__restrict __nptr,
     char **__restrict __endptr, int __base,
     __locale_t __loc) throw () __attribute__ ((__nonnull__ (1, 4))) ;

extern unsigned long int strtoul_l (__const char *__restrict __nptr,
        char **__restrict __endptr,
        int __base, __locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 4))) ;

__extension__
extern long long int strtoll_l (__const char *__restrict __nptr,
    char **__restrict __endptr, int __base,
    __locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 4))) ;

__extension__
extern unsigned long long int strtoull_l (__const char *__restrict __nptr,
       char **__restrict __endptr,
       int __base, __locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 4))) ;

extern double strtod_l (__const char *__restrict __nptr,
   char **__restrict __endptr, __locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3))) ;

extern float strtof_l (__const char *__restrict __nptr,
         char **__restrict __endptr, __locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3))) ;

extern long double strtold_l (__const char *__restrict __nptr,
         char **__restrict __endptr,
         __locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3))) ;

extern char *l64a (long int __n) throw () ;

extern long int a64l (__const char *__s)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;

extern "C" {
typedef __u_char u_char;

typedef __u_short u_short;

typedef __u_int u_int;

typedef __u_long u_long;

typedef __quad_t quad_t;

typedef __u_quad_t u_quad_t;

typedef __fsid_t fsid_t;

typedef __loff_t loff_t;

typedef __ino_t ino_t;

typedef __ino64_t ino64_t;

typedef __dev_t dev_t;

typedef __mode_t mode_t;

typedef __nlink_t nlink_t;

typedef __id_t id_t;

typedef __daddr_t daddr_t;

typedef __caddr_t caddr_t;

typedef __key_t key_t;


typedef __clock_t clock_t;




typedef __time_t time_t;



typedef __clockid_t clockid_t;

typedef __timer_t timer_t;

typedef __suseconds_t suseconds_t;

typedef unsigned long int ulong;

typedef unsigned short int ushort;

typedef unsigned int uint;

typedef int int8_t __attribute__ ((__mode__ (__QI__)));

typedef int int16_t __attribute__ ((__mode__ (__HI__)));

typedef int int32_t __attribute__ ((__mode__ (__SI__)));

typedef int int64_t __attribute__ ((__mode__ (__DI__)));

typedef unsigned int u_int8_t __attribute__ ((__mode__ (__QI__)));

typedef unsigned int u_int16_t __attribute__ ((__mode__ (__HI__)));

typedef unsigned int u_int32_t __attribute__ ((__mode__ (__SI__)));

typedef unsigned int u_int64_t __attribute__ ((__mode__ (__DI__)));

typedef int register_t __attribute__ ((__mode__ (__word__)));

typedef int __sig_atomic_t;

typedef struct
  {
    unsigned long int __val[(1024 / (8 * sizeof (unsigned long int)))];

  } __sigset_t;

typedef __sigset_t sigset_t;

struct timespec
  {
    __time_t tv_sec;

    long int tv_nsec;

  };

struct timeval
  {
    __time_t tv_sec;

    __suseconds_t tv_usec;

  };

typedef long int __fd_mask;

typedef struct
  {
    __fd_mask fds_bits[1024 / (8 * (int) sizeof (__fd_mask))];

  } fd_set;

typedef __fd_mask fd_mask;

extern "C" {
extern int select (int __nfds, fd_set *__restrict __readfds,
     fd_set *__restrict __writefds,
     fd_set *__restrict __exceptfds,
     struct timeval *__restrict __timeout);

extern int pselect (int __nfds, fd_set *__restrict __readfds,
      fd_set *__restrict __writefds,
      fd_set *__restrict __exceptfds,
      const struct timespec *__restrict __timeout,
      const __sigset_t *__restrict __sigmask);

}
__extension__
extern unsigned int gnu_dev_major (unsigned long long int __dev)
     throw ();

__extension__
extern unsigned int gnu_dev_minor (unsigned long long int __dev)
     throw ();

__extension__
extern unsigned long long int gnu_dev_makedev (unsigned int __major,
            unsigned int __minor)
     throw ();

typedef __blksize_t blksize_t;

typedef __blkcnt_t blkcnt_t;

typedef __fsblkcnt_t fsblkcnt_t;

typedef __fsfilcnt_t fsfilcnt_t;

typedef __blkcnt64_t blkcnt64_t;

typedef __fsblkcnt64_t fsblkcnt64_t;

typedef __fsfilcnt64_t fsfilcnt64_t;

typedef unsigned long int pthread_t;

typedef union
{
  char __size[56];

  long int __align;

} pthread_attr_t;

typedef struct __pthread_internal_list
{
  struct __pthread_internal_list *__prev;

  struct __pthread_internal_list *__next;

} __pthread_list_t;

typedef union
{
  struct __pthread_mutex_s
  {
    int __lock;

    unsigned int __count;

    int __owner;

    unsigned int __nusers;

    int __kind;

    int __spins;

    __pthread_list_t __list;

  } __data;

  char __size[40];

  long int __align;

} pthread_mutex_t;

typedef union
{
  char __size[4];

  int __align;

} pthread_mutexattr_t;

typedef union
{
  struct
  {
    int __lock;

    unsigned int __futex;

    __extension__ unsigned long long int __total_seq;

    __extension__ unsigned long long int __wakeup_seq;

    __extension__ unsigned long long int __woken_seq;

    void *__mutex;

    unsigned int __nwaiters;

    unsigned int __broadcast_seq;

  } __data;

  char __size[48];

  __extension__ long long int __align;

} pthread_cond_t;

typedef union
{
  char __size[4];

  int __align;

} pthread_condattr_t;

typedef unsigned int pthread_key_t;

typedef int pthread_once_t;

typedef union
{
  struct
  {
    int __lock;

    unsigned int __nr_readers;

    unsigned int __readers_wakeup;

    unsigned int __writer_wakeup;

    unsigned int __nr_readers_queued;

    unsigned int __nr_writers_queued;

    int __writer;

    int __shared;

    unsigned long int __pad1;

    unsigned long int __pad2;

    unsigned int __flags;

  } __data;

  char __size[56];

  long int __align;

} pthread_rwlock_t;

typedef union
{
  char __size[8];

  long int __align;

} pthread_rwlockattr_t;

typedef volatile int pthread_spinlock_t;

typedef union
{
  char __size[32];

  long int __align;

} pthread_barrier_t;

typedef union
{
  char __size[4];

  int __align;

} pthread_barrierattr_t;

}
extern long int random (void) throw ();

extern void srandom (unsigned int __seed) throw ();

extern char *initstate (unsigned int __seed, char *__statebuf,
   size_t __statelen) throw () __attribute__ ((__nonnull__ (2)));

extern char *setstate (char *__statebuf) throw () __attribute__ ((__nonnull__ (1)));

struct random_data
  {
    int32_t *fptr;

    int32_t *rptr;

    int32_t *state;

    int rand_type;

    int rand_deg;

    int rand_sep;

    int32_t *end_ptr;

  };

extern int random_r (struct random_data *__restrict __buf,
       int32_t *__restrict __result) throw () __attribute__ ((__nonnull__ (1, 2)));

extern int srandom_r (unsigned int __seed, struct random_data *__buf)
     throw () __attribute__ ((__nonnull__ (2)));

extern int initstate_r (unsigned int __seed, char *__restrict __statebuf,
   size_t __statelen,
   struct random_data *__restrict __buf)
     throw () __attribute__ ((__nonnull__ (2, 4)));

extern int setstate_r (char *__restrict __statebuf,
         struct random_data *__restrict __buf)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int rand (void) throw ();

extern void srand (unsigned int __seed) throw ();


extern int rand_r (unsigned int *__seed) throw ();

extern double drand48 (void) throw ();

extern double erand48 (unsigned short int __xsubi[3]) throw () __attribute__ ((__nonnull__ (1)));

extern long int lrand48 (void) throw ();

extern long int nrand48 (unsigned short int __xsubi[3])
     throw () __attribute__ ((__nonnull__ (1)));

extern long int mrand48 (void) throw ();

extern long int jrand48 (unsigned short int __xsubi[3])
     throw () __attribute__ ((__nonnull__ (1)));

extern void srand48 (long int __seedval) throw ();

extern unsigned short int *seed48 (unsigned short int __seed16v[3])
     throw () __attribute__ ((__nonnull__ (1)));

extern void lcong48 (unsigned short int __param[7]) throw () __attribute__ ((__nonnull__ (1)));

struct drand48_data
  {
    unsigned short int __x[3];

    unsigned short int __old_x[3];

    unsigned short int __c;

    unsigned short int __init;

    unsigned long long int __a;

  };

extern int drand48_r (struct drand48_data *__restrict __buffer,
        double *__restrict __result) throw () __attribute__ ((__nonnull__ (1, 2)));

extern int erand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        double *__restrict __result) throw () __attribute__ ((__nonnull__ (1, 2)));

extern int lrand48_r (struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     throw () __attribute__ ((__nonnull__ (1, 2)));

extern int nrand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     throw () __attribute__ ((__nonnull__ (1, 2)));

extern int mrand48_r (struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     throw () __attribute__ ((__nonnull__ (1, 2)));

extern int jrand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     throw () __attribute__ ((__nonnull__ (1, 2)));

extern int srand48_r (long int __seedval, struct drand48_data *__buffer)
     throw () __attribute__ ((__nonnull__ (2)));

extern int seed48_r (unsigned short int __seed16v[3],
       struct drand48_data *__buffer) throw () __attribute__ ((__nonnull__ (1, 2)));

extern int lcong48_r (unsigned short int __param[7],
        struct drand48_data *__buffer)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern void *malloc (size_t __size) throw () __attribute__ ((__malloc__)) ;

extern void *calloc (size_t __nmemb, size_t __size)
     throw () __attribute__ ((__malloc__)) ;



extern void *realloc (void *__ptr, size_t __size)
     throw () __attribute__ ((__warn_unused_result__));

extern void free (void *__ptr) throw ();


extern void cfree (void *__ptr) throw ();

extern "C" {
extern void *alloca (size_t __size) throw ();

}
extern void *valloc (size_t __size) throw () __attribute__ ((__malloc__)) ;

extern int posix_memalign (void **__memptr, size_t __alignment, size_t __size)
     throw () __attribute__ ((__nonnull__ (1))) ;


extern void abort (void) throw () __attribute__ ((__noreturn__));

extern int atexit (void (*__func) (void)) throw () __attribute__ ((__nonnull__ (1)));

extern "C++" int at_quick_exit (void (*__func) (void))
     throw () __asm ("at_quick_exit") __attribute__ ((__nonnull__ (1)));


extern int on_exit (void (*__func) (int __status, void *__arg), void *__arg)
     throw () __attribute__ ((__nonnull__ (1)));


extern void exit (int __status) throw () __attribute__ ((__noreturn__));

extern void quick_exit (int __status) throw () __attribute__ ((__noreturn__));



extern void _Exit (int __status) throw () __attribute__ ((__noreturn__));



extern char *getenv (__const char *__name) throw () __attribute__ ((__nonnull__ (1))) ;


extern char *__secure_getenv (__const char *__name)
     throw () __attribute__ ((__nonnull__ (1))) ;

extern int putenv (char *__string) throw () __attribute__ ((__nonnull__ (1)));

extern int setenv (__const char *__name, __const char *__value, int __replace)
     throw () __attribute__ ((__nonnull__ (2)));

extern int unsetenv (__const char *__name) throw ();

extern int clearenv (void) throw ();

extern char *mktemp (char *__template) throw () __attribute__ ((__nonnull__ (1))) ;

extern int mkstemp (char *__template) __attribute__ ((__nonnull__ (1))) ;

extern int mkstemp64 (char *__template) __attribute__ ((__nonnull__ (1))) ;

extern int mkstemps (char *__template, int __suffixlen) __attribute__ ((__nonnull__ (1))) ;

extern int mkstemps64 (char *__template, int __suffixlen)
     __attribute__ ((__nonnull__ (1))) ;

extern char *mkdtemp (char *__template) throw () __attribute__ ((__nonnull__ (1))) ;

extern int mkostemp (char *__template, int __flags) __attribute__ ((__nonnull__ (1))) ;

extern int mkostemp64 (char *__template, int __flags) __attribute__ ((__nonnull__ (1))) ;

extern int mkostemps (char *__template, int __suffixlen, int __flags)
     __attribute__ ((__nonnull__ (1))) ;

extern int mkostemps64 (char *__template, int __suffixlen, int __flags)
     __attribute__ ((__nonnull__ (1))) ;


extern int system (__const char *__command) ;


extern char *canonicalize_file_name (__const char *__name)
     throw () __attribute__ ((__nonnull__ (1))) ;

extern char *realpath (__const char *__restrict __name,
         char *__restrict __resolved) throw () ;

typedef int (*__compar_fn_t) (__const void *, __const void *);

typedef __compar_fn_t comparison_fn_t;

typedef int (*__compar_d_fn_t) (__const void *, __const void *, void *);


extern void *bsearch (__const void *__key, __const void *__base,
        size_t __nmemb, size_t __size, __compar_fn_t __compar)
     __attribute__ ((__nonnull__ (1, 2, 5))) ;

extern void qsort (void *__base, size_t __nmemb, size_t __size,
     __compar_fn_t __compar) __attribute__ ((__nonnull__ (1, 4)));

extern void qsort_r (void *__base, size_t __nmemb, size_t __size,
       __compar_d_fn_t __compar, void *__arg)
  __attribute__ ((__nonnull__ (1, 4)));

extern int abs (int __x) throw () __attribute__ ((__const__)) ;

extern long int labs (long int __x) throw () __attribute__ ((__const__)) ;


__extension__ extern long long int llabs (long long int __x)
     throw () __attribute__ ((__const__)) ;


extern div_t div (int __numer, int __denom)
     throw () __attribute__ ((__const__)) ;

extern ldiv_t ldiv (long int __numer, long int __denom)
     throw () __attribute__ ((__const__)) ;



__extension__ extern lldiv_t lldiv (long long int __numer,
        long long int __denom)
     throw () __attribute__ ((__const__)) ;


extern char *ecvt (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign) throw () __attribute__ ((__nonnull__ (3, 4))) ;

extern char *fcvt (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign) throw () __attribute__ ((__nonnull__ (3, 4))) ;

extern char *gcvt (double __value, int __ndigit, char *__buf)
     throw () __attribute__ ((__nonnull__ (3))) ;

extern char *qecvt (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign)
     throw () __attribute__ ((__nonnull__ (3, 4))) ;

extern char *qfcvt (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign)
     throw () __attribute__ ((__nonnull__ (3, 4))) ;

extern char *qgcvt (long double __value, int __ndigit, char *__buf)
     throw () __attribute__ ((__nonnull__ (3))) ;

extern int ecvt_r (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign, char *__restrict __buf,
     size_t __len) throw () __attribute__ ((__nonnull__ (3, 4, 5)));

extern int fcvt_r (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign, char *__restrict __buf,
     size_t __len) throw () __attribute__ ((__nonnull__ (3, 4, 5)));

extern int qecvt_r (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign,
      char *__restrict __buf, size_t __len)
     throw () __attribute__ ((__nonnull__ (3, 4, 5)));

extern int qfcvt_r (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign,
      char *__restrict __buf, size_t __len)
     throw () __attribute__ ((__nonnull__ (3, 4, 5)));


extern int mblen (__const char *__s, size_t __n) throw () ;

extern int mbtowc (wchar_t *__restrict __pwc,
     __const char *__restrict __s, size_t __n) throw () ;

extern int wctomb (char *__s, wchar_t __wchar) throw () ;

extern size_t mbstowcs (wchar_t *__restrict __pwcs,
   __const char *__restrict __s, size_t __n) throw ();

extern size_t wcstombs (char *__restrict __s,
   __const wchar_t *__restrict __pwcs, size_t __n)
     throw ();


extern int rpmatch (__const char *__response) throw () __attribute__ ((__nonnull__ (1))) ;

extern int getsubopt (char **__restrict __optionp,
        char *__const *__restrict __tokens,
        char **__restrict __valuep)
     throw () __attribute__ ((__nonnull__ (1, 2, 3))) ;

extern void setkey (__const char *__key) throw () __attribute__ ((__nonnull__ (1)));

extern int posix_openpt (int __oflag) ;

extern int grantpt (int __fd) throw ();

extern int unlockpt (int __fd) throw ();

extern char *ptsname (int __fd) throw () ;

extern int ptsname_r (int __fd, char *__buf, size_t __buflen)
     throw () __attribute__ ((__nonnull__ (2)));

extern int getpt (void);

extern int getloadavg (double __loadavg[], int __nelem)
     throw () __attribute__ ((__nonnull__ (1)));

}
namespace std __attribute__ ((__visibility__ ("default"))) {
  using ::div_t;

  using ::ldiv_t;

  using ::abort;

  using ::abs;

  using ::atexit;

  using ::atof;

  using ::atoi;

  using ::atol;

  using ::bsearch;

  using ::calloc;

  using ::div;

  using ::exit;

  using ::free;

  using ::getenv;

  using ::labs;

  using ::ldiv;

  using ::malloc;

  using ::mblen;

  using ::mbstowcs;

  using ::mbtowc;

  using ::qsort;

  using ::rand;

  using ::realloc;

  using ::srand;

  using ::strtod;

  using ::strtol;

  using ::strtoul;

  using ::system;

  using ::wcstombs;

  using ::wctomb;

  inline long
  abs(long __i) { return labs(__i);
 }
  inline ldiv_t
  div(long __i, long __j) { return ldiv(__i, __j);
 }
}
namespace __gnu_cxx __attribute__ ((__visibility__ ("default"))) {
  using ::lldiv_t;

  using ::_Exit;

  inline long long
  abs(long long __x) { return __x >= 0 ? __x : -__x;
 }
  using ::llabs;

  inline lldiv_t
  div(long long __n, long long __d)
  { lldiv_t __q;
 __q.quot = __n / __d;
 __q.rem = __n % __d;
 return __q;
 }
  using ::lldiv;

  using ::atoll;

  using ::strtoll;

  using ::strtoull;

  using ::strtof;

  using ::strtold;

}
namespace std __attribute__ ((__visibility__ ("default"))) {
  using ::__gnu_cxx::lldiv_t;

  using ::__gnu_cxx::_Exit;

  using ::__gnu_cxx::abs;

  using ::__gnu_cxx::llabs;

  using ::__gnu_cxx::div;

  using ::__gnu_cxx::lldiv;

  using ::__gnu_cxx::atoll;

  using ::__gnu_cxx::strtof;

  using ::__gnu_cxx::strtoll;

  using ::__gnu_cxx::strtoull;

  using ::__gnu_cxx::strtold;

}
       
namespace boost{
   __extension__ typedef long long long_long_type;

   __extension__ typedef unsigned long long ulong_long_type;

}
namespace boost{
template <bool x> struct STATIC_ASSERTION_FAILURE;

template <> struct STATIC_ASSERTION_FAILURE<true> { enum { value = 1 };
 };

template<int x> struct static_assert_test{};

}
namespace Random{
   struct random {
       random(){};

       double operator()(){return drand48();
}
       int IntRd(){return rand();
}
   };

}
static Random::random Rd;

static double value = (double)1/0xF4240;

template <int n, int m, typename T, int nthreads>
struct size {
   typedef ::boost::static_assert_test< sizeof(::boost::STATIC_ASSERTION_FAILURE< ((n>0) == 0 ? false : true) >)> boost_static_assert_typedef_29;

   typedef T value_type;

   enum {ValueX = n};

   enum {ValueY = m};

   enum {ValueThread = nthreads};

   enum {null = 0};

};

typedef ambient::dim2 dim;

typedef maquis::types::dense_matrix<double> sMatrix;

typedef maquis::types::p_dense_matrix<double> pMatrix;

typedef maquis::types::diagonal_matrix<double> sDiagMatrix;

typedef maquis::types::p_diagonal_matrix<double> pDiagMatrix;

typedef boost::mpl::list<
                        > test_types;

struct caveats {
    caveats() {
        srand48(1);

        srand(1);

    }
    ~caveats() {
    }
};

void Boost_check_close_adapter(double a, double b){
    BOOST_CHECK_CLOSE(a, b, value);

};

void Boost_check_close_adapter(std::complex<double> a, std::complex<double> b){
    BOOST_CHECK_CLOSE(a.real(), b.real(), value);

    BOOST_CHECK_CLOSE(a.imag(), b.imag(), value);

};

BOOST_GLOBAL_FIXTURE( caveats );

