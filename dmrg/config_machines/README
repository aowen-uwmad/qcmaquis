3 possibilities of compilations

Whatever your choice the strategy is the same. Go in your working directory,
and create a directory for the compilation, like build_intel_mpi thus you can 
create several targets and try several configurations

Set up your compiler and boost (by default the machine will take its native compiler GCC usually )

export CC=icc
export CXX=icpc
export BOOST_ROOT=/absolute_path/to_boost_root_directory e.g. eiger: /apps/eiger/boost_1_46_1/

-------------------------------------------------------------------------------------------------------------------------

1) I work on Ambient (trunk/src/ambient)

- whatever your compiler and your wrapper mpi (I tested gcc,clang,icc with openmp and mvapich2)

cmake ..

- if you decide to take intel_mpi use the config file as follow (find.MPI failed to find correctly the information, so by hand)

cmake -DMACHINE_CONFIG=/ABSOLUTE_PATH_TO_THE_CONFIG_FILES .. e.g.  eiger: cmake  -DMACHINE_CONFIG=/users/user_name/SOMETHING/trunk/src/dmrg/config_machines/eiger_intel.cmake

NOTE : if you play with the sand box give the path of boost numeric (include in alps, SOMETHING/ALPS/include, just need for wrapper) into sandbox/CMakeList.txt

-------------------------------------------------------------------------------------------------------------------------

2) I work on DMRG (trunk/src/dmrg)

As the point 1

- Blas/Lapack used ALPS by default, if you want the MKL, give a config file or set up by hand (/config_machines/eiger_mkl.cmake)
- give the path of ALPS config files, usually SOMETHING/ALPS/share/alps

for // version
into ccmake, set on : BUILD_AMBIENT, ENABLE_PARALLEL, ENABLE_TESTS

-------------------------------------------------------------------------------------------------------------------------

3) I work on types (trunk/src/types)

As the point 1
into ccmake, set on : BUILD_AMBIENT, ENABLE_PARALLEL, ENABLE_TESTS
set up ALPS_DIR (ccmake .) for boost_numeric usualy SOMETHING/ALPS/include (for wrapper blas lapack) 
