/*****************************************************************************
 *
 * ALPS MPS DMRG Project
 *
 * Copyright (C) 2014 Institute for Theoretical Physics,ETH Zurich
 *               2011-2013 by Michele Dolfi <dolfim@phys.ethz.ch>
 *               2020 by Leon Freitag <lefreita@ethz.ch>
 *
 * This software is part of the ALPS Applications,published under the ALPS
 * Application License; you can use,redistribute it and/or modify it under
 * the terms of the license,either version 1 or (at your option) any later
 * version.
 *
 * You should have received a copy of the ALPS Application License along with
 * the ALPS Applications; see the file LICENSE.txt. If not,the license is also
 * available from http://alps.comp-phys.org/.
 *
 * THE SOFTWARE IS PROVIDED "AS IS",WITHOUT WARRANTY OF ANY KIND,EXPRESS OR
 * IMPLIED,INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE,TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY,WHETHER IN CONTRACT,TORT OR OTHERWISE,
 * ARISING FROM,OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 *****************************************************************************/

#define BOOST_TEST_MAIN

#include <boost/test/included/unit_test.hpp>
#include "utils/fpcomparison.h"
#include "utils/io.hpp" // has to be first include because of impi
#include <iostream>

#include "maquis_dmrg.h"

#include "check_rdm.h"
// Test 1: H2 with d=3 Angstrom,singlet,cc-pVDZ basis set,CAS(2,2),integrals generated by MOLCAS
BOOST_AUTO_TEST_CASE( Test_HiRDM )
{
    typedef maquis::DMRGInterface<double>::meas_with_results_type rdm_measurement;

    DmrgParameters p;
    // // Integrals can be alternatively defined like this (as the FCIDUMP file without header)
    //
    const std::string integrals(
     "    1.63719990472             1     1     1     1\n"
     "  -0.144746632369             1     1     2     1\n"
     "   0.266282775636E-01         2     1     2     1\n"
     "   0.167531821030E-01         2     2     2     1\n"
     "   0.459207160088             1     1     2     2\n"
     "   0.533052674812             2     2     2     2\n"
     "   -0.230673683229E-01        1     1     3     1\n"
     "   0.873924303638E-02         2     1     3     1\n"
     "   0.212121998644E-01         2     2     3     1\n"
     "   0.517422983458E-02         3     1     3     1\n"
     "   0.166602690956E-01         3     2     3     1\n"
     "   0.201358122600E-01         3     3     3     1\n"
     "   0.113600263329             1     1     3     2\n"
     "   0.130338872974E-01         2     1     3     2\n"
     "   0.170776682916             2     2     3     2\n"
     "   0.130799970176             3     2     3     2\n"
     "   0.156301172407             3     3     3     2\n"
     "   0.386363318135             1     1     3     3\n"
     "   0.177101856628E-01         2     1     3     3\n"
     "   0.469384865605             2     2     3     3\n"
     "   0.439202823493             3     3     3     3\n"
     "   -4.96687194130             1     1     0     0\n"
     "   0.128261636279             2     1     0     0\n"
     "   -1.74403215804             2     2     0     0\n"
     "   -0.589618128664E-02        3     1     0     0\n"
     "   -0.377341184513            3     2     0     0\n"
     "   -1.09420984374             3     3     0     0\n"
     "   1.58753163271              0     0     0     0\n");


    p.set("integrals",integrals);


    p.set("site_types","0,0,0");
    p.set("L",3);
    p.set("irrep",0);

    p.set("nsweeps",2);
    p.set("max_bond_dimension",100);

    // for SU2U1
    p.set("nelec",4);
    p.set("spin",0);

    // for 2U1

    p.set("u1_total_charge1",2);
    p.set("u1_total_charge2",2);

    // Measure 4-RDM
    p.set("MEASURE[4rdm]",1);
    // Measure 3-RDM
    p.set("MEASURE[3rdm]",1);
    // This is an expensive test,so we will run it only for one symmetry
    std::vector<std::string> symmetries;
    #ifdef HAVE_SU2U1PG
    symmetries.push_back("su2u1pg");
    #endif

    // #ifdef HAVE_SU2U1
    // symmetries.push_back("su2u1");
    // #endif
    // #ifdef HAVE_TwoU1PG
    // symmetries.push_back("2u1pg");
    // #endif
    // #ifdef HAVE_TwoU1
    // symmetries.push_back("2u1");
    // #endif

    for (auto&& s: symmetries)
    {
        maquis::cout << "Running test for symmetry " << s << std::endl;
        p.set("symmetry",s);

        maquis::DMRGInterface<double> interface(p);
        interface.optimize();

        BOOST_CHECK_CLOSE(interface.energy(),-7.8986766891097169 ,1e-7);

        // 4-RDM
        const rdm_measurement& meas = interface.fourrdm();

        double value = 0.0;

        const rdm_measurement ref_4rdm = {
            { {2,2,0,0,2,1,0,0}, {2,1,0,0,1,2,0,0}, {2,2,0,0,2,2,0,0}, {2,2,0,0,2,0,1,1}, {2,2,0,0,1,1,0,0}, {2,1,0,0,2,1,0,0},
              {2,1,0,0,1,1,0,0}, {2,2,0,0,2,1,1,0}, {2,1,0,0,0,0,2,1}, {2,2,1,0,2,2,0,0}, {2,2,1,0,2,2,0,1}, {2,2,1,0,2,1,0,0},
              {2,2,1,0,2,2,1,0}, {2,2,1,0,2,0,1,1}, {1,1,0,0,1,1,0,0}, {2,2,1,0,1,1,0,0}, {2,2,1,0,1,1,0,2}, {2,2,1,0,1,1,2,0},
              {2,2,1,0,0,0,2,1}, {2,2,1,0,0,0,1,2}, {2,1,1,0,1,2,0,1}, {2,1,1,0,1,1,0,0}, {2,1,1,0,1,2,0,0}, {2,1,1,0,2,1,0,0},
              {2,2,1,0,1,0,2,2}, {2,1,1,0,0,2,1,0}, {2,1,1,0,0,2,1,1}, {2,1,1,0,2,0,1,1}, {2,2,1,1,2,2,1,0}, {2,2,1,1,2,2,0,0},
              {2,2,1,1,1,1,0,0}, {2,2,1,1,2,1,0,0}, {2,2,1,1,2,1,1,0}, {2,2,1,1,2,0,1,1}, {2,2,1,1,2,2,1,1}},
            std::vector<double>{
               0.010620881028385543, 0.0015951837443312169, 0.07071480901180624, 0.00032592464529959745, -0.52689210303450595, 0.0015951837443312169,
              -0.079135592944768476, -0.00016296232264979873, 0.0015951837443312169, -0.0029538362361081765, 0.00012338502545186831, -0.00044364601530354545,
               0.00012338502545186831, -1.3614234995189234e-05, 3.9258437110927495, 0.022008869262486793, -1.3614234995189234e-05, -1.3614234995189234e-05,
              -0.00044364601530354545, -0.00044364601530354545, 1.5021871075962781e-06, 0.0012142231888373587, -2.4475827130975116e-05, -2.4475827130975116e-05,
               0.00012338502545186831, 4.8951654261950233e-05, -7.5109355379813904e-07, -7.5109355379813904e-07, -1.2848614773863522e-05, 0.00030759570510149176,
              -0.0022918784652058983, 4.6198772709403401e-05, -7.0885449937470282e-07, 1.4177089987494056e-06, 1.3379816635167232e-06}
               };
        check_measurement_mat(meas, ref_4rdm);

        // 3-RDM
        const rdm_measurement& meas3 = interface.threerdm();

        const rdm_measurement ref_3rdm = {
           {{0, 0, 1, 0, 1, 0}, {0, 0, 1, 0, 1, 2}, {0, 0, 1, 0, 1, 1}, {0, 0, 1, 0, 2, 2}, {0, 0, 1, 0, 2, 1}, {0, 0, 1, 0, 0, 1}, {0, 0, 1, 0, 2, 0},
            {0, 0, 1, 0, 0, 2}, {0, 0, 1, 1, 0, 0}, {0, 0, 1, 1, 2, 1}, {0, 0, 1, 1, 1, 2}, {0, 0, 1, 1, 0, 1}, {0, 0, 1, 1, 2, 2}, {0, 0, 1, 1, 0, 2},
            {0, 0, 1, 2, 0, 0}, {0, 0, 1, 2, 0, 1}, {0, 0, 1, 2, 1, 2}, {0, 0, 1, 2, 1, 1}, {0, 0, 1, 2, 0, 2}, {0, 0, 2, 0, 1, 0}, {0, 0, 2, 0, 0, 1},
            {0, 0, 2, 0, 0, 2}, {0, 0, 2, 0, 1, 1}, {0, 0, 2, 0, 1, 2}, {0, 0, 2, 1, 0, 0}, {0, 0, 2, 0, 2, 2}, {0, 0, 2, 0, 2, 0}, {0, 0, 2, 0, 2, 1},
            {0, 0, 2, 1, 0, 1}, {0, 0, 2, 1, 0, 2}, {0, 0, 2, 1, 1, 2}, {0, 0, 2, 1, 2, 1}, {0, 0, 2, 1, 2, 2}, {0, 0, 2, 2, 0, 0}, {0, 0, 2, 2, 0, 2},
            {0, 0, 2, 2, 0, 1}, {0, 0, 2, 2, 1, 1}, {0, 0, 2, 2, 1, 2}, {1, 0, 0, 0, 0, 1}, {1, 0, 0, 0, 0, 2}, {1, 0, 0, 0, 1, 0}, {1, 0, 0, 0, 2, 0},
            {1, 0, 0, 0, 1, 1}, {1, 0, 0, 0, 1, 2}, {1, 0, 0, 0, 2, 1}, {1, 0, 0, 0, 2, 2}, {1, 0, 0, 1, 0, 0}, {1, 0, 0, 1, 0, 1}, {1, 0, 0, 1, 2, 1},
            {1, 0, 0, 1, 1, 2}, {1, 0, 0, 1, 0, 2}, {1, 0, 0, 1, 2, 2}, {1, 0, 0, 2, 0, 0}, {1, 0, 0, 2, 0, 1}, {1, 0, 0, 2, 0, 2}, {1, 0, 0, 2, 1, 1},
            {1, 0, 0, 2, 1, 2}, {1, 0, 1, 0, 0, 2}, {1, 0, 1, 0, 0, 1}, {1, 0, 1, 0, 1, 0}, {1, 0, 1, 0, 1, 1}, {1, 0, 1, 0, 1, 2}, {1, 0, 1, 0, 2, 0},
            {1, 0, 1, 0, 2, 1}, {1, 0, 1, 1, 0, 0}, {1, 0, 1, 0, 2, 2}, {1, 0, 1, 1, 0, 1}, {1, 0, 1, 1, 0, 2}, {1, 0, 1, 1, 1, 2}, {1, 0, 1, 1, 2, 1},
            {1, 0, 1, 1, 2, 2}, {1, 0, 1, 2, 0, 0}, {1, 0, 1, 2, 0, 1}, {1, 0, 1, 2, 0, 2}, {1, 0, 1, 2, 1, 1}, {1, 0, 1, 2, 1, 2}, {1, 0, 2, 0, 0, 1},
            {1, 0, 2, 0, 0, 2}, {1, 0, 2, 0, 1, 0}, {1, 0, 2, 0, 1, 1}, {1, 0, 2, 0, 2, 0}, {1, 0, 2, 0, 1, 2}, {1, 0, 2, 0, 2, 1}, {1, 0, 2, 1, 0, 0},
            {1, 0, 2, 0, 2, 2}, {1, 0, 2, 1, 0, 1}, {1, 0, 2, 1, 1, 2}, {1, 0, 2, 1, 0, 2}, {1, 0, 2, 1, 2, 1}, {1, 0, 2, 2, 0, 0}, {1, 0, 2, 1, 2, 2},
            {1, 0, 2, 2, 0, 1}, {1, 0, 2, 2, 0, 2}, {1, 0, 2, 2, 1, 1}, {1, 0, 2, 2, 1, 2}, {1, 1, 2, 1, 1, 2}, {1, 1, 2, 1, 2, 1}, {1, 1, 2, 1, 2, 2},
            {1, 1, 2, 2, 1, 1}, {2, 0, 0, 0, 0, 1}, {2, 0, 0, 0, 0, 2}, {1, 1, 2, 2, 1, 2}, {2, 0, 0, 0, 1, 0}, {2, 0, 0, 0, 1, 1}, {2, 0, 0, 0, 1, 2},
            {2, 0, 0, 0, 2, 0}, {2, 0, 0, 0, 2, 1}, {2, 0, 0, 0, 2, 2}, {2, 0, 0, 1, 0, 0}, {2, 0, 0, 1, 0, 1}, {2, 0, 0, 1, 0, 2}, {2, 0, 0, 1, 1, 2},
            {2, 0, 0, 1, 2, 1}, {2, 0, 0, 1, 2, 2}, {2, 0, 0, 2, 0, 0}, {2, 0, 0, 2, 0, 2}, {2, 0, 0, 2, 0, 1}, {2, 0, 0, 2, 1, 1}, {2, 0, 0, 2, 1, 2},
            {2, 0, 1, 0, 0, 1}, {2, 0, 1, 0, 0, 2}, {2, 0, 1, 0, 1, 0}, {2, 0, 1, 0, 1, 1}, {2, 0, 1, 0, 2, 0}, {2, 0, 1, 0, 1, 2}, {2, 0, 1, 0, 2, 1},
            {2, 0, 1, 0, 2, 2}, {2, 0, 1, 1, 0, 0}, {2, 0, 1, 1, 0, 1}, {2, 0, 1, 1, 0, 2}, {2, 0, 1, 1, 1, 2}, {2, 0, 1, 1, 2, 1}, {2, 0, 1, 2, 0, 0},
            {2, 0, 1, 1, 2, 2}, {2, 0, 1, 2, 0, 1}, {2, 0, 1, 2, 0, 2}, {2, 0, 1, 2, 1, 1}, {2, 0, 2, 0, 0, 1}, {2, 0, 2, 0, 0, 2}, {2, 0, 1, 2, 1, 2},
            {2, 0, 2, 0, 1, 0}, {2, 0, 2, 0, 1, 1}, {2, 0, 2, 0, 1, 2}, {2, 0, 2, 0, 2, 0}, {2, 0, 2, 0, 2, 1}, {2, 0, 2, 1, 0, 0}, {2, 0, 2, 0, 2, 2},
            {2, 0, 2, 1, 0, 1}, {2, 0, 2, 1, 1, 2}, {2, 0, 2, 1, 0, 2}, {2, 0, 2, 1, 2, 1}, {2, 0, 2, 1, 2, 2}, {2, 0, 2, 2, 0, 0}, {2, 0, 2, 2, 0, 1},
            {2, 0, 2, 2, 1, 1}, {2, 0, 2, 2, 0, 2}, {2, 1, 1, 1, 1, 2}, {2, 0, 2, 2, 1, 2}, {2, 1, 1, 1, 2, 2}, {2, 1, 1, 2, 1, 1}, {2, 1, 1, 2, 1, 2},
            {2, 1, 1, 1, 2, 1}, {2, 1, 2, 1, 1, 2}, {2, 1, 2, 1, 2, 1}, {2, 1, 2, 2, 1, 1}, {2, 1, 2, 1, 2, 2}, {2, 1, 2, 2, 1, 2}},
            {1.9637194474185395, -0.00077057717353433679, 2.4475827130985569e-05, 0.011004434631244163, 0.002206623370024024, -3.9274388948370791, -0.034257355958190738,
             0.068514711916381477, 1.9637194474185395, 2.3099386354705759e-05, -4.6198772709411519e-05, 2.4475827130985569e-05, -0.0011459392326031756, -0.00077057717353433679,
            -0.034257355958190738, 0.002206623370024024, -0.0011459392326031756, 2.3099386354705759e-05, 0.011004434631244163, -0.034257355958190738, 0.068514711916381477,
            -0.072309992756136324, 0.00016296232264987069, 0.0029783120632393459, -0.034257355958190738, -0.00022182300765178335, 0.036154996378068162, -0.0015258697723161514,
             0.00016296232264987069, 0.0029783120632393459, -0.00030759570510155031, 0.00015379785255077515, 2.3099386354705759e-05, 0.036154996378068162, -0.00022182300765178335,
            -0.0015258697723161514, 0.00015379785255077515, 2.3099386354705759e-05, 1.9637194474185395, -0.034257355958190738, 1.9637194474185395, -0.034257355958190738,
            -4.8951654261971138e-05, -0.0014360461964896868, -0.001436046196489687, -0.022008869262488327, -3.9274388948370791, 2.4475827130985569e-05, 2.3099386354705759e-05,
             2.3099386354705759e-05, 0.0022066233700240236, 0.0022918784652063511, 0.068514711916381477, -0.00077057717353433679, 0.011004434631244163, -4.6198772709411519e-05,
            -0.0011459392326031756, 0.00016296232264987069, 2.4475827130985569e-05, -4.8951654261971138e-05, 1.9629226066399277, -0.039574603589880943, -0.00032592464529974138,
            -0.039554182237388158, 2.4475827130985569e-05, -0.26344605151725092, -3.9258452132798554, 0.079128785827269094, -0.0012135143343385284, 0.0024270286686770568,
             0.011004434631244163, 0.00016296232264987069, 0.079128785827269094, 0.52689210303450185, -0.0012135143343385284, -0.022008869262488327, -0.00077057717353433723,
             0.0029783120632393459, -0.0014360461964896868, -0.039574603589880943, -0.0014524422909231946, 0.00067495794026748617, 0.0008600354784453145, 0.002206623370024024,
             0.005324054749187809, 0.079128785827269094, 3.7324441904852538e-05, -0.001720070956890629, -5.5375961648904622e-05, -0.0015258697723161514, -0.00022324071665053366,
            -0.0015327401380514044, -0.010627688145882823, 1.8051519744052084e-05, 0.00044435486980294191, -2.8401687711148804e-06, 1.4200843855574402e-06, -6.80711749759815e-06,
             1.4200843855574402e-06, -0.034257355958190738, 0.036154996378068162, -6.80711749759815e-06, -0.034257355958190738, -0.00032592464529974138, -0.0014524422909231946,
             0.036154996378068162, -0.0014524422909231946, 0.0004436460153035667, 0.068514711916381477, 0.00016296232264987069, -0.0015258697723161514, 0.00015379785255077515,
             0.00015379785255077515, -4.6198772709411519e-05, -0.072309992756136324, -0.00022182300765178335, 0.0029783120632393459, -0.00030759570510155031, 2.3099386354705759e-05,
             0.002206623370024024, -0.0015258697723161514, -0.0014360461964896868, -0.039554182237388158, -0.0014524422909231946, 0.0008600354784453145, 0.00085778219778391801,
             0.0053036333966950157, -0.00077057717353433712, 0.079128785827269094, -0.0015327401380514044, 1.8051519744052088e-05, -5.5375961648904622e-05, 0.0029783120632393459,
            -0.00022111415315240819, -0.0017200709568906288, -0.010627688145882825, 3.7324441904852538e-05, 0.011004434631244163, -0.00022182300765178329, 0.00044435486980294185,
            -0.022008869262488327, -0.26344605151725092, 0.005324054749187809, 0.00044364601530356659, 0.0053036333966950157, 0.011004434631244163, 0.035419097018628526,
             0.52689210303450185, 0.00016296232264987069, -0.010627688145882823, -0.00032592464529974138, -0.0014833424254411137, -0.00022182300765178329, -0.010627688145882825,
             0.00016296232264987069, -0.070838194037257052, 1.4200843855574402e-06, 0.0029666848508822273, 1.36142349951963e-05, -2.8401687711148804e-06, -6.80711749759815e-06,
             1.4200843855574402e-06, -6.8071174975981508e-06, 1.3614234995196302e-05, -6.8071174975981508e-06, 6.2361503557701404e-05, -0.00012472300711540281}
        };
        check_measurement_mat(meas3, ref_3rdm);

    }


}

