/*****************************************************************************
 *
 * ALPS MPS DMRG Project
 *
 * Copyright (C) 2014 Institute for Theoretical Physics, ETH Zurich
 *               2011-2013 by Michele Dolfi <dolfim@phys.ethz.ch>
 *               2021 by Robin Feldmann <robin.feldmann@phys.chem.ethz.ch>
 *
 * This software is part of the ALPS Applications, published under the ALPS
 * Application License; you can use, redistribute it and/or modify it under
 * the terms of the license, either version 1 or (at your option) any later
 * version.
 *
 * You should have received a copy of the ALPS Application License along with
 * the ALPS Applications; see the file LICENSE.txt. If not, the license is also
 * available from http://alps.comp-phys.org/.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 *****************************************************************************/

#define BOOST_TEST_MAIN

#include <boost/test/included/unit_test.hpp>
#include "utils/fpcomparison.h"
#include "utils/io.hpp" // has to be first include because of impi
#include "dmrg/models/coded/lattice.hpp"
#include "dmrg/models/coded/models_nu1.hpp"
#include "dmrg/sim/matrix_types.h"
#include <iostream>

#include "maquis_dmrg.h"


// Test 1: H2 with d=3 Angstrom, singlet, 6-31G* basis set, FCI, integrals generated by Blueberry
BOOST_AUTO_TEST_CASE( PreBO_Test1 )
{

    DmrgParameters p;

    const maquis::integral_map<double, chem::Hamiltonian::PreBO> integrals {
            {{-1,-1,-1,-1,-1,-1,-1,-1},0.1763923530387111}};

    p.set("integrals_binary", maquis::serialize(integrals));
    p.set("L", 4);
    p.set("LATTICE", "preBO lattice");
    p.set("MODEL", "PreBO");
    p.set("max_bond_dimension", 1000);

    p.set("PreBO_NumParticles",              2     );
    p.set("PreBO_NumParticleTypes",          1     );
    p.set("PreBO_ParticleTypeVector",        "2"   );
    p.set("PreBO_FermionOrBosonVector",      "1"   );
    p.set("PreBO_OrbitalVector",             "4"   );
    p.set("PreBO_InitialStateVector",        "1 1" );

    p.set("symmetry", "nu1");

    Lattice lat = lattice_factory(p);
    auto model = PreBO<tmatrix<double>>(lat, p);
    model.create_terms();

    auto vec_orbitals = lat.get_prop<std::vector<int>>("vec_orbitals");

    for (auto const& elem: vec_orbitals)
        std::cout << elem << std::endl;

}
