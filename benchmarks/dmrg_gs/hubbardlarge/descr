# Copy-paste from mail:


#This is a 10 by 10 square lattice with 47 spin-up and 47 spin-down fermions and no interactions, with "bond dimension" set to 2000. In terms of the model (two-species fermions, i.e. Hubbard model) and lattice size, this is pretty much where we want to go, with one crucial difference: we eventually want "bond dimension" to be around 10.000, and very probably even larger than that.

#For now, the idea is to use this system as a more realistic input for timing and performance optimization purposes. Towards that end,
#I have already computed a checkpoint. This checkpoint was created by making three full initial sweeps from our standard random starting state ("thin" initial state), and then stopping while sweeping forward after 5500 seconds in the fourth sweep (using the "run_seconds = 5500" option in the .parms-file). When the code stops after the time set by "run_seconds" expires, it saves the current state of the system to the checkpoint, s.t, when you restart you do not start sweeping from the beginning, but right where "run_seconds" made the code stop before, in this case after optimizing sites 21 and 22.

#The idea for anybody doing timing and performance optimization is to start the simulation from this checkpoint. This way, you only have to time the initial re-building of all the boundary objects separately, and then can let the code run only for a few two-site optimizations (two or three should be enough - bond dimension is already saturated and you start already away from the system boundaries)  before killing it again with the "run_seconds" option. To give you an idea, currently a single two-site optimization on this checkpoint using four cores of the Intel-node in Geneva takes about 320 seconds on average with Belas' OMP-parallelized code. BUT: when you do all this, use the "donotsave = 1" parameter-file option, otherwise you will obviously overwrite the checkpoint!

#Finally, when you want to evaluate how a given code scales with a bond dimension larger than 2000, just increase that parameter to the desired value (assuming the matrices still fit into memory of course ;-) ). Be sure to construct this new checkpoint analogous to the way this checkpoint is constructed: sweep backwards and forwards enough times such that the bond dimension saturates to the new value (except at the first and last few sites, where it always saturates to a lower value due to basic mathematical reasons), then stop the calculation somewhere in the middle using the "run_seconds" parameter-file option.
