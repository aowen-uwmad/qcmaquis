/*
 * Copyright Institute for Theoretical Physics, ETH Zurich 2015.
 * Distributed under the Boost Software License, Version 1.0.
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#ifdef USE_CUBLAS_XT
#ifndef AMBIENT_CONTAINER_NUMERIC_BINDINGS_CUBLAS_XT
#define AMBIENT_CONTAINER_NUMERIC_BINDINGS_CUBLAS_XT

#include <cuda_runtime.h>
#include "cublasXt.h"

namespace ambient { inline namespace numeric {

    class cublas_xt {
    private:
	cublas_xt(){
            int devices[1] = { 0 };
            if(cublasXtCreate(&handle) != CUBLAS_STATUS_SUCCESS) throw std::runtime_error("cublasXt initialization failed");
            if(cublasXtDeviceSelect(handle, 1, devices) != CUBLAS_STATUS_SUCCESS) throw std::runtime_error("cuBLASXt set devices failed");
	    std::cout << "ambient: using cublas_xt support\n\n";
	}
       ~cublas_xt(){
            cublasXtDestroy(handle);
	}
    public:
        static cublasOperation_t parse_op(const char* op){
            switch(*op){
                case 'N' : return CUBLAS_OP_N;
                case 'T' : return CUBLAS_OP_T;
                case 'C' : return CUBLAS_OP_C;
            }
            throw std::runtime_error("Unknown cublas op code");
        }
	static cublasXtHandle_t& get_handle(){
            return cublas_xt::weak_instance<void>::w.handle;
	}
        static ambient::mutex& get_mutex(){
            return cublas_xt::weak_instance<void>::w.mtx;
        }
    private:
        cublasXtHandle_t handle;
        ambient::mutex mtx;
    public:
	template<class T>
	struct weak_instance {
	    static cublas_xt w;
	};
    };

    template<class T>
    cublas_xt cublas_xt::weak_instance<T>::w;
} }

namespace ambient { inline namespace numeric { namespace cuda {

    template<class T>
    struct blas_xt;

    template<>
    struct blas_xt<double> {
        typedef double T;
        static void gemm(const char* transa, const char* transb, int m, int n, int k, const T* alfa, const T* ad, int lda, const T* bd, int ldb, const T* beta, T* cd, int ldc){
            cublasXtDgemm(cublas_xt::get_handle(), cublas_xt::parse_op(transa), cublas_xt::parse_op(transb), m, n, k, alfa, ad, lda, bd, ldb, beta, cd, ldc);
            cudaDeviceSynchronize();
        }
    };

    template<>
    struct blas_xt<std::complex<double> > {
        typedef std::complex<double> T;
        static void gemm(const char* transa, const char* transb, int m, int n, int k, const T* alfa, const T* ad, int lda, const T* bd, int ldb, const T* beta, T* cd, int ldc){
            cublasXtZgemm(cublas_xt::get_handle(), cublas_xt::parse_op(transa), cublas_xt::parse_op(transb), m, n, k, (const cuDoubleComplex*)alfa, (const cuDoubleComplex*)ad, lda, (const cuDoubleComplex*)bd, ldb, (const cuDoubleComplex*)beta, (cuDoubleComplex*)cd, ldc);
            cudaDeviceSynchronize();
        }
    };

} } }

#endif
#endif
