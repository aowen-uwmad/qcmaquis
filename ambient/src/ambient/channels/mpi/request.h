/*
 * Ambient, License - Version 1.0 - May 3rd, 2012
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#ifndef AMBIENT_CHANNELS_MPI_REQUEST
#define AMBIENT_CHANNELS_MPI_REQUEST

namespace ambient { namespace channels { namespace mpi {

    using ambient::models::ssm::revision;
    using ambient::models::ssm::transformable;

    class request_impl {
    public:
        void* operator new (size_t size){ return ambient::pool::malloc<bulk,request_impl>(); }
        void operator delete (void* ptr){ }
        request_impl(){}
        request_impl(void(*impl)(request_impl*), transformable& v, int target, int tag = NULL);
        request_impl(void(*impl)(request_impl*), revision& r, int target, int tag = NULL);
        inline bool operator()();
        void* data;
        int extent;
        int target;
        MPI_Request mpi_request;
        void(*impl)(request_impl*);
        bool once;
        int tag;
    };

    class request {
        typedef ambient::bulk_allocator<request_impl*> allocator;
    public:
        bool operator()();
        void operator &= (request_impl* r);
        void operator += (request_impl* r);
    private:
        std::vector<request_impl*,allocator> primaries;
        std::vector<request_impl*,allocator> callbacks;
    };

} } }

#endif
