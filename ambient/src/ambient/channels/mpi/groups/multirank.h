/*
 * Ambient, License - Version 1.0 - May 3rd, 2012
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#ifndef AMBIENT_CHANNELS_MPI_GROUPS_MULTIRANK
#define AMBIENT_CHANNELS_MPI_GROUPS_MULTIRANK

#include "ambient/utils/singleton.hpp"

namespace ambient { namespace channels { namespace mpi {

    class group;
    class multirank : public singleton< multirank >
    {
    public:
        multirank() : verbose(true) {}
        int operator()() const;
        int operator()(const group* grp) const;
        int translate(int rank, const group* source) const; // default: world
        int translate(int rank, const group* source, const group* target) const;
        int cast_to_parent(int rank, const group* source, const group* target) const;
        int cast_to_child(int rank, const group* source, const group* target) const;
        bool belongs(const group* target) const;
        bool masters(const group* target) const;
        int neighbor(); // can be also object
        int dedicated();
        void mute();
        bool verbose;
    };

    //    Context misc functions:
    //
    //    int  get_master(){ return ambient::rank.translate(grp->master, grp); }
    //    bool involved()  { return ambient::rank.belongs(grp);                }
    //    bool is_master() { return ambient::rank.masters(grp);                }
    //    int  get_rank()  { return grp->rank;                                 }
    //    int  get_size()  { return grp->size;                                 }
    //

} } }

namespace ambient {
    extern channels::mpi::multirank& rank;
}

#endif
