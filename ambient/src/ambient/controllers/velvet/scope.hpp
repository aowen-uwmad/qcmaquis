/*
 * Ambient, License - Version 1.0 - May 3rd, 2012
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#ifndef AMBIENT_INTERFACE_SCOPE
#define AMBIENT_INTERFACE_SCOPE

namespace ambient { 

    using ambient::controllers::velvet::controller;

    template<scope_t T>
    class scope {};

    template<>
    class scope<base> : public controller::scope {
    public:
        scope(){
            this->round = ambient::channel.wk_dim();
            this->state = ambient::rank() ? ambient::remote : ambient::local;
            this->sector = 0;
            this->scores.resize(round, 0);
        }
        virtual bool tunable() const { 
            return true;
        }
        virtual void score(int c, size_t v) const {
            this->scores[c] += v;
        }
        virtual void select(int c) const {
            this->stakeholders.push_back(c);
        }
        virtual void toss(){
            int max = 0;
            if(stakeholders.empty()){
                for(int i = 0; i < round; i++)
                if(scores[i] >= max){
                    max = scores[i];
                    this->sector = i;
                }
            }else{
                for(int i = 0; i < stakeholders.size(); i++){
                    int k = stakeholders[i];
                    if(scores[k] >= max){
                        max = scores[k];
                        this->sector = k;
                    }
                }
                stakeholders.clear();
            }
            std::fill(scores.begin(), scores.end(), 0);
            this->state = (this->sector == ambient::rank()) ? 
                          ambient::local : ambient::remote;
        }
        mutable std::vector<int> stakeholders;
        mutable std::vector<int> scores;
        int round;
    };

struct pairing {

    pairing() : active(false) {} 

    template<class M>
    pairing(const M& ruleset, int loop_max) : active(true), left(loop_max), right(loop_max), dedicated_b2(-1){
    
        int np = ambient::channel.wk_dim();
    
        std::vector<int> singular;
        std::vector<int> dedicated;
    
        std::vector<std::vector<int> > output;
        for(int b2 = 0; b2 < loop_max; b2++){
            output.push_back(std::vector<int>());
            for(int b1 = 0; b1 < loop_max; b1++){
                if(ruleset.has(b1,b2)) output.back().push_back(b1);
            }
        }
        for(int i = 0; i < output.size(); i++){
            if(output[i].empty()){
                singular.push_back(-1); 
                if(ambient::rank() == 0) printf("Error: b2 = %d was never matched\n", (int)i);
                continue;
            }
            if(output[i].size() > 1){
                if(!dedicated.empty() && ambient::rank() == 0) printf("Error: multiple tails\n");
                dedicated = output[i];
                dedicated_b2 = i;
            }
            singular.push_back(output[i][0]);
        }
    
        std::vector<int> common;
        for(int i = 0; i < singular.size(); i++){
            if(singular[i] == -1) continue;
            for(int ii = 0; ii < singular.size(); ii++){
                if(singular[i] == singular[ii] && i != ii){
                    bool exists = false;
                    for(int j = 0; j < common.size(); j++){
                       if(common[j] == singular[i]){
                           exists = true; break;
                       }
                    }
                    if(!exists) common.push_back(singular[i]);
                    break;
                }
            }
        }
    
        if(ambient::rank() == 0){ 
            printf("Common set: "); for(int i = 0; i < common.size(); i++) printf("%d ", (int)common[i]); printf("\n");
            printf("Dedicated set (%d): ", dedicated_b2); for(int i = 0; i < dedicated.size(); i++) printf("%d ", (int)dedicated[i]); printf("\n");
        }
    
        dp = std::floor((float)dedicated.size()*np/loop_max + 0.5);
        if(!dedicated.empty() && dp == 0) dp = 1;
        if(dp == np) dp = np - 1;
        int wp = np - dp;
    
        if(ambient::rank() == 0) printf("Dedicated proc number: %d\n", dp);
    
        // distributing left
        int factor;
        int id = 0;
        if(!dedicated.empty()){
            factor = dedicated.size() / dp;
            for(int p = 0; p < dp; p++){
                for(int d = id; d < id+factor; d++){ left[dedicated[d]] = p; }
                id += factor;
            }
            while(id < dedicated.size()){
                left[dedicated[id]] = id % dp;
                id++;
            }
        }
        factor = (singular.size()-dedicated.size()) / wp;
        id = 0;
        for(int p = dp; p < np; p++){
            for(int d = id; d < std::min(id+factor, (int)singular.size()); d++){
                bool exclude = false;
                for(int k = 0; k < dedicated.size(); k++){
                    if(d == dedicated[k]){
                        exclude = true;
                        break;
                    }
                }
                if(exclude){ id++; continue; }
                left[d] = p;
            }
            id += factor;
        }
        int p = dp;
        while(id < singular.size()){
            bool exclude = false;
            for(int k = 0; k < dedicated.size(); k++){
                if(id == dedicated[k]){
                    exclude = true;
                    break;
                }
            }
            if(exclude){ id++; continue; }
            left[id] = p;
            id++; p++;
        }
    
        // distributing right according to left
        std::vector<int> workload(np, 0);
        for(int i = 0; i < loop_max; i++){
           if(i == dedicated_b2){
               right[i] = left[dedicated[0]];
           }else{
               bool found = false;
               for(int k = 0; k < common.size(); k++) if(singular[i] == common[k]){ found = true; break; }
               if(found || singular[i] == -1) continue;
             
               right[i] = left[singular[i]];
               workload[right[i]]++;
           }
        }
    
        for(int i = 0; i < loop_max; i++){
           bool found = false;
           for(int k = 0; k < common.size(); k++) if(singular[i] == common[k]){ found = true; break; }
           if((found && i != dedicated_b2) || singular[i] == -1){
               int min = -1;
               int rank = -1;
               for(int p = dp; p < np; p++){
                   if(workload[p] < min || min == -1){ min = workload[p]; rank = p; }
               }
               if(rank == -1) printf("Error: couldn't find rank for right of common left\n");
               workload[rank]++;
               right[i] = rank;
           }
        }
    }

    int get_left(int b1) const {
        return left[b1];
    }

    int get_right(int b2) const {
        return right[b2];
    }

    int get_dedicated() const {
        return dp;
    }

    int get_dedicated_b2() const {
        return dedicated_b2;
    }

    int pair(int b1, int b2) const {
        if(left[b1] == right[b2] || b2 == dedicated_b2) return left[b1];  
        else return right[b2];  
    }

    int dp;
    std::vector<int> left;
    std::vector<int> right;
    int dedicated_b2;
    bool active;
};

    template<>
    class scope<single> : public controller::scope {
    public:
        static int compact_factor; 
        static pairing p; 
        static void compact(size_t n){ 
            if(n <= ambient::channel.wk_dim()) return; 
            compact_factor = (int)(n / ambient::channel.wk_dim()); // iterations before switch 
        } 
        scope(int value = 0) : index(value), iterator(value) {
            this->factor = compact_factor; compact_factor = 1;
            if(ambient::controller.context != ambient::controller.context_base) dry = true;
            else{ dry = false; ambient::controller.set_context(this); }
            this->round = ambient::channel.wk_dim();
            this->eval();
        }
        void eval(){
            if(iterator >= this->round*this->factor) this->sector = this->iterator % this->round;
            else                                     this->sector = this->iterator / this->factor;
            this->state = (this->sector == ambient::rank()) ? ambient::local : ambient::remote;
        }
        void shift(){
            this->iterator++;
            this->eval();
        }
        void shift_back(){ 
            this->iterator--;
            this->eval();
        } 
        scope& operator++ (){
            this->shift();
            this->index++;
            return *this;
        }
        scope& operator-- (){
            this->shift_back();
            this->index--;
            return *this;
        }
        operator size_t () const{
            return index;
        }
        bool operator < (size_t lim){
            return index < lim;
        }
       ~scope(){
            if(!dry) ambient::controller.pop_context();
        }
        virtual bool tunable() const {
            return false; 
        }
        friend std::ostream& operator<< (std::ostream& os, scope const& l){
            os << static_cast<size_t>(l);
            return os;
        }
        size_t index;
        bool dry;
        int iterator;
        int factor;
        int round;
    };

    template<>
    class scope<dedicated> : public controller::scope {
    public:
        scope(){
            ambient::controller.set_context(this);
            this->sector = ambient::rank.dedicated();
            this->state = (this->sector == ambient::rank()) ? ambient::local : ambient::remote;
        }
       ~scope(){
            ambient::controller.pop_context();
        }
        virtual bool tunable() const {
            return false; 
        }
    };

    template<>
    class scope<shared> : public controller::scope {
    public:
        scope(){
            ambient::controller.set_context(this);
            this->state = ambient::common;
        }
       ~scope(){
            ambient::controller.pop_context();
        }
        virtual bool tunable() const { 
            return false; 
        }
    };
}

#endif
