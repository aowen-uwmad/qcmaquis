/*
 * Ambient, License - Version 1.0 - May 3rd, 2012
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#define AMBIENT_RESERVE_LIMIT (size_t)AMBIENT_BULK_CHUNK*80

namespace ambient { namespace memory {

    using ambient::models::velvet::history;
    using ambient::models::velvet::revision;

    inline collector::collector(){
        this->rev.reserve(AMBIENT_COLLECTOR_REV_RESERVE);
        this->str.reserve(AMBIENT_COLLECTOR_STR_RESERVE);
        this->raw.reserve(AMBIENT_COLLECTOR_RAW_RESERVE);
        this->reserve_limit = AMBIENT_RESERVE_LIMIT;
    }

    inline void collector::push_back(void* o){
        this->raw.push_back(o);
    }

    inline void collector::push_back(revision* o){
        if(!o->valid()) o->spec.weaken();
        o->spec.crefs--;
        #ifdef AMBIENT_MEMORY_SQUEEZE
        if(!o->referenced()){
            if(o->valid() && !o->locked() && o->spec.region == ambient::rstandard){
                ambient::pool::free(o->data, o->spec); // artifacts or last one
                o->spec.region = ambient::rdelegated;
            }
            this->rev.push_back(o);
        }
        #endif
    }

    inline void collector::push_back(history* o){
        this->push_back(o->current);
        this->str.push_back(o);
        #ifdef AMBIENT_MEMORY_SQUEEZE
        // let's try to reuse based upon death-order
        if(this->reserve_limit > AMBIENT_IB_EXTENT)
        if(!o->current->referenced() && 
            o->clock == ambient::model.clock &&
            o->time() == 1 &&
           !o->content[1]->valid() && 
            o->content[1]->spec.region == ambient::rbulked &&
            o->content[1]->state != ambient::remote &&
            o->content[1]->spec.extent <= AMBIENT_IB_EXTENT
          ){
            o->content[1]->spec.reserve();
            this->reserve_limit -= o->content[1]->spec.extent;
           }
        #endif
    }

    inline void collector::delete_ptr::operator()( revision* r ) const {
        if(r->valid() && r->spec.region == ambient::rstandard){
            ambient::pool::free(r->data, r->spec); // artifacts
            r->spec = ambient::rdelegated;
        }
#ifdef AMBIENT_PERSISTENT_TRANSFERS
        using ambient::controllers::velvet::set;
        using ambient::controllers::velvet::get;
        if(r->transfer != NULL){
            if(r->state == ambient::local){
                delete ((set<revision,AMBIENT_MAX_NUM_PROCS+1>*)r->transfer)->states;
                ambient::pool::free<fixed,set<revision,AMBIENT_MAX_NUM_PROCS+1> >(r->transfer); 
            }else if(r->state == ambient::remote){
                ambient::pool::free<fixed,get<revision> >(r->transfer);
            }
        }
#endif
        delete r; 
    }

    inline void collector::delete_ptr::operator()( history* e ) const {
        delete e;
    }

    inline void collector::delete_ptr::operator()( void* e ) const {
        ambient::pool::free<fixed,AMBIENT_FUTURE_SIZE>(e);
    } 

    inline void collector::clear(){
        this->reserve_limit = AMBIENT_RESERVE_LIMIT;
        std::for_each( rev.begin(), rev.end(), delete_ptr());
        std::for_each( str.begin(), str.end(), delete_ptr());
        std::for_each( raw.begin(), raw.end(), delete_ptr());
        rev.clear();
        str.clear();
        raw.clear();
    }

} }
