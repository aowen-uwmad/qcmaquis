/*
*Very Large Integer Library, License - Version 1.0 - May 3rd, 2012
*
*Timothee Ewart - University of Geneva, 
*Andreas Hehn - Swiss Federal Institute of technology Zurich.
*
*Permission is hereby granted, free of charge, to any person or organization
*obtaining a copy of the software and accompanying documentation covered by
*this license (the "Software") to use, reproduce, display, distribute,
*execute, and transmit the Software, and to prepare derivative works of the
*Software, and to permit third-parties to whom the Software is furnished to
*do so, all subject to the following:
*
*The copyright notices in the Software and this entire statement, including
*the above license grant, this restriction and the following disclaimer,
*must be included in all copies of the Software, in whole or in part, and
*all derivative works of the Software, unless such copies or derivative
*works are solely in the form of machine-executable object code generated by
*a source language processor.
*
*THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
*IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
*FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
*SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
*FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
*ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
*DEALINGS IN THE SOFTWARE.
*/

#define BOOST_TEST_MODULE vli_gpu
#include <boost/test/unit_test.hpp>

#include "vli/vli_cpu.h"
#include "vli/vli_traits.hpp"

#include "use_gmp_integers.hpp"
#include "minimal_polynomial.hpp"

#include "vli/polynomial/vector_polynomial_cpu.hpp"
#include "vli/polynomial/polynomial.hpp"
#include "vli/polynomial/monomial.hpp"

#include "vli/detail/bit_masks.hpp"


BOOST_AUTO_TEST_CASE(AdditionGPU)
{

    vli::vli_cpu< unsigned long int, 6> a,b(1);
    vli::vli_cpu< unsigned long int, 6> c(0);
    vli::vli_cpu< unsigned long int, 6> d(0);
   
    a[0] = 0xFFFFFFFFFFFFFFFF; 
    a[1] = 0xFFFFFFFFFFFFFFFF; 
    a[2] = 0xFFFFFFFFFFFFFFFF; 
    a[3] = 0xFFFFFFFFFFFFFFFF; 
    a[4] = 0xFFFFFFFFFFFFFFFF; 
    a[5] = 0xFFFFFFFFFFFFFFFF; 

    c = vli::detail::addition_gpu(a,b);

    BOOST_CHECK_EQUAL(c,d);

    a[5] = 0x0; 

    c = vli::detail::addition_gpu(a,b);

    d[5] = 0x1; 

    BOOST_CHECK_EQUAL(c,d);
}

BOOST_AUTO_TEST_CASE(MultiplicationGPU)
{
    typedef vli::vli_cpu<unsigned long int,3> vli_in;
    typedef vli::vli_cpu<unsigned long int,6> vli_out;
    typedef mpz_class large_int;

    large_int x,y,z; 

    vli_in c,b;
    vli_out a(0);
    vli_out d(0);
    vli_out e(0);

    c[0] = 0xFFFFFFFFFFFFFFFF;
    c[1] = 0xFFFFFFFFFFFFFFFF;
    c[2] = 0x0FFFFFFFFFFFFFFF;

    b[0] = 0xFFFFFFFFFFFFFFFF;
    b[1] = 0xFFFFFFFFFFFFFFFF;
    b[2] = 0x0FFFFFFFFFFFFFFF;
    
    x = b.get_str();
    y = c.get_str();
    z = x * y; 
    vli::mul(e,b,c);
    d = vli::detail::multiplication_gpu(a,b,c);
   
    BOOST_CHECK_EQUAL(d.get_str(),e.get_str());
    BOOST_CHECK_EQUAL(z.get_str(),d.get_str());
}
