#include "vli/utils/macro.h"
// to check :  g++ -DNUM=1 -E -P -I /apps/eiger/boost_1_46_1/include/ -I ../.. vli_number_cpu_function_hooks.hpp | sed  "s/n/;\\`echo -e '\n\r'`/g"  
namespace vli{
    namespace detail{
                     //new functions type : VLI<n*64> *= long int;
                     #define FUNCTION_mul_nbits_64bits(z, n, unused) \
                         void NAME_MUL_NBITS_64BITS(n)(unsigned long int* x, unsigned long int const* y){           \
                         asm(                                                                                       \
                             "movq (%%rsi)          ,%%rax                  \n" /* a0 into rax */                   \
                             "xorq %%rcx            ,%%rcx                  \n" /* rcx to 0 */                      \
                             "cmpq %%rax            ,%%rcx                  \n" /* rax is negative ? */             \
                             "js   "NAME_CONDITIONAL_MUL_NBITS_64BITS(n)"   \n" /* if statements begins */          \
                             "negq %%rax                                    \n" /* negate the number */             \
                             "movq $0x1             ,%%rcx                  \n" /* keep trace for final sign */     \
                             " "NAME_CONDITIONAL_MUL_NBITS_64BITS(n)" :     \n" /* putain de : */                   \
                             "movq %%rax            ,%%rbx                  \n" /* keep a copy of rax/a0 rbx*/      \
                             "mulq "PPS(0,n)"(%%rdi)                        \n" /* lo rax, hi rdx   a0*b0 */        \
                             "movq %%rax            ,%%r8                   \n" /* only one term, write into r8 */  \
                             "movq %%rdx            ,%%r9                   \n" /* hia0b0 into r9 */                \
                             "movq %%rbx            ,%%rax                  \n" /* reload rax */                    \
                              BOOST_PP_REPEAT(n, MUL_register, ~)               /* mul algo */                      \
                             "imulq "PPS(BOOST_PP_ADD(n,1),1)"(%%rdi)       \n" /* a0 * b2, we skip the the hi */   \
                             "addq %%rax            ,"R(BOOST_PP_ADD(n,1))" \n" /* add hi + low */                  \
                             "cmpq $0               ,%%rcx                  \n" /* rcx = 1 we negate */             \
                             "je "NAME_RES_CONDITIONAL_MUL_NBITS_64BITS(n)" \n" /* not equal ZF = 0, negate*/       \
                              BOOST_PP_REPEAT(BOOST_PP_ADD(n,2), NOT_register, ~) /* if for final sign */           \
                             "addq $0x1             ,%%r8                   \n  " /* 2cm add 1 */                   \
                              BOOST_PP_REPEAT(BOOST_PP_ADD(n,1), ADC0_register, ~)/* propagate carry bit */         \
                             " "NAME_RES_CONDITIONAL_MUL_NBITS_64BITS(n)" : \n"   /* end final if */                \
                              BOOST_PP_REPEAT(BOOST_PP_ADD(n,2), SAVE_register, ~)                                  \
                              : : :"rax","rbx","rcx","rdx",BOOST_PP_REPEAT(BOOST_PP_ADD(n,2), CLOTHER_register, ~) "memory"   /* clother register*/      \
                             ); \
                         } \
 
                      BOOST_PP_REPEAT(7, FUNCTION_mul_nbits_64bits, ~) // 7 -> expand until 512 !

// no boost pp, I do not success to do it, remark the multiplication is done from bottom to the right top corner, different from the childhood method,
// to avoid carry bit pb propagation, the number //? indicates the on which line of the mulplication you are
// mul192_192
//                      a0 a1 a2
//                   X  b0 b1 b2
//                   -------------
//                      b2a0 b2a1 b2a2  //3
//                      b1a2 b1a1       //2
//                      b0a2            //1 
//         I do : b0a2, b1a1, b1a2, b2a2, b2a1, b2a0
                    

                      void mul128_128(unsigned long int* x, unsigned long int const * y){
                          asm( 
                              "movq 8(%%rsi)          ,%%rax    \n" //1
                              "mulq 0(%%rdi)                    \n"
                              "movq %%rax             ,%%r15    \n"
                              "movq 0(%%rsi)          ,%%rax    \n" //2
                              "movq %%rax             ,%%rbx    \n"
                              "mulq 0(%%rdi)                    \n"
                              "movq %%rax             ,%%r14    \n"
                              "addq %%rdx             ,%%r15    \n"        
                              "movq %%rbx             ,%%rax    \n"
                              "mulq 8(%%rdi)                    \n"
                              "addq %%rax             ,%%r15    \n"        
                              "movq %%r14             ,(%%rdi)  \n"
                              "movq %%r15             ,8(%%rdi) \n"
                             : : :"rax","rbx","rdx","r15","r14","memory" 
                         ); 
                      };
                     
                      void mul192_192(unsigned long int* x, unsigned long int const * y){
                          asm( 
                              "movq 16(%%rsi)         ,%%rax    \n" // 0 
                              "mulq 0(%%rdi)                    \n"
                              "movq %%rax             ,%%r15    \n" 
                              "movq 8(%%rsi)          ,%%rax    \n" // 1
                              "movq %%rax             ,%%rbx    \n"
                              "mulq 0(%%rdi)                    \n"
                              "movq %%rax             ,%%r14    \n"
                              "addq %%rdx             ,%%r15    \n"        
                              "movq %%rbx             ,%%rax    \n"
                              "mulq 8(%%rdi)                    \n"
                              "addq %%rax             ,%%r15    \n"        
                              "movq 0(%%rsi)          ,%%rax    \n" // 2
                              "movq %%rax             ,%%rbx    \n"
                              "mulq 0(%%rdi)                    \n"
                              "movq %%rax             ,%%r13    \n"
                              "addq %%rdx             ,%%r14    \n"        
                              "adcq $0x0              ,%%r15    \n"        
                              "movq %%rbx             ,%%rax    \n"
                              "mulq 8(%%rdi)                    \n"
                              "addq %%rax             ,%%r14    \n"        
                              "adcq %%rdx             ,%%r15    \n"        
                              "movq %%rbx             ,%%rax    \n"
                              "mulq 16(%%rdi)                   \n"
                              "addq %%rax             ,%%r15    \n"        
                              "movq %%r13             ,0(%%rdi) \n"
                              "movq %%r14             ,8(%%rdi) \n"
                              "movq %%r15             ,16(%%rdi)\n"
                             : : :"rax","rbx","rdx","r15","r14","r13","memory" 
                         ); 
                      };
                     
                      void mul256_256(unsigned long int* x, unsigned long int const * y){
                          asm( 
                              "movq 24(%%rsi)         ,%%rax    \n" // 0 
                              "mulq 0(%%rdi)                    \n"
                              "movq %%rax             ,%%r15    \n" 
                              "movq 16(%%rsi)         ,%%rax    \n" // 1
                              "movq %%rax             ,%%rbx    \n"
                              "mulq 0(%%rdi)                    \n"
                              "movq %%rax             ,%%r14    \n"
                              "addq %%rdx             ,%%r15    \n"        
                              "movq %%rbx             ,%%rax    \n"
                              "mulq 8(%%rdi)                    \n"
                              "addq %%rax             ,%%r15    \n"        
                              "movq 8(%%rsi)          ,%%rax    \n" // 2
                              "movq %%rax             ,%%rbx    \n"
                              "mulq 0(%%rdi)                    \n"
                              "movq %%rax             ,%%r13    \n"
                              "addq %%rdx             ,%%r14    \n"        
                              "adcq $0x0              ,%%r15    \n"        
                              "movq %%rbx             ,%%rax    \n"
                              "mulq 8(%%rdi)                    \n"
                              "addq %%rax             ,%%r14    \n"        
                              "adcq %%rdx             ,%%r15    \n"        
                              "movq %%rbx             ,%%rax    \n"
                              "mulq 16(%%rdi)                   \n"
                              "addq %%rax             ,%%r15    \n"        
                              "movq 0(%%rsi)          ,%%rax    \n" // 3
                              "movq %%rax             ,%%rbx    \n"
                              "mulq 0(%%rdi)                    \n"
                              "movq %%rax             ,%%r12    \n"
                              "addq %%rdx             ,%%r13    \n"        
                              "adcq $0x0              ,%%r14    \n"        
                              "adcq $0x0              ,%%r15    \n"        
                              "movq %%rbx             ,%%rax    \n"
                              "mulq 8(%%rdi)                    \n"
                              "addq %%rax             ,%%r13    \n"        
                              "adcq %%rdx             ,%%r14    \n"        
                              "adcq $0x0              ,%%r15    \n"        
                              "movq %%rbx             ,%%rax    \n"
                              "mulq 16(%%rdi)                   \n"
                              "addq %%rax             ,%%r14    \n"        
                              "adcq %%rdx             ,%%r15    \n"        
                              "movq %%rbx             ,%%rax    \n"
                              "mulq 24(%%rdi)                   \n"
                              "addq %%rax             ,%%r15    \n"        
                              "movq %%r12             ,0(%%rdi) \n"
                              "movq %%r13             ,8(%%rdi) \n"
                              "movq %%r14             ,16(%%rdi)\n"
                              "movq %%r15             ,24(%%rdi)\n"
                             : : :"rax","rbx","rdx","r15","r14","r13","r12","memory" 
                         ); 
                      };
                     
                      void mul320_320(unsigned long int* x, unsigned long int const * y){
                          asm( 
                              "movq 32(%%rsi)         ,%%rax    \n" // 0 
                              "mulq 0(%%rdi)                    \n"
                              "movq %%rax             ,%%r15    \n" 
                              "movq 24(%%rsi)         ,%%rax    \n" // 1
                              "movq %%rax             ,%%rbx    \n"
                              "mulq 0(%%rdi)                    \n"
                              "movq %%rax             ,%%r14    \n"
                              "addq %%rdx             ,%%r15    \n"        
                              "movq %%rbx             ,%%rax    \n"
                              "mulq 8(%%rdi)                    \n"
                              "addq %%rax             ,%%r15    \n"        
                              "movq 16(%%rsi)         ,%%rax    \n" // 2
                              "movq %%rax             ,%%rbx    \n"
                              "mulq 0(%%rdi)                    \n"
                              "movq %%rax             ,%%r13    \n"
                              "addq %%rdx             ,%%r14    \n"        
                              "adcq $0x0              ,%%r15    \n"        
                              "movq %%rbx             ,%%rax    \n"
                              "mulq 8(%%rdi)                    \n"
                              "addq %%rax             ,%%r14    \n"        
                              "adcq %%rdx             ,%%r15    \n"        
                              "movq %%rbx             ,%%rax    \n"
                              "mulq 16(%%rdi)                   \n"
                              "addq %%rax             ,%%r15    \n"        
                              "movq 8(%%rsi)          ,%%rax    \n" // 3
                              "movq %%rax             ,%%rbx    \n"
                              "mulq 0(%%rdi)                    \n"
                              "movq %%rax             ,%%r12    \n"
                              "addq %%rdx             ,%%r13    \n"        
                              "adcq $0x0              ,%%r14    \n"        
                              "adcq $0x0              ,%%r15    \n"        
                              "movq %%rbx             ,%%rax    \n"
                              "mulq 8(%%rdi)                    \n"
                              "addq %%rax             ,%%r13    \n"        
                              "adcq %%rdx             ,%%r14    \n"        
                              "adcq $0x0              ,%%r15    \n"        
                              "movq %%rbx             ,%%rax    \n"
                              "mulq 16(%%rdi)                   \n"
                              "addq %%rax             ,%%r14    \n"        
                              "adcq %%rdx             ,%%r15    \n"        
                              "movq %%rbx             ,%%rax    \n"
                              "mulq 24(%%rdi)                   \n"
                              "addq %%rax             ,%%r15    \n"        
                              "movq 0(%%rsi)          ,%%rax    \n" // 4
                              "movq %%rax             ,%%rbx    \n"
                              "mulq 0(%%rdi)                    \n"
                              "movq %%rax             ,%%r11    \n"
                              "addq %%rdx             ,%%r12    \n"        
                              "adcq $0x0              ,%%r13    \n"        
                              "adcq $0x0              ,%%r14    \n"        
                              "adcq $0x0              ,%%r15    \n"        
                              "movq %%rbx             ,%%rax    \n"
                              "mulq 8(%%rdi)                    \n"
                              "addq %%rax             ,%%r12    \n"        
                              "adcq %%rdx             ,%%r13    \n"        
                              "adcq $0x0              ,%%r14    \n"        
                              "adcq $0x0              ,%%r15    \n"        
                              "movq %%rbx             ,%%rax    \n"
                              "mulq 16(%%rdi)                   \n"
                              "addq %%rax             ,%%r13    \n"        
                              "adcq %%rdx             ,%%r14    \n"        
                              "adcq $0x0              ,%%r15    \n"        
                              "movq %%rbx             ,%%rax    \n"
                              "mulq 24(%%rdi)                   \n"
                              "addq %%rax             ,%%r14    \n"        
                              "adcq %%rdx             ,%%r15    \n"        
                              "movq %%rbx             ,%%rax    \n"
                              "mulq 32(%%rdi)                   \n"
                              "addq %%rax             ,%%r15    \n"        
                              "movq %%r11             ,0(%%rdi) \n"
                              "movq %%r12             ,8(%%rdi) \n"
                              "movq %%r13             ,16(%%rdi)\n"
                              "movq %%r14             ,24(%%rdi)\n"
                              "movq %%r15             ,32(%%rdi)\n"
                             : : :"rax","rbx","rdx","r15","r14","r13","r12","r11","memory" 
                         ); 
                      };
                     
                      void mul384_384(unsigned long int* x, unsigned long int const * y){
                          asm( 
                              "movq 40(%%rsi)         ,%%rax    \n" // 0 
                              "mulq 0(%%rdi)                    \n"
                              "movq %%rax             ,%%r15    \n" 
                              "movq 32(%%rsi)         ,%%rax    \n" // 1
                              "movq %%rax             ,%%rbx    \n"
                              "mulq 0(%%rdi)                    \n"
                              "movq %%rax             ,%%r14    \n"
                              "addq %%rdx             ,%%r15    \n"        
                              "movq %%rbx             ,%%rax    \n"
                              "mulq 8(%%rdi)                    \n"
                              "addq %%rax             ,%%r15    \n"        
                              "movq 24(%%rsi)         ,%%rax    \n" // 2
                              "movq %%rax             ,%%rbx    \n"
                              "mulq 0(%%rdi)                    \n"
                              "movq %%rax             ,%%r13    \n"
                              "addq %%rdx             ,%%r14    \n"        
                              "adcq $0x0              ,%%r15    \n"        
                              "movq %%rbx             ,%%rax    \n"
                              "mulq 8(%%rdi)                    \n"
                              "addq %%rax             ,%%r14    \n"        
                              "adcq %%rdx             ,%%r15    \n"        
                              "movq %%rbx             ,%%rax    \n"
                              "mulq 16(%%rdi)                   \n"
                              "addq %%rax             ,%%r15    \n"        
                              "movq 16(%%rsi)         ,%%rax    \n" // 3
                              "movq %%rax             ,%%rbx    \n"
                              "mulq 0(%%rdi)                    \n"
                              "movq %%rax             ,%%r12    \n"
                              "addq %%rdx             ,%%r13    \n"        
                              "adcq $0x0              ,%%r14    \n"        
                              "adcq $0x0              ,%%r15    \n"        
                              "movq %%rbx             ,%%rax    \n"
                              "mulq 8(%%rdi)                    \n"
                              "addq %%rax             ,%%r13    \n"        
                              "adcq %%rdx             ,%%r14    \n"        
                              "adcq $0x0              ,%%r15    \n"        
                              "movq %%rbx             ,%%rax    \n"
                              "mulq 16(%%rdi)                   \n"
                              "addq %%rax             ,%%r14    \n"        
                              "adcq %%rdx             ,%%r15    \n"        
                              "movq %%rbx             ,%%rax    \n"
                              "mulq 24(%%rdi)                   \n"
                              "addq %%rax             ,%%r15    \n"        
                              "movq 8(%%rsi)          ,%%rax    \n" // 4
                              "movq %%rax             ,%%rbx    \n"
                              "mulq 0(%%rdi)                    \n"
                              "movq %%rax             ,%%r11    \n"
                              "addq %%rdx             ,%%r12    \n"        
                              "adcq $0x0              ,%%r13    \n"        
                              "adcq $0x0              ,%%r14    \n"        
                              "adcq $0x0              ,%%r15    \n"        
                              "movq %%rbx             ,%%rax    \n"
                              "mulq 8(%%rdi)                    \n"
                              "addq %%rax             ,%%r12    \n"        
                              "adcq %%rdx             ,%%r13    \n"        
                              "adcq $0x0              ,%%r14    \n"        
                              "adcq $0x0              ,%%r15    \n"        
                              "movq %%rbx             ,%%rax    \n"
                              "mulq 16(%%rdi)                   \n"
                              "addq %%rax             ,%%r13    \n"        
                              "adcq %%rdx             ,%%r14    \n"        
                              "adcq $0x0              ,%%r15    \n"        
                              "movq %%rbx             ,%%rax    \n"
                              "mulq 24(%%rdi)                   \n"
                              "addq %%rax             ,%%r14    \n"        
                              "adcq %%rdx             ,%%r15    \n"        
                              "movq %%rbx             ,%%rax    \n"
                              "mulq 32(%%rdi)                   \n"
                              "addq %%rax             ,%%r15    \n"        
                              "movq 0(%%rsi)          ,%%rax    \n" // 5
                              "movq %%rax             ,%%rbx    \n"
                              "mulq 0(%%rdi)                    \n"
                              "movq %%rax             ,%%r10    \n"
                              "addq %%rdx             ,%%r11    \n"        
                              "adcq $0x0              ,%%r12    \n"        
                              "adcq $0x0              ,%%r13    \n"        
                              "adcq $0x0              ,%%r14    \n"        
                              "adcq $0x0              ,%%r15    \n"        
                              "movq %%rbx             ,%%rax    \n"
                              "mulq 8(%%rdi)                    \n"
                              "addq %%rax             ,%%r11    \n"        
                              "adcq %%rdx             ,%%r12    \n"        
                              "adcq $0x0              ,%%r13    \n"        
                              "adcq $0x0              ,%%r14    \n"        
                              "adcq $0x0              ,%%r15    \n"        
                              "movq %%rbx             ,%%rax    \n"
                              "mulq 16(%%rdi)                   \n"
                              "addq %%rax             ,%%r12    \n"        
                              "adcq %%rdx             ,%%r13    \n"        
                              "adcq $0x0              ,%%r14    \n"        
                              "adcq $0x0              ,%%r15    \n"        
                              "movq %%rbx             ,%%rax    \n"
                              "mulq 24(%%rdi)                   \n"
                              "addq %%rax             ,%%r13    \n"        
                              "adcq %%rdx             ,%%r14    \n"        
                              "adcq $0x0              ,%%r15    \n"        
                              "movq %%rbx             ,%%rax    \n"
                              "mulq 32(%%rdi)                   \n"
                              "addq %%rax             ,%%r14    \n"        
                              "adcq %%rdx             ,%%r15    \n"        
                              "mulq 40(%%rdi)                   \n"
                              "addq %%rax             ,%%r15    \n"        
                              "movq %%r10             ,0(%%rdi) \n"
                              "movq %%r11             ,8(%%rdi) \n"
                              "movq %%r12             ,16(%%rdi)\n"
                              "movq %%r13             ,24(%%rdi)\n"
                              "movq %%r14             ,32(%%rdi)\n"
                              "movq %%r15             ,40(%%rdi)\n"
                             : : :"rax","rbx","rdx","r15","r14","r13","r12","r11","r10","memory"
                        ); 
                      };
                     
                      void mul448_448(unsigned long int* x, unsigned long int const * y){
                          asm( 
                              "movq 48(%%rsi)         ,%%rax    \n" // 0 
                              "mulq 0(%%rdi)                    \n"
                              "movq %%rax             ,%%r15    \n" 
                              "movq 40(%%rsi)         ,%%rax    \n" // 1
                              "movq %%rax             ,%%rbx    \n"
                              "mulq 0(%%rdi)                    \n"
                              "movq %%rax             ,%%r14    \n"
                              "addq %%rdx             ,%%r15    \n"        
                              "movq %%rbx             ,%%rax    \n"
                              "mulq 8(%%rdi)                    \n"
                              "addq %%rax             ,%%r15    \n"        
                              "movq 32(%%rsi)         ,%%rax    \n" // 2
                              "movq %%rax             ,%%rbx    \n"
                              "mulq 0(%%rdi)                    \n"
                              "movq %%rax             ,%%r13    \n"
                              "addq %%rdx             ,%%r14    \n"        
                              "adcq $0x0              ,%%r15    \n"        
                              "movq %%rbx             ,%%rax    \n"
                              "mulq 8(%%rdi)                    \n"
                              "addq %%rax             ,%%r14    \n"        
                              "adcq %%rdx             ,%%r15    \n"        
                              "movq %%rbx             ,%%rax    \n"
                              "mulq 16(%%rdi)                   \n"
                              "addq %%rax             ,%%r15    \n"        
                              "movq 24(%%rsi)         ,%%rax    \n" // 3
                              "movq %%rax             ,%%rbx    \n"
                              "mulq 0(%%rdi)                    \n"
                              "movq %%rax             ,%%r12    \n"
                              "addq %%rdx             ,%%r13    \n"        
                              "adcq $0x0              ,%%r14    \n"        
                              "adcq $0x0              ,%%r15    \n"        
                              "movq %%rbx             ,%%rax    \n"
                              "mulq 8(%%rdi)                    \n"
                              "addq %%rax             ,%%r13    \n"        
                              "adcq %%rdx             ,%%r14    \n"        
                              "adcq $0x0              ,%%r15    \n"        
                              "movq %%rbx             ,%%rax    \n"
                              "mulq 16(%%rdi)                   \n"
                              "addq %%rax             ,%%r14    \n"        
                              "adcq %%rdx             ,%%r15    \n"        
                              "movq %%rbx             ,%%rax    \n"
                              "mulq 24(%%rdi)                   \n"
                              "addq %%rax             ,%%r15    \n"        
                              "movq 16(%%rsi)         ,%%rax    \n" // 4
                              "movq %%rax             ,%%rbx    \n"
                              "mulq 0(%%rdi)                    \n"
                              "movq %%rax             ,%%r11    \n"
                              "addq %%rdx             ,%%r12    \n"        
                              "adcq $0x0              ,%%r13    \n"        
                              "adcq $0x0              ,%%r14    \n"        
                              "adcq $0x0              ,%%r15    \n"        
                              "movq %%rbx             ,%%rax    \n"
                              "mulq 8(%%rdi)                    \n"
                              "addq %%rax             ,%%r12    \n"        
                              "adcq %%rdx             ,%%r13    \n"        
                              "adcq $0x0              ,%%r14    \n"        
                              "adcq $0x0              ,%%r15    \n"        
                              "movq %%rbx             ,%%rax    \n"
                              "mulq 16(%%rdi)                   \n"
                              "addq %%rax             ,%%r13    \n"        
                              "adcq %%rdx             ,%%r14    \n"        
                              "adcq $0x0              ,%%r15    \n"        
                              "movq %%rbx             ,%%rax    \n"
                              "mulq 24(%%rdi)                   \n"
                              "addq %%rax             ,%%r14    \n"        
                              "adcq %%rdx             ,%%r15    \n"        
                              "movq %%rbx             ,%%rax    \n"
                              "mulq 32(%%rdi)                   \n"
                              "addq %%rax             ,%%r15    \n"        
                              "movq 8(%%rsi)          ,%%rax    \n" // 5
                              "movq %%rax             ,%%rbx    \n"
                              "mulq 0(%%rdi)                    \n"
                              "movq %%rax             ,%%r10    \n"
                              "addq %%rdx             ,%%r11    \n"        
                              "adcq $0x0              ,%%r12    \n"        
                              "adcq $0x0              ,%%r13    \n"        
                              "adcq $0x0              ,%%r14    \n"        
                              "adcq $0x0              ,%%r15    \n"        
                              "movq %%rbx             ,%%rax    \n"
                              "mulq 8(%%rdi)                    \n"
                              "addq %%rax             ,%%r11    \n"        
                              "adcq %%rdx             ,%%r12    \n"        
                              "adcq $0x0              ,%%r13    \n"        
                              "adcq $0x0              ,%%r14    \n"        
                              "adcq $0x0              ,%%r15    \n"        
                              "movq %%rbx             ,%%rax    \n"
                              "mulq 16(%%rdi)                   \n"
                              "addq %%rax             ,%%r12    \n"        
                              "adcq %%rdx             ,%%r13    \n"        
                              "adcq $0x0              ,%%r14    \n"        
                              "adcq $0x0              ,%%r15    \n"        
                              "movq %%rbx             ,%%rax    \n"
                              "mulq 24(%%rdi)                   \n"
                              "addq %%rax             ,%%r13    \n"        
                              "adcq %%rdx             ,%%r14    \n"        
                              "adcq $0x0              ,%%r15    \n"        
                              "movq %%rbx             ,%%rax    \n"
                              "mulq 32(%%rdi)                   \n"
                              "addq %%rax             ,%%r14    \n"        
                              "adcq %%rdx             ,%%r15    \n"        
                              "mulq 40(%%rdi)                   \n"
                              "addq %%rax             ,%%r15    \n"        
                              "movq 0(%%rsi)          ,%%rax    \n" // 6
                              "movq %%rax             ,%%rbx    \n"
                              "mulq 0(%%rdi)                    \n"
                              "movq %%rax             ,%%r9     \n"
                              "addq %%rdx             ,%%r10    \n"        
                              "adcq $0x0              ,%%r11    \n"        
                              "adcq $0x0              ,%%r12    \n"        
                              "adcq $0x0              ,%%r13    \n"        
                              "adcq $0x0              ,%%r14    \n"        
                              "adcq $0x0              ,%%r15    \n"        
                              "movq %%rbx             ,%%rax    \n"
                              "mulq 8(%%rdi)                    \n"
                              "addq %%rax             ,%%r10    \n"        
                              "adcq %%rdx             ,%%r11    \n"        
                              "adcq $0x0              ,%%r12    \n"        
                              "adcq $0x0              ,%%r13    \n"        
                              "adcq $0x0              ,%%r14    \n"        
                              "adcq $0x0              ,%%r15    \n"        
                              "movq %%rbx             ,%%rax    \n"
                              "mulq 16(%%rdi)                   \n"
                              "addq %%rax             ,%%r11    \n"        
                              "adcq %%rdx             ,%%r12    \n"        
                              "adcq $0x0              ,%%r13    \n"        
                              "adcq $0x0              ,%%r14    \n"        
                              "adcq $0x0              ,%%r15    \n"        
                              "movq %%rbx             ,%%rax    \n"
                              "mulq 24(%%rdi)                   \n"
                              "addq %%rax             ,%%r12    \n"        
                              "adcq %%rdx             ,%%r13    \n"        
                              "adcq $0x0              ,%%r14    \n"        
                              "adcq $0x0              ,%%r15    \n"        
                              "movq %%rbx             ,%%rax    \n"
                              "mulq 32(%%rdi)                   \n"
                              "addq %%rax             ,%%r13    \n"        
                              "adcq %%rdx             ,%%r14    \n"        
                              "adcq $0x0              ,%%r15    \n"        
                              "movq %%rbx             ,%%rax    \n"
                              "mulq 40(%%rdi)                   \n"
                              "addq %%rax             ,%%r14    \n"        
                              "adcq %%rdx             ,%%r15    \n"        
                              "movq %%rbx             ,%%rax    \n"
                              "mulq 48(%%rdi)                   \n"
                              "addq %%rax             ,%%r15    \n"        
                              "movq %%r9              ,0(%%rdi) \n"
                              "movq %%r10             ,8(%%rdi) \n"
                              "movq %%r11             ,16(%%rdi)\n"
                              "movq %%r12             ,24(%%rdi)\n"
                              "movq %%r13             ,32(%%rdi)\n"
                              "movq %%r14             ,40(%%rdi)\n"
                              "movq %%r15             ,48(%%rdi)\n"
                             : : :"rax","rbx","rdx","r15","r14","r13","r12","r11","r10","r9","memory"
                        ); 
                      };
                     
                      void mul512_512(unsigned long int* x, unsigned long int const * y){
                          asm( 
                              "movq 56(%%rsi)         ,%%rax    \n" // 0 
                              "mulq 0(%%rdi)                    \n"
                              "movq %%rax             ,%%r15    \n" 
                              "movq 48(%%rsi)         ,%%rax    \n" // 1
                              "movq %%rax             ,%%rbx    \n"
                              "mulq 0(%%rdi)                    \n"
                              "movq %%rax             ,%%r14    \n"
                              "addq %%rdx             ,%%r15    \n"        
                              "movq %%rbx             ,%%rax    \n"
                              "mulq 8(%%rdi)                    \n"
                              "addq %%rax             ,%%r15    \n"        
                              "movq 40(%%rsi)         ,%%rax    \n" // 2
                              "movq %%rax             ,%%rbx    \n"
                              "mulq 0(%%rdi)                    \n"
                              "movq %%rax             ,%%r13    \n"
                              "addq %%rdx             ,%%r14    \n"        
                              "adcq $0x0              ,%%r15    \n"        
                              "movq %%rbx             ,%%rax    \n"
                              "mulq 8(%%rdi)                    \n"
                              "addq %%rax             ,%%r14    \n"        
                              "adcq %%rdx             ,%%r15    \n"        
                              "movq %%rbx             ,%%rax    \n"
                              "mulq 16(%%rdi)                   \n"
                              "addq %%rax             ,%%r15    \n"        
                              "movq 32(%%rsi)         ,%%rax    \n" // 3
                              "movq %%rax             ,%%rbx    \n"
                              "mulq 0(%%rdi)                    \n"
                              "movq %%rax             ,%%r12    \n"
                              "addq %%rdx             ,%%r13    \n"        
                              "adcq $0x0              ,%%r14    \n"        
                              "adcq $0x0              ,%%r15    \n"        
                              "movq %%rbx             ,%%rax    \n"
                              "mulq 8(%%rdi)                    \n"
                              "addq %%rax             ,%%r13    \n"        
                              "adcq %%rdx             ,%%r14    \n"        
                              "adcq $0x0              ,%%r15    \n"        
                              "movq %%rbx             ,%%rax    \n"
                              "mulq 16(%%rdi)                   \n"
                              "addq %%rax             ,%%r14    \n"        
                              "adcq %%rdx             ,%%r15    \n"        
                              "movq %%rbx             ,%%rax    \n"
                              "mulq 24(%%rdi)                   \n"
                              "addq %%rax             ,%%r15    \n"        
                              "movq 24(%%rsi)         ,%%rax    \n" // 4
                              "movq %%rax             ,%%rbx    \n"
                              "mulq 0(%%rdi)                    \n"
                              "movq %%rax             ,%%r11    \n"
                              "addq %%rdx             ,%%r12    \n"        
                              "adcq $0x0              ,%%r13    \n"        
                              "adcq $0x0              ,%%r14    \n"        
                              "adcq $0x0              ,%%r15    \n"        
                              "movq %%rbx             ,%%rax    \n"
                              "mulq 8(%%rdi)                    \n"
                              "addq %%rax             ,%%r12    \n"        
                              "adcq %%rdx             ,%%r13    \n"        
                              "adcq $0x0              ,%%r14    \n"        
                              "adcq $0x0              ,%%r15    \n"        
                              "movq %%rbx             ,%%rax    \n"
                              "mulq 16(%%rdi)                   \n"
                              "addq %%rax             ,%%r13    \n"        
                              "adcq %%rdx             ,%%r14    \n"        
                              "adcq $0x0              ,%%r15    \n"        
                              "movq %%rbx             ,%%rax    \n"
                              "mulq 24(%%rdi)                   \n"
                              "addq %%rax             ,%%r14    \n"        
                              "adcq %%rdx             ,%%r15    \n"        
                              "movq %%rbx             ,%%rax    \n"
                              "mulq 32(%%rdi)                   \n"
                              "addq %%rax             ,%%r15    \n"        
                              "movq 16(%%rsi)         ,%%rax    \n" // 5
                              "movq %%rax             ,%%rbx    \n"
                              "mulq 0(%%rdi)                    \n"
                              "movq %%rax             ,%%r10    \n"
                              "addq %%rdx             ,%%r11    \n"        
                              "adcq $0x0              ,%%r12    \n"        
                              "adcq $0x0              ,%%r13    \n"        
                              "adcq $0x0              ,%%r14    \n"        
                              "adcq $0x0              ,%%r15    \n"        
                              "movq %%rbx             ,%%rax    \n"
                              "mulq 8(%%rdi)                    \n"
                              "addq %%rax             ,%%r11    \n"        
                              "adcq %%rdx             ,%%r12    \n"        
                              "adcq $0x0              ,%%r13    \n"        
                              "adcq $0x0              ,%%r14    \n"        
                              "adcq $0x0              ,%%r15    \n"        
                              "movq %%rbx             ,%%rax    \n"
                              "mulq 16(%%rdi)                   \n"
                              "addq %%rax             ,%%r12    \n"        
                              "adcq %%rdx             ,%%r13    \n"        
                              "adcq $0x0              ,%%r14    \n"        
                              "adcq $0x0              ,%%r15    \n"        
                              "movq %%rbx             ,%%rax    \n"
                              "mulq 24(%%rdi)                   \n"
                              "addq %%rax             ,%%r13    \n"        
                              "adcq %%rdx             ,%%r14    \n"        
                              "adcq $0x0              ,%%r15    \n"        
                              "movq %%rbx             ,%%rax    \n"
                              "mulq 32(%%rdi)                   \n"
                              "addq %%rax             ,%%r14    \n"        
                              "adcq %%rdx             ,%%r15    \n"        
                              "mulq 40(%%rdi)                   \n"
                              "addq %%rax             ,%%r15    \n"        
                              "movq 8(%%rsi)          ,%%rax    \n" // 6
                              "movq %%rax             ,%%rbx    \n"
                              "mulq 0(%%rdi)                    \n"
                              "movq %%rax             ,%%r9     \n"
                              "addq %%rdx             ,%%r10    \n"        
                              "adcq $0x0              ,%%r11    \n"        
                              "adcq $0x0              ,%%r12    \n"        
                              "adcq $0x0              ,%%r13    \n"        
                              "adcq $0x0              ,%%r14    \n"        
                              "adcq $0x0              ,%%r15    \n"        
                              "movq %%rbx             ,%%rax    \n"
                              "mulq 8(%%rdi)                    \n"
                              "addq %%rax             ,%%r10    \n"        
                              "adcq %%rdx             ,%%r11    \n"        
                              "adcq $0x0              ,%%r12    \n"        
                              "adcq $0x0              ,%%r13    \n"        
                              "adcq $0x0              ,%%r14    \n"        
                              "adcq $0x0              ,%%r15    \n"        
                              "movq %%rbx             ,%%rax    \n"
                              "mulq 16(%%rdi)                   \n"
                              "addq %%rax             ,%%r11    \n"        
                              "adcq %%rdx             ,%%r12    \n"        
                              "adcq $0x0              ,%%r13    \n"        
                              "adcq $0x0              ,%%r14    \n"        
                              "adcq $0x0              ,%%r15    \n"        
                              "movq %%rbx             ,%%rax    \n"
                              "mulq 24(%%rdi)                   \n"
                              "addq %%rax             ,%%r12    \n"        
                              "adcq %%rdx             ,%%r13    \n"        
                              "adcq $0x0              ,%%r14    \n"        
                              "adcq $0x0              ,%%r15    \n"        
                              "movq %%rbx             ,%%rax    \n"
                              "mulq 32(%%rdi)                   \n"
                              "addq %%rax             ,%%r13    \n"        
                              "adcq %%rdx             ,%%r14    \n"        
                              "adcq $0x0              ,%%r15    \n"        
                              "movq %%rbx             ,%%rax    \n"
                              "mulq 40(%%rdi)                   \n"
                              "addq %%rax             ,%%r14    \n"        
                              "adcq %%rdx             ,%%r15    \n"        
                              "movq %%rbx             ,%%rax    \n"
                              "mulq 48(%%rdi)                   \n"
                              "addq %%rax             ,%%r15    \n"        
                              "movq 0(%%rsi)          ,%%rax    \n" // 7
                              "movq %%rax             ,%%rbx    \n"
                              "mulq 0(%%rdi)                    \n"
                              "movq %%rax             ,%%r8     \n"
                              "addq %%rdx             ,%%r9     \n"        
                              "adcq $0x0              ,%%r10    \n"        
                              "adcq $0x0              ,%%r11    \n"        
                              "adcq $0x0              ,%%r12    \n"        
                              "adcq $0x0              ,%%r13    \n"        
                              "adcq $0x0              ,%%r14    \n"        
                              "adcq $0x0              ,%%r15    \n"        
                              "movq %%rbx             ,%%rax    \n"
                              "mulq 8(%%rdi)                    \n"
                              "addq %%rax             ,%%r9     \n"        
                              "adcq %%rdx             ,%%r10    \n"        
                              "adcq $0x0              ,%%r11    \n"        
                              "adcq $0x0              ,%%r12    \n"        
                              "adcq $0x0              ,%%r13    \n"        
                              "adcq $0x0              ,%%r14    \n"        
                              "adcq $0x0              ,%%r15    \n"        
                              "movq %%rbx             ,%%rax    \n"
                              "mulq 16(%%rdi)                   \n"
                              "addq %%rax             ,%%r10    \n"        
                              "adcq %%rdx             ,%%r11    \n"        
                              "adcq $0x0              ,%%r12    \n"        
                              "adcq $0x0              ,%%r13    \n"        
                              "adcq $0x0              ,%%r14    \n"        
                              "adcq $0x0              ,%%r15    \n"        
                              "movq %%rbx             ,%%rax    \n"
                              "mulq 24(%%rdi)                   \n"
                              "addq %%rax             ,%%r11    \n"        
                              "adcq %%rdx             ,%%r12    \n"        
                              "adcq $0x0              ,%%r13    \n"        
                              "adcq $0x0              ,%%r14    \n"        
                              "adcq $0x0              ,%%r15    \n"        
                              "movq %%rbx             ,%%rax    \n"
                              "mulq 32(%%rdi)                   \n"
                              "addq %%rax             ,%%r12    \n"        
                              "adcq %%rdx             ,%%r13    \n"        
                              "adcq $0x0              ,%%r14    \n"        
                              "adcq $0x0              ,%%r15    \n"        
                              "movq %%rbx             ,%%rax    \n"
                              "mulq 40(%%rdi)                   \n"
                              "addq %%rax             ,%%r13    \n"        
                              "adcq %%rdx             ,%%r14    \n"        
                              "adcq $0x0              ,%%r15    \n"        
                              "movq %%rbx             ,%%rax    \n"
                              "mulq 48(%%rdi)                   \n"
                              "addq %%rax             ,%%r14    \n"        
                              "adcq %%rdx             ,%%r15    \n"        
                              "movq %%rbx             ,%%rax    \n"
                              "mulq 56(%%rdi)                   \n"
                              "addq %%rax             ,%%r15    \n"        
                              "movq %%r8              ,0(%%rdi) \n"
                              "movq %%r9              ,8(%%rdi) \n"
                              "movq %%r10             ,16(%%rdi)\n"
                              "movq %%r11             ,24(%%rdi)\n"
                              "movq %%r12             ,32(%%rdi)\n"
                              "movq %%r13             ,40(%%rdi)\n"
                              "movq %%r14             ,48(%%rdi)\n"
                              "movq %%r15             ,56(%%rdi)\n"
                             : : :"rax","rbx","rdx","r15","r14","r13","r12","r11","r10","r9","r8","memory"
                        ); 
                      };
                    } // end namespace detail
             } // end namespace vli
