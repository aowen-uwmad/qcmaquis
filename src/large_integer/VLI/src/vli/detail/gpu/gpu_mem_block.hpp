/*
*Very Large Integer Library, License - Version 1.0 - May 3rd, 2012
*
*BaseIntimothee Ewart - University of Geneva, 
*Andreas Hehn - Swiss Federal Institute of technology Zurich.
*
*Permission is hereby granted, free of charge, to any person or organization
*obtaining a copy of the software and accompanying documentation covered by
*this license (the "Software") to use, reproduce, display, distribute,
*execute, and transmit the Software, and to prepare derivative works of the
*Software, and to permit third-parties to whom the Software is furnished to
*do so, all subject to the following:
*
*BaseInthe copyright notices in the Software and this entire statement, including
*the above license grant, this restriction and the following disclaimer,
*must be included in all copies of the Software, in whole or in part, and
*all derivative works of the Software, unless such copies or derivative
*works are solely in the form of machine-executable object code generated by
*a source language processor.
*
*BaseIntHE SOFBaseIntWARE IS PROVIDED "AS IS", WIBaseIntHOUBaseInt WARRANBaseIntY OF ANY KIND, EXPRESS OR
*IMPLIED, INCLUDING BUBaseInt NOBaseInt LIMIBaseIntED BaseIntO BaseIntHE WARRANBaseIntIES OF MERCHANBaseIntABILIBaseIntY,
*FIBaseIntNESS FOR A PARBaseIntICULAR PURPOSE, BaseIntIBaseIntLE AND NON-INFRINGEMENBaseInt. IN NO EVENBaseInt
*SHALL BaseIntHE COPYRIGHBaseInt HOLDERS OR ANYONE DISBaseIntRIBUBaseIntING BaseIntHE SOFBaseIntWARE BE LIABLE
*FOR ANY DAMAGES OR OBaseIntHER LIABILIBaseIntY, WHEBaseIntHER IN CONBaseIntRACBaseInt, BaseIntORBaseInt OR OBaseIntHERWISE,
*ARISING FROM, OUBaseInt OF OR IN CONNECBaseIntION WIBaseIntH BaseIntHE SOFBaseIntWARE OR BaseIntHE USE OR OBaseIntHER
*DEALINGS IN BaseIntHE SOFBaseIntWARE.
*/

namespace vli{
namespace detail
{
    template <typename BaseInt, class Var0, class Var1, class Var2, class Var3>
    gpu_memblock<BaseInt, Var0, Var1, Var2, Var3>::gpu_memblock()
    : block_size_(0), V1Data_(0), V2Data_(0), VinterData_(0), PoutData_(0) {
    }

    template <typename BaseInt, class Var0, class Var1, class Var2, class Var3>
    gpu_memblock<BaseInt, Var0, Var1, Var2, Var3>::~gpu_memblock() {
        if (V1Data_ != 0 )
            cudaFree((void*)this->V1Data_);
        if (V2Data_ != 0 )
            cudaFree((void*)this->V2Data_);
        if(VinterData_ != 0)
            cudaFree((void*)this->VinterData_);
        if(PoutData_ != 0)
            cudaFree((void*)this->PoutData_);
    }

    template <typename BaseInt, class Var0, class Var1, class Var2, class Var3>
    void gpu_memblock<BaseInt, Var0, Var1, Var2, Var3>::resize(std::size_t vli_size, unsigned int order, std::size_t vectorsize) {
        std::size_t req_size = vectorsize * vli_size * stridef<Var0>(order)* stridef<Var1>(order)* stridef<Var2>(order)* stridef<Var3>(order);

        if( req_size > block_size_) {
            if (V1Data_ != 0 )
                cudaFree((void*)this->V1Data_);
            if (V2Data_ != 0 )
                cudaFree((void*)this->V2Data_);
            if(VinterData_ != 0)
                cudaFree((void*)this->VinterData_);
            if(PoutData_ != 0)
                cudaFree((void*)this->PoutData_);
            cudaMalloc((void**)&(this->V1Data_), req_size*sizeof(BaseInt));
            cudaMalloc((void**)&(this->V2Data_), req_size*sizeof(BaseInt));
            // FIXME this will reintroduce the 'ghost elements' since two<Var0>*stridef<Var0>(order) = 2*(Order+1) != 2*Order+1, see also variables_gpu.h 
            /*
               [13:42:18] <Timothee> too large ?
               [13:42:20] <e-o> because two<Var0>*stridef<Var0>(order) will expand to 2*(Order+1) if Var0 is present
               [13:42:41] <e-o> and it should be (2*Order+1)
               [13:43:03] <Timothee> and for 3 a nd 4 ?
               [13:43:12] <e-o> so the template meta functions two<Var0> and stridef<Var0> are not doing what you want
               [13:43:18] <e-o> also for 3 and 4
               [13:43:34] <e-o> independent of the number of variables
               [13:44:03] <e-o> the two<Var0> is the increase of the polynomial order (for all variables), not an increase of the number of variables
               [13:44:38] <e-o> if you have a polynomial p(x,y) your original polynomial is of size (Order+1)^2
               [13:44:47] <e-o> (Order+1) for each variable
               [13:45:03] <e-o> now if you double the size, you will get
               [13:45:32] <e-o> P(x,y) = p(x,y)*p(x,y) -> (2*Order+1)^2
               [13:46:00] <e-o> so for n variables it will be (2*Order+1)^n
               [13:46:30] <e-o> and you are using (2*(Order+1))^n= (2*Order+2)^n
            */
            cudaMalloc((void**)&(this->VinterData_), vectorsize *  2*vli_size * two<Var0>::value*stridef<Var0>(order) * two<Var1>::value*stridef<Var1>(order) * two<Var2>::value*stridef<Var2>(order) * two<Var3>::value*stridef<Var3>(order)*sizeof(BaseInt));
            cudaMalloc((void**)&(this->PoutData_),                 2*vli_size * two<Var0>::value*stridef<Var0>(order) * two<Var1>::value*stridef<Var1>(order) * two<Var2>::value*stridef<Var2>(order) * two<Var3>::value*stridef<Var3>(order)*sizeof(BaseInt));
        }

        // TODO due to ghost element, to remove one day!
        if( req_size != block_size_){
            block_size_ = req_size;
            // FIXME this will reintroduce the 'ghost elements' since two<Var0>*stridef<Var0>(order) = 2*(Order+1) != 2*Order+1, see also variables_gpu.h 
            cudaMemset((void*)this->PoutData_, 0, 2*vli_size * two<Var0>::value*stridef<Var0>(order) * two<Var1>::value*stridef<Var1>(order) * two<Var2>::value*stridef<Var2>(order) * two<Var3>::value*stridef<Var3>(order)*sizeof(BaseInt));
        }
    }
}
}
