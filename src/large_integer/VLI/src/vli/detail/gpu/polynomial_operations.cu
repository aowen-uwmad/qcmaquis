/*
*Very Large Integer Library, License - Version 1.0 - May 3rd, 2012
*
*Timothee Ewart - University of Geneva, 
*Andreas Hehn - Swiss Federal Institute of technology Zurich.
*Maxim Milakov -  NVIDIA 
*
*Permission is hereby granted, free of charge, to any person or organization
*obtaining a copy of the software and accompanying documentation covered by
*this license (the "Software") to use, reproduce, display, distribute,
*execute, and transmit the Software, and to prepare derivative works of the
*Software, and to permit third-parties to whom the Software is furnished to
*do so, all subject to the following:
*
*The copyright notices in the Software and this entire statement, including
*the above license grant, this restriction and the following disclaimer,
*must be included in all copies of the Software, in whole or in part, and
*all derivative works of the Software, unless such copies or derivative
*works are solely in the form of machine-executable object code generated by
*a source language processor.
*
*THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
*IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
*FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
*SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
*FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
*ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
*DEALINGS IN THE SOFTWARE.
*/

#include <vector>
#include <algorithm>
#include <iostream>
#include <boost/cstdint.hpp> 
#include <limits>
#include "vli/utils/gpu_error_message.h"
#include "vli/detail/kernels_gpu.h" // signature interface with cpu + structure max_order_each, max_order_combined
#include "vli/detail/gpu/utils/variables_gpu.h" //compile time  variable
#include "vli/detail/gpu/tasklist/tasklist.h" //tasklist
#include "vli/detail/gpu/utils/gpu_mem_block.h" // memory
#include "vli/detail/gpu/kernels/kernels_gpu_neg_asm.hpp" //kernels gpu boost pp
#include "vli/detail/gpu/kernels/kernels_gpu_add_asm.hpp" //kernels gpu boost pp
#include "vli/detail/gpu/kernels/kernels_gpu_mul_asm.hpp" //kernels gpu boost pp
#include "vli/detail/gpu/vli_number_gpu_function_hooks.hpp" // wrapper
#include "vli/detail/gpu/polynomial_multiplication/booster_polynomial_multiplication_max_order_each.hpp" // booster
#include "vli/detail/gpu/polynomial_multiplication/booster_polynomial_multiplication_max_order_combined.hpp" // booster
#include "vli/detail/gpu/polynomial_reduction/polynomial_reduction.hpp" // final reduction

namespace vli {
    namespace detail {

    template <std::size_t NumBits, class MaxOrder, int NumVars>
    __global__ void
    __launch_bounds__(mul_block_size<MaxOrder, NumVars,2>::value , 2)
    polynomial_mul_full_kepler( // TO DO change the name
    	const boost::uint32_t * __restrict__ in1,
    	const boost::uint32_t * __restrict__ in2,
        const boost::uint32_t element_count,
        boost::uint32_t* __restrict__ out,
        boost::uint32_t* __restrict__ workblock_count_by_warp,
        single_coefficient_task* __restrict__ execution_plan)
    {
        booster<NumBits, MaxOrder, NumVars>::polynomial_multiplication_max_order(in1, in2, element_count, out, workblock_count_by_warp, execution_plan); // TO DO change the name
    }

    template <std::size_t NumBits, class MaxOrder, int NumVars>
    void gpu_inner_product_vector(std::size_t VectorSize, boost::uint32_t const* A, boost::uint32_t const* B) {
            // TO DO CHANGE THE SINGLE BY BOOST SINGLETON
	    gpu_memblock* pgm = gpu_memblock::Instance(); // allocate memory for vector input, intermediate and output, singleton only one time, whatever the type of polynomial, could we change the pattern by a ref ? 

            resize_helper<NumBits, MaxOrder, NumVars>::resize(pgm, VectorSize);
            
  	    tasklist_keep_order<NumBits, MaxOrder, NumVars>* ghc = tasklist_keep_order<NumBits, MaxOrder, NumVars>::Instance(); // calculate the different packet, singleton only one time 

            memory_transfer_helper<NumBits, MaxOrder, NumVars>::transfer_up(pgm, A, B, VectorSize); //transfer data poly to gpu
	    {
                dim3 grid(VectorSize) ;
                dim3 threads(mul_block_size<MaxOrder, NumVars,2>::value);
                polynomial_mul_full_kepler<NumBits, MaxOrder, NumVars><<<grid,threads>>>(pgm->V1Data_, pgm->V2Data_,VectorSize, pgm->VinterData_,ghc->workblock_count_by_warp_,ghc->execution_plan_);
	    }

	    {
                dim3 grid(num_coefficients<MaxOrder, NumVars,2>::value);
                dim3 threads(SumBlockSize::value);
                polynomial_sum_intermediate_full<NumBits, MaxOrder::value, NumVars><<<grid,threads>>>(pgm->VinterData_, VectorSize, pgm->PoutData_); //the reduction is independent of the order specification
	    }
    } 

    boost::uint32_t* gpu_get_polynomial(){
	    gpu_memblock* gm = gpu_memblock::Instance(); // I just get the mem pointer
	    return gm->PoutData_;
    }

#define VLI_IMPLEMENT_GPU_FUNCTIONS(NUM_BITS, POLY_ORDER, VAR) \
    template<std::size_t NumBits, class MaxOrder, int NumVars > \
    void gpu_inner_product_vector(std::size_t vector_size, boost::uint64_t const* A, boost::uint64_t const* B); \
    \
    template<> \
    void gpu_inner_product_vector<NUM_BITS, max_order_each<POLY_ORDER>, VAR >(std::size_t vector_size, boost::uint64_t const* A, boost::uint64_t const* B){ \
        gpu_inner_product_vector<NUM_BITS, max_order_each<POLY_ORDER>, VAR >(vector_size, const_cast<boost::uint32_t*>(reinterpret_cast<boost::uint32_t const*>(A)), const_cast<boost::uint32_t*>(reinterpret_cast<boost::uint32_t const*>(B))); \
    } \
    \
    template<> \
    void gpu_inner_product_vector<NUM_BITS, max_order_combined<POLY_ORDER>, VAR >(std::size_t vector_size, boost::uint64_t const* A, boost::uint64_t const* B){ \
        gpu_inner_product_vector<NUM_BITS, max_order_combined<POLY_ORDER>, VAR >(vector_size, const_cast<boost::uint32_t*>(reinterpret_cast<boost::uint32_t const*>(A)), const_cast<boost::uint32_t*>(reinterpret_cast<boost::uint32_t const*>(B))); \
    } \

#define VLI_IMPLEMENT_GPU_FUNCTIONS_FOR(r, data, NUMBITS_ORDER_VAR_TUPLE_SEQ) \
    VLI_IMPLEMENT_GPU_FUNCTIONS( BOOST_PP_TUPLE_ELEM(3,0,NUMBITS_ORDER_VAR_TUPLE_SEQ), BOOST_PP_TUPLE_ELEM(3,1,NUMBITS_ORDER_VAR_TUPLE_SEQ), BOOST_PP_TUPLE_ELEM(3,2,NUMBITS_ORDER_VAR_TUPLE_SEQ) )

    BOOST_PP_SEQ_FOR_EACH(VLI_IMPLEMENT_GPU_FUNCTIONS_FOR, _, VLI_COMPILE_NUMBITS_ORDER_VAR_TUPLE_SEQ)

#undef VLI_IMPLEMENT_GPU_FUNCTIONS_FOR
#undef VLI_IMPLEMENT_GPU_FUNCTIONS

    }
}
