/*
*Very Large Integer Library, License - Version 1.0 - May 3rd, 2012
*
*Timothee Ewart - University of Geneva, 
*Andreas Hehn - Swiss Federal Institute of technology Zurich.
*
*Permission is hereby granted, free of charge, to any person or organization
*obtaining a copy of the software and accompanying documentation covered by
*this license (the "Software") to use, reproduce, display, distribute,
*execute, and transmit the Software, and to prepare derivative works of the
*Software, and to permit third-parties to whom the Software is furnished to
*do so, all subject to the following:
*
*The copyright notices in the Software and this entire statement, including
*the above license grant, this restriction and the following disclaimer,
*must be included in all copies of the Software, in whole or in part, and
*all derivative works of the Software, unless such copies or derivative
*works are solely in the form of machine-executable object code generated by
*a source language processor.
*
*THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
*IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
*FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
*SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
*FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
*ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
*DEALINGS IN THE SOFTWARE.
*/

 #ifndef VLI_VARIABLES_GPU_H
 #define VLI_VARIABLES_GPU_H

namespace vli {
    template <char X>
    class var;
   
    class no_variable; 

    namespace detail {

    template <class Var0, class Var1, class Var2, class Var3>
    struct num_of_variables_helper {
        static unsigned int const value = 4;
    };  
        
    template <class Var0, class Var1, class Var2>
    struct num_of_variables_helper<Var0, Var1, Var2, no_variable> {
        static unsigned int const value = 3;
    };  

    template <class Var0, class Var1>
    struct num_of_variables_helper<Var0, Var1, no_variable, no_variable> {
        static unsigned int const value = 2;
    };  

    template <class Var0>
    struct num_of_variables_helper<Var0, no_variable, no_variable, no_variable> {
        static unsigned int const value = 1;
    };  

    template <class Variable, unsigned int Order>
    struct extend_stride {
        static unsigned int const value = 2*Order+1;
    };  
        
    template <unsigned int Order>
    struct extend_stride<no_variable,Order> {
        static unsigned int const value = 1;
    };  

    template <class Variable, unsigned int Order>
    struct stride {
        static unsigned int const value = Order+1;
    };  
        
    template <unsigned int Order>
    struct stride<no_variable,Order> {
        static unsigned int const value = 1;
    };  
   
    template <class Variable, unsigned int Order>
    struct stride_pad {
        static unsigned int const value = Order+1;
    };  
        
    template <unsigned int Order>
    struct stride_pad<no_variable,Order> {
        static unsigned int const value = 0;
    };  

    struct SumBlockSize {
       enum { value = 256};
    };

    template<unsigned int Order, class Var0, class Var1, class Var2, class Var3>
    struct MulBlockSize{
        enum {value = ((extend_stride<Var0,Order>::value*extend_stride<Var1,Order>::value*extend_stride<Var2,Order>::value*extend_stride<Var3,Order>::value)/2U >= 256U) ? 
                       256U :
                       (((extend_stride<Var0,Order>::value*extend_stride<Var1,Order>::value*extend_stride<Var2,Order>::value*extend_stride<Var3,Order>::value))/2U+32U-1U)/32U*32U };
    };

    template<unsigned int Order, class Var0, class Var1, class Var2>
    struct MulBlockSize<Order, Var0, Var1, Var2, vli::no_variable>{
        enum {value = ((extend_stride<Var0,Order>::value*extend_stride<Var1,Order>::value*extend_stride<Var2,Order>::value)/2U >= 256U) ? 
                       256U :
                       (((extend_stride<Var0,Order>::value*extend_stride<Var1,Order>::value*extend_stride<Var2,Order>::value))/2U+32U-1U)/32U*32U };
    };


    template<unsigned int Order, class Var0, class Var1>
    struct MulBlockSize<Order, Var0, Var1, vli::no_variable, vli::no_variable>{
        enum {value = ((extend_stride<Var0,Order>::value*extend_stride<Var1,Order>::value)/2U >= 256U) ? 
                       256U :
                       (((extend_stride<Var0,Order>::value*extend_stride<Var1,Order>::value))/2U+32U-1U)/32U*32U };
    };

    template<unsigned int Order, class Var0>
    struct MulBlockSize<Order, Var0, vli::no_variable, vli::no_variable, vli::no_variable>{
        enum {value = ((extend_stride<Var0,Order>::value)/2U >= 256U) ? 
                      256U :
                      (((extend_stride<Var0,Order>::value))/2U+32U-1U)/32U*32U}; 
    };

    template<unsigned int Order, class Var0, class Var1, class Var2, class Var3>
    struct MaxIterationCount{
        enum {value = (extend_stride<Var0,Order>::value*extend_stride<Var1,Order>::value*extend_stride<Var2,Order>::value*extend_stride<Var3,Order>::value+32U-1U)/32U};
    };

    template<std::size_t Size>
    struct size_pad{
        enum {value = (((Size>>1)<<1)+1)};
    };


    namespace max_order_combined_helpers {

        template<unsigned int NK, unsigned int K>
        struct size_helper {
            static unsigned int const value = NK*size_helper<NK-1,K>::value;
        };

        template <unsigned int K>
        struct size_helper<K,K> {
            static unsigned int const value = 1;
        };

        template <unsigned int N>
        struct factorial {
            static unsigned int const value = N*factorial<N-1>::value;
        };

        template <>
        struct factorial<0> {
            static unsigned int const value = 1;
        };

        template <unsigned int N, unsigned int K>
        struct size {
            // N variables, max order K -> n+k-1 over k  = (n+k-1)! / ( (n-1)! k! ) combinations
            // Assuming N > 0
            static unsigned int const value = size_helper<N+K-1,K>::value/factorial<N-1>::value;
        };

    }


    }
}

#endif
