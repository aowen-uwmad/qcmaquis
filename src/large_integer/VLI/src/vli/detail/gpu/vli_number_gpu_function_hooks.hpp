/*
*Very Large Integer Library, License - Version 1.0 - May 3rd, 2012
*
*Timothee Ewart - University of Geneva, 
*Andreas Hehn - Swiss Federal Institute of technology Zurich.
*
*Permission is hereby granted, free of charge, to any person or organization
*obtaining a copy of the software and accompanying documentation covered by
*this license (the "Software") to use, reproduce, display, distribute,
*execute, and transmit the Software, and to prepare derivative works of the
*Software, and to permit third-parties to whom the Software is furnished to
*do so, all subject to the following:
*
*The copyright notices in the Software and this entire statement, including
*the above license grant, this restriction and the following disclaimer,
*must be included in all copies of the Software, in whole or in part, and
*all derivative works of the Software, unless such copies or derivative
*works are solely in the form of machine-executable object code generated by
*a source language processor.
*
*THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
*IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
*FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
*SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
*FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
*ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
*DEALINGS IN THE SOFTWARE.
*/

#ifndef VLI_NUMBER_GPU_FUNCTION_HOOKS_HPP
#define VLI_NUMBER_GPU_FUNCTION_HOOKS_HPP
#include "vli/detail/gpu/kernels/kernel_macros.h"
namespace vli {
    namespace detail {

    //declaration wrapper
    template<typename BaseInt, std::size_t Size>
    __device__ void add(BaseInt * x, BaseInt const* y); 

    //multiplication
    template<typename BaseInt, std::size_t Size>
    __device__ void mul(BaseInt * x,BaseInt const* y,BaseInt const* z);

    template <typename BaseInt, std::size_t Size>
    __device__ void neg(BaseInt* x); 

    //????_assign functions
    template <class BaseInt, std::size_t Size>
    void multiplies(BaseInt* res, BaseInt* res1, BaseInt* c1, BaseInt* c2){
        //if one day I success to remove branching ....
	unsigned int sign = (c1[Size-1]>>31) ^ (c2[Size-1]>>31);

	if(c1[Size-1] >> 31 != 0) // 31 because uint , 63 a day if ulint
             neg<BaseInt, Size>(c1);

	if(c2[Size-1] >> 31 != 0)
             neg<BaseInt, Size>(c2);

        mul<BaseInt, 2*Size>(res1,c1,c2);

	if(sign != 0)
             neg<BaseInt, 2*Size>(res1);

        add<BaseInt, 2*Size>(res,res1);
    }
    
    /* ---------------------------------------------------- Begin Addition specialization ---------------------------------------------------- */

    //specialization addnbits_nbits, until 512 bits

    #define FUNCTION_add_nbits_nbits(z, n, unused) \
        template<> \
        void add<unsigned int,BOOST_PP_ADD(BOOST_PP_MUL(n,4),8)>(unsigned int* x,unsigned int const* y){ \
        NAME_ADD_NBITS_PLUS_NBITS(BOOST_PP_MUL(2,BOOST_PP_ADD(n,1)))(x,y); \
        }; \

    BOOST_PP_REPEAT(3, FUNCTION_add_nbits_nbits, ~)
    #undef FUNCTION_add_nbits_nbits

    /* ---------------------------------------------------- Begin Multiplication specialization ---------------------------------------------------- */
    //specialization mul    

    //specialization mul2nbits_nbits_nbits, until 512 bits
    #define FUNCTION_mul_twonbits_nbits_nbits(z, n, unused) \
        template<> \
        void mul<unsigned int,BOOST_PP_ADD(BOOST_PP_MUL(n,4),8)>(unsigned int* x,unsigned int const* y, unsigned int const* w){ \
        NAME_MUL_TWONBITS_NBITS_NBITS(BOOST_PP_ADD(n,1))(x,y,w); \
        }; \

    BOOST_PP_REPEAT(3, FUNCTION_mul_twonbits_nbits_nbits, ~)
    #undef FUNCTION_mul_twonbits_nbits_nbits
    
    /* ---------------------------------------------------- Begin Negation specialization ---------------------------------------------------- */
    //specialization neg 128 to 512 step of 64 (useless kernels are also generated)

    #define FUNCTION_negate_nbits(z, n, unused) \
        template<> \
            void neg<unsigned int, BOOST_PP_ADD(4,BOOST_PP_MUL(2,n))>(unsigned int* x){ \
            NAME_NEGATE_NBITS(n)(x); \
        }; \

    BOOST_PP_REPEAT(7, FUNCTION_negate_nbits, ~)
    #undef FUNCTION_negate_nbits

    } //namespace detail
} //namespace vli

#endif //VLI_NUMBER_CPU_FUNCTION_HOOKS_HPP
