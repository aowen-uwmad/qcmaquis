/*
*Very Large Integer Library, License - Version 1.0 - May 3rd, 2012
*
*Timothee Ewart - University of Geneva, 
*Andreas Hehn - Swiss Federal Institute of technology Zurich 
*
*Permission is hereby granted, free of charge, to any person or organization
*obtaining a copy of the software and accompanying documentation covered by
*this license (the "Software") to use, reproduce, display, distribute,
*execute, and transmit the Software, and to prepare derivative works of the
*Software, and to permit third-parties to whom the Software is furnished to
*do so, all subject to the following:
*
*The copyright notices in the Software and this entire statement, including
*the above license grant, this restriction and the following disclaimer,
*must be included in all copies of the Software, in whole or in part, and
*all derivative works of the Software, unless such copies or derivative
*works are solely in the form of machine-executable object code generated by
*a source language processor.
*
*THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
*IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
*FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
*SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
*FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
*ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
*DEALINGS IN THE SOFTWARE.
*/

namespace vli {
    namespace detail {

                 template <typename BaseInt, std::size_t Size, unsigned int Order>
                 void diag_algo(unsigned int threadid, BaseInt const* a, BaseInt const* b, BaseInt *c)
                 {
                     int qa,ra,qb,rb,pos; // find all indexes
                     int j = Order*Order-1;

                     BaseInt sc[2*Size];
                     __shared__ BaseInt sa[Size*Order*Order];
                     __shared__ BaseInt sb[Size*Order*Order];
                     __shared__ BaseInt scc[2*Size*2*Order*2*Order];
                
                     #pragma unroll
                     for(std::size_t k=0 ; k < Size ;++k){
                         sa[threadid+Order*Order*k] = a[threadid+Order*Order*k];
                         sb[threadid+Order*Order*k] = b[threadid+Order*Order*k];
                     }

                     #pragma unroll
                     for(std::size_t k=0 ; k < 8*Size ;++k)
                         scc[threadid+Order*Order*k] = 0;
                
                     __syncthreads(); // we sync to be sure sa, sb and sc are loaded fully
                     
                     
                     for(int i(0); i < Order*Order; ++i)
                     {
                         #pragma unroll
                         for(int k=0;k<2*Size;++k)
                             sc[k] = 0;                      

                         qa = i/Order;
                         ra = i%Order;
                         qb = ((i <= threadid) ? (threadid - i) : (Order*Order-1) - i) / Order;
                         rb = ((i <= threadid) ? (threadid - i) : (Order*Order-1) - i) % Order;
                         int offset = ((i <= threadid) ? (threadid - i) : (Order*Order-1) - i ) * Size; 

                         pos = 2*(qa+qb)*Order + (ra+rb);
                         mul384_384_gpu(&sc[0],&sa[offset],&sb[i*Size]);
                         add384_384_gpu(&scc[2*Size*pos],&sc[0]);
                     }
                     
                     __syncthreads(); // we sync to be sure sa, sb and sc are loaded fully

                     #pragma unroll
                     for(std::size_t k=0 ; k < 8*Size ;++k)
                         c[threadid+Order*Order*k] = scc[threadid+Order*Order*k];
             
                    }
         } // end namespace detail
    } // end namespace vli
