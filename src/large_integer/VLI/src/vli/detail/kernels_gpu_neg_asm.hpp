/*
*Very Large Integer Library, License - Version 1.0 - May 3rd, 2012
*
*Timothee Ewart - University of Geneva, 
*Andreas Hehn - Swiss Federal Institute of technology Zurich.
*
*Permission is hereby granted, free of charge, to any person or organization
*obtaining a copy of the software and accompanying documentation covered by
*this license (the "Software") to use, reproduce, display, distribute,
*execute, and transmit the Software, and to prepare derivative works of the
*Software, and to permit third-parties to whom the Software is furnished to
*do so, all subject to the following:
*
*The copyright notices in the Software and this entire statement, including
*the above license grant, this restriction and the following disclaimer,
*must be included in all copies of the Software, in whole or in part, and
*all derivative works of the Software, unless such copies or derivative
*works are solely in the form of machine-executable object code generated by
*a source language processor.
*
*THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
*IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
*FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
*SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
*FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
*ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
*DEALINGS IN THE SOFTWARE.
*/

#ifndef KERNELS_GPU_NEG_HPP
#define KERNELS_GPU_NEG_HPP

#include "vli/utils/macro_gpu.h"

namespace vli{
    namespace detail{

    #define FUNCTION_negate_nbits(z, n, unused) \
       inline void NAME_NEGATE_NBITS(n)(unsigned int* x){                                                        \
           unsigned int one(1);                                                                                      \
           unsigned int zero(0);                                                                                     \
           asm(                                                                                                      \
               BOOST_PP_REPEAT(BOOST_PP_ADD(4,BOOST_PP_MUL(2,n)), NOT_register, ~)                                   \
               "add.cc.u32  %0, %0, "BOOST_PP_STRINGIZE(BOOST_PP_CAT(pc,BOOST_PP_ADD(4,BOOST_PP_MUL(2,n))))"; \n\t " \
               BOOST_PP_REPEAT(BOOST_PP_ADD(4,BOOST_PP_MUL(2,n)), ADC0_register, BOOST_PP_ADD(5,BOOST_PP_MUL(2,n)))  \
               :BOOST_PP_REPEAT(BOOST_PP_ADD(4,BOOST_PP_MUL(2,n)),CLOTHER_register_rw,~)                             \
               :"r"(one),"r"(zero)                                                                                   \
           );                                                                                                        \
       }                                                                                                             \

       BOOST_PP_REPEAT(5, FUNCTION_negate_nbits, ~)
    #undef FUNCTION_negate_nbits

    }
}

#endif
