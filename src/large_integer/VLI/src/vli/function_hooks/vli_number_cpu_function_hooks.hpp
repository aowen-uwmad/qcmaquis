/*
*Very Large Integer Library, License - Version 1.0 - May 3rd, 2012
*
*Timothee Ewart - University of Geneva, 
*Andreas Hehn - Swiss Federal Institute of technology Zurich.
*
*Permission is hereby granted, free of charge, to any person or organization
*obtaining a copy of the software and accompanying documentation covered by
*this license (the "Software") to use, reproduce, display, distribute,
*execute, and transmit the Software, and to prepare derivative works of the
*Software, and to permit third-parties to whom the Software is furnished to
*do so, all subject to the following:
*
*The copyright notices in the Software and this entire statement, including
*the above license grant, this restriction and the following disclaimer,
*must be included in all copies of the Software, in whole or in part, and
*all derivative works of the Software, unless such copies or derivative
*works are solely in the form of machine-executable object code generated by
*a source language processor.
*
*THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
*IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
*FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
*SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
*FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
*ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
*DEALINGS IN THE SOFTWARE.
*/

#ifndef VLI_NUMBER_CPU_FUNCTION_HOOKS_HPP
#define VLI_NUMBER_CPU_FUNCTION_HOOKS_HPP

#include <boost/cstdint.hpp>
#include "vli/detail/kernels_cpu.h"

namespace vli
{
    //forwart declaration
    template <std::size_t NumBits>
    class vli;
    
    //????_assign functions
    template <std::size_t NumBits>
    void plus_assign(vli<NumBits> & vli_a, vli<NumBits> const& vli_b ){
        using detail::add;
        add<vli<NumBits>::numwords>(&vli_a[0],&vli_b[0]);
    }
     
    template <std::size_t NumBits>
    void plus_assign(vli<NumBits> & vli_a,  boost::uint64_t const b ){
        using detail::add;
        add<vli<NumBits>::numwords>(&vli_a[0],b);
    }
    
    template <std::size_t NumBits>
    void plus_extend_assign(vli<NumBits+64> & vli_a, vli<NumBits> const& vli_b, vli<NumBits> const& vli_c){
        using detail::add_extension;
        add_extension<vli<NumBits>::numwords>(&vli_a[0],&vli_b[0],&vli_c[0]);
    }

    template <std::size_t NumBits>
    void minus_assign(vli<NumBits> & vli_a, vli<NumBits> const& vli_b ){
        using detail::sub;
        sub<vli<NumBits>::numwords>(&vli_a[0],&vli_b[0]);
    }
    
    template <std::size_t NumBits>
    void minus_assign(vli<NumBits> & vli_a,  boost::uint64_t const b ){
        using detail::sub;
        sub<vli<NumBits>::numwords>(&vli_a[0],b);
    }

    template <std::size_t NumBits>
    void multiplies_assign( vli<NumBits>& vli_a , vli<NumBits> const & vli_b){
        using detail::mul;
        mul<vli<NumBits>::numwords>(&vli_a[0],&vli_b[0]);
    }

    template <std::size_t NumBits>
    void multiplies_assign(vli<NumBits> & vli_a,  boost::uint64_t const b){
        using detail::mul;
        mul<vli<NumBits>::numwords>(&vli_a[0],b);
    }

    template <std::size_t NumBits>
    void multiplies(vli<2*NumBits>& vli_res , vli<NumBits> const & vli_a, vli<NumBits> const & vli_b){
        using detail::mul;
        mul<vli<NumBits>::numwords>(&vli_res[0],&vli_a[0],&vli_b[0]);
    }
    
    template <std::size_t NumBits>
    void multiply_add_assign(vli<2*NumBits>& vli_res , vli<NumBits> const & vli_a, vli<NumBits> const & vli_b){
        using detail::muladd;
        muladd<vli<NumBits>::numwords>(&vli_res[0],&vli_a[0],&vli_b[0]);
    }    
} //namespace vli

#endif //VLI_NUMBER_CPU_FUNCTION_HOOKS_HPP
