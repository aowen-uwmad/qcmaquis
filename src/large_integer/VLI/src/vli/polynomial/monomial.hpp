/*
*Very Large Integer Library, License - Version 1.0 - May 3rd, 2012
*
*Andreas Hehn - Swiss Federal Institute of technology Zurich.
*Timothee Ewart - University of Geneva, 
*
*Permission is hereby granted, free of charge, to any person or organization
*obtaining a copy of the software and accompanying documentation covered by
*this license (the "Software") to use, reproduce, display, distribute,
*execute, and transmit the Software, and to prepare derivative works of the
*Software, and to permit third-parties to whom the Software is furnished to
*do so, all subject to the following:
*
*The copyright notices in the Software and this entire statement, including
*the above license grant, this restriction and the following disclaimer,
*must be included in all copies of the Software, in whole or in part, and
*all derivative works of the Software, unless such copies or derivative
*works are solely in the form of machine-executable object code generated by
*a source language processor.
*
*THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
*IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
*FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
*SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
*FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
*ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
*DEALINGS IN THE SOFTWARE.
*/

#ifndef VLI_MONOMIAL_HPP
#define VLI_MONOMIAL_HPP

#include <ostream>
#include <vli/polynomial/variable.hpp>
#include <vli/polynomial/detail/storage.hpp>

namespace vli {
/*! \class monomial
        \brief This class models a monomial 
*/
template <class Coeff, class Var0, class Var1 = no_variable, class Var2 = no_variable, class Var3 = no_variable>
struct monomial : public detail::element_descriptor_impl<Var0,Var1,Var2,Var3> {
    typedef Coeff           value_type;
    typedef unsigned int    exponent_type;
    typedef detail::element_descriptor_impl<Var0,Var1,Var2,Var3> base_type;
    
    monomial()
    : detail::element_descriptor_impl<Var0,Var1,Var2,Var3>(0,0,0,0), c_(Coeff(1)) {
    }
    explicit monomial(exponent_type exp0, exponent_type exp1 = 0, exponent_type exp2 = 0, exponent_type exp3 = 0)
    : detail::element_descriptor_impl<Var0,Var1,Var2,Var3>(exp0,exp1,exp2,exp3), c_(Coeff(1)) {
    }
    
    monomial operator - () const {
        monomial r(*this);
        r.c_ = -c_;
        return r;
    }
    
    template <class T>
    monomial& operator *= (T const& c) {
        c_ *= c;
        return *this;
    }
    
    void print(std::ostream& os) const {
        if(c_ > 0)
            os << "+";
        os << c_ << "*";
        os << static_cast<base_type>(*this);
    }

    bool operator == (monomial const& m) const{
        return (
               (exponent(*this,Var0()) == exponent(m,Var0()))
            && (exponent(*this,Var1()) == exponent(m,Var1()))
            && (exponent(*this,Var2()) == exponent(m,Var2()))
            && (exponent(*this,Var3()) == exponent(m,Var3()))
            && (c_ == m.c_)
        );
    }

    Coeff c_;
};


template <class Coeff, class Var0, class Var1, class Var2, class Var3>
std::ostream& operator << (std::ostream& os, monomial<Coeff,Var0,Var1,Var2,Var3> const& m){
    m.print(os);
    return os;
}
template <class Coeff, class Var0, class Var1, class Var2, class Var3, class T>
monomial<Coeff,Var0,Var1,Var2,Var3> operator * (monomial<Coeff,Var0,Var1,Var2,Var3> m, T const& c) {
    m*=c;
    return m;
}

template <class Coeff, class Var0, class Var1, class Var2, class Var3, class T>
monomial<Coeff,Var0,Var1,Var2,Var3> operator * (T const& c, monomial<Coeff,Var0,Var1,Var2,Var3> const& m) {
    return m*c;
}

} //end namespace vli


#endif //VLI_MONOMIAL_HPP
