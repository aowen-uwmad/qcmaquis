/*
*Very Large Integer Library, License - Version 1.0 - May 3rd, 2012
*
*Timothee Ewart - University of Geneva, 
*Andreas Hehn - Swiss Federal Institute of technology Zurich.
*
*Permission is hereby granted, free of charge, to any person or organization
*obtaining a copy of the software and accompanying documentation covered by
*this license (the "Software") to use, reproduce, display, distribute,
*execute, and transmit the Software, and to prepare derivative works of the
*Software, and to permit third-parties to whom the Software is furnished to
*do so, all subject to the following:
*
*The copyright notices in the Software and this entire statement, including
*the above license grant, this restriction and the following disclaimer,
*must be included in all copies of the Software, in whole or in part, and
*all derivative works of the Software, unless such copies or derivative
*works are solely in the form of machine-executable object code generated by
*a source language processor.
*
*THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
*IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
*FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
*SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
*FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
*ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
*DEALINGS IN THE SOFTWARE.
*/

#ifndef VLI_MONOMIAL_HPP
#define VLI_MONOMIAL_HPP

#include <ostream>

namespace vli {
    template <class Coeff>
    struct monomial {
        typedef unsigned int exponent_type;
        typedef Coeff coeff_type;
        typedef coeff_type value_type;

        /**
         * Constructor: Creates a monomial 1*J^j_exp*h^h_exp
         */
        explicit monomial(exponent_type j_exp = 0, exponent_type h_exp = 0)
        :j_exp_(j_exp), h_exp_(h_exp), coeff_(1) {
        }

        /*
        * These two functions are only called inside the vli_polynomial_gpu_function_hooks.hpp
        */
        value_type* p() {
            return coeff_.p();
        }
        
        value_type* p() const {
            return coeff_.p();
        }

        monomial operator - () const {
            monomial r(*this);
            r.coeff_ = -this->coeff_;
            return r;
        }
        monomial& operator *= (coeff_type const& c) {
            coeff_ *= c;
            return (*this);
        }
        
        monomial& operator *= (int c) {
            coeff_ *= c;
            return (*this);
        }
    
        void print(std::ostream& os) const {
            if(coeff_ > 0)
                os<<"+";
            os<<coeff_<<"*J^"<<j_exp_<<"*h^"<<h_exp_;
        }

        bool operator == (monomial const& m) const{
            return (j_exp_ == m.j_exp_) && (h_exp_ == m.h_exp_) && (coeff_ == m.coeff_);
        }
    
        exponent_type j_exp_;
        exponent_type h_exp_;
        value_type coeff_;
    };
    
    template <class Coeff>
    std::ostream& operator<<(std::ostream& os, monomial<Coeff> const& m){
        m.print(os);
        return os;
    }
    template <class Coeff, class T>
    monomial<Coeff> operator * (monomial<Coeff> m, T const& c) {
        m*=c;
        return m;
    }

    template <class Coeff, class T>
    monomial<Coeff> operator * (T const& c, monomial<Coeff> const& m) {
        return m*c;
    }

} //end namespace vli


#endif //VLI_MONOMIAL_HPP
