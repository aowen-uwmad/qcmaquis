/*
 * Ambient, License - Version 1.0 - May 3rd, 2012
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#ifndef AMBIENT_UTILS_AUXILIARY
#define AMBIENT_UTILS_AUXILIARY

namespace ambient {

    using ambient::models::velvet::history;
    using ambient::models::velvet::revision;

    inline bool master(){
        return (ambient::rank() == 0);
    }

    inline bool parallel(){
        return (ambient::controller.context != ambient::controller.context_base);
    }
    
    inline void make_persistent(history* o){ 
        o->back()->spec.zombie();
    }

    template<typename T>
    inline void destroy(T* o){ 
        controller.destroy(o); 
    }

    inline bool verbose(){ 
        return rank.verbose;   
    }

    inline void log(const char* msg){
        if(ambient::rank()) printf("%s\n", msg);
    }

    inline void sync(){ 
        controller.flush();
        controller.clear();  
        bulk::drop();
    }

    inline void fuse(const history* src, history* dst){ 
        assert(dst->current == NULL);
        if(src->weak()) return;
        revision* r = src->back();
        dst->content.push_back(r);
        dst->current = r;
        // do not deallocate or reuse
        if(!r->valid()) r->spec.protect();
        assert(!r->valid() || !r->spec.bulked()); // can't rely on bulk memory
        r->use();
    }

}

#endif
