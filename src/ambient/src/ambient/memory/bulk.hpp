/*
 * Ambient, License - Version 1.0 - May 3rd, 2012
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#ifndef AMBIENT_MEMORY_BULK
#define AMBIENT_MEMORY_BULK

namespace ambient { namespace memory {

    struct bulk {

       ~bulk(){ 
            delete this->master; 
        }
        static bulk& instance(){
            static bulk singleton;
            return singleton;
        }
        bulk(){
            this->arity = ambient::get_num_threads();
            this->master = new region<AMBIENT_BULK_CHUNK, factory<AMBIENT_BULK_CHUNK> >();
            this->slave  = new region<AMBIENT_BULK_CHUNK, factory<AMBIENT_BULK_CHUNK> >();
        }
        template<size_t S> static void* malloc()         { return instance().master->malloc(S);     }
                           static void* malloc(size_t s) { return instance().master->malloc(s);     }
        template<size_t S> static void* calloc()         { void* m = malloc<S>(); memset(m, 0, S); return m; }
                           static void* calloc(size_t s) { void* m = malloc(s);   memset(m, 0, s); return m; }
                           static void reuse(void* ptr)  { factory<AMBIENT_BULK_CHUNK>::reuse(ptr); }
        template<size_t S> static void free(void* ptr)   { }
                           static void free(void* ptr)   { }
        static void* reserve(size_t sz){
            if(instance().slave->block_count < factory<AMBIENT_BULK_CHUNK>::reserved()/2)
                return instance().slave->malloc(sz);
            else 
                return instance().master->malloc(sz); 
        }

        static void report(){
            bulk& pool = instance();
            size_t pools = factory<AMBIENT_BULK_CHUNK>::size();
            if(pools > 2*pool.arity){
                std::cout << "R" << ambient::rank() << ": reused chunks: " << factory<AMBIENT_BULK_CHUNK>::reused() << "!\n";
                std::cout << "R" << ambient::rank() << ": reserved chunks: " << instance().slave->block_count << "!\n";
                std::cout << "R" << ambient::rank() << ": bulk memory: " << pools << " full chunks used\n";
                #ifdef AMBIENT_TRACE
                AMBIENT_TRACE
                #endif
            }
        }

        static void drop(){
            #ifdef AMBIENT_REPORT_BULK_USAGE
            report();
            #endif
            bulk& pool = instance();
            pool.master->reset();
            pool.slave->reset();
            factory<AMBIENT_BULK_CHUNK>::reset();
        }
        static region_t signature(){
            return region_t::rbulked;
        }
    private:
        region<AMBIENT_BULK_CHUNK, factory<AMBIENT_BULK_CHUNK> >* master;
        region<AMBIENT_BULK_CHUNK, factory<AMBIENT_BULK_CHUNK> >* slave;
        int arity;
    };

} }

#endif
