/*
 * Ambient, License - Version 1.0 - May 3rd, 2012
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#ifndef AMBIENT_MEMORY_POOL
#define AMBIENT_MEMORY_POOL

#include <sys/mman.h>

namespace ambient { namespace memory {

    struct standard {
        static void* malloc(size_t sz){ return std::malloc(sz); }
        static void free(void* ptr){ std::free(ptr);  }
        static region_t signature(){
            return region_t::rstandard;
        }
    };

    struct fixed {
        // note: singleton_pool contains implicit mutex (critical for gcc)
        template<size_t S> static void* malloc(){ return std::malloc(S); } // boost::singleton_pool<fixed,S>::malloc(); 
        template<size_t S> static void free(void* ptr){ std::free(ptr);  } // boost::singleton_pool<fixed,S>::free(ptr);
    };

    struct outofcore {
        static void* malloc(size_t sz, void* pool){ return ((ambient::memory::mmap::descriptor*)pool)->malloc(sz);  }
        static region_t signature(){
            return region_t::rdelegated;
        }
    };

    struct bulk {
        template<size_t S>
        class region {
        public:
            region(){
                this->buffers.push_back(std::malloc(S));
                this->buffer = &this->buffers[0];
                this->iterator = (char*)*this->buffer;
            }
            void realloc(){
                if(*this->buffer == this->buffers.back()){
                    this->buffers.push_back(std::malloc(S));
                    this->buffer = &this->buffers.back();
                }else
                    this->buffer++;
                this->iterator = (char*)*this->buffer;
            }
            void* malloc(size_t sz){
                if(((size_t)iterator + sz - (size_t)*this->buffer) >= S) realloc();
                void* m = (void*)iterator;
                iterator += aligned(sz);
                return m;
            }
            void reset(){
                this->buffer = &this->buffers[0];
                this->iterator = (char*)*this->buffer;
            }
        private:
            std::vector<void*> buffers;
            void** buffer;
            char* iterator;
        };

        // for shared heap: (slightly improves consumption)
        // typedef boost::details::pool::default_mutex mutex;
        // boost::details::pool::guard<mutex> g(mtx);
       ~bulk(){ 
            delete[] this->set; 
        }
        static bulk& instance(){
            static bulk singleton;
            return singleton;
        }
        bulk(){
            this->arity = ambient::get_num_threads();
            this->set = new region<AMBIENT_BULK_CHUNK>[arity];
        }
        template<size_t S> static void* malloc()         { return instance().set[AMBIENT_THREAD_ID].malloc(S);  }
                           static void* malloc(size_t sz){ return instance().set[AMBIENT_THREAD_ID].malloc(sz); }
        template<size_t S> static void free(void* ptr)   { }
                           static void free(void* ptr)   { }

        static void drop(){
            bulk& pool = instance();
            for(int i = 0; i < pool.arity; i++) pool.set[i].reset();
        }
        static region_t signature(){
            return region_t::rbulked;
        }
    private:
        region<AMBIENT_BULK_CHUNK>* set;
        int arity;
    };

} }

namespace ambient {
    using memory::outofcore;
    using memory::standard;
    using memory::fixed;
    using memory::bulk;

    namespace pool {
        struct descriptor {

            descriptor(size_t e, region_t r = region_t::rstandard) : extent(e), region(r), mmap(NULL), persistency(1) {}
            void* mmap;
            size_t extent;

            void zombie(){
                //region = region_t::rpersist;
            }
            void protect(){
                assert(region != region_t::rdelegated);
                if(!(persistency++)) region = region_t::rstandard;
            }
            void weaken(){
                assert(region != region_t::rbulked);
                assert(region != region_t::rdelegated);
                if(!(--persistency)) region = region_t::rbulked;
            }
            void reuse(descriptor& d){
                region   = d.region;
                d.region = region_t::rdelegated;
            }
            bool conserves(descriptor& p){
                assert(p.region != region_t::rdelegated && region != region_t::rdelegated);
                return (!p.bulked() || bulked());
            }
            bool bulked(){
                return (region == region_t::rbulked);
            }
            region_t region;
            int persistency;
        };

        template<class Memory>           static void* malloc(size_t sz){ return Memory::malloc(sz);            }
        template<class Memory, size_t S> static void* malloc()         { return Memory::template malloc<S>();  }
        template<class Memory, class  T> static void* malloc()         { return malloc<Memory, sizeof(T)>();   }
        template<class Memory>           static void free(void* ptr)   { return Memory::free(ptr);             }
        template<class Memory, size_t S> static void free(void* ptr)   { return Memory::template free<S>(ptr); }
        template<class Memory, class  T> static void free(void* ptr)   { return free<Memory, sizeof(T)>(ptr);  }

        template<class Memory>
        static void* malloc(descriptor& d){
            d.region = Memory::signature();
            return Memory::malloc(d.extent);
        }
        template<>
        static void* malloc<outofcore>(descriptor& d){
            d.region = outofcore::signature();
            return outofcore::malloc(d.extent, d.mmap);
        }

        static void* malloc(descriptor& d){
            assert(d.region != region_t::rdelegated);
            if(d.region == region_t::rbulked && d.extent <= AMBIENT_IB_EXTENT){ 
                return malloc<bulk>(d.extent); 
            } else return malloc<standard>(d.extent);
        }
        static void free(void* ptr, descriptor& d){ 
            if(ptr == NULL || d.region == region_t::rdelegated) return;
            if(d.region == region_t::rbulked && d.extent <= AMBIENT_IB_EXTENT) free<bulk>(ptr);
            else free<standard>(ptr);
        }
    }
}

#endif
