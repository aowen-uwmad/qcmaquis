 #define marked NULL,
 #define pinned ambient::models::ambient_pin* ,
template< typename FP, typename T0 >
operation( FP logistics, FP computing, T0 &arg0 ){
    this->logistics_ptr = (void(*)())logistics;
    this->computing_ptr = (void(*)())computing;
    this->op = this->logistics_ptr;
    this->credit = 0;
    this->state = MARKUP;
    this->count = 1;
    this->arguments = (void**)malloc(sizeof(void*)*this->count);
    this->arguments[0] = (void*)info<T0>::typed::pointer(arg0); info<T0>::typed::modify(arg0, this);
    void(operation::*ptr)(FP); ptr = &operation::prototype_template;
    this->prototype = (void(operation::*)())ptr;
    ptr = &operation::cleanup_template;
    this->cleanup = (void(operation::*)())ptr;
    ptr = &operation::creditup_template;
    this->creditup = (void(operation::*)())ptr;
    this->mark_pin(logistics);
}
template < typename T0 >
void prototype_template(void (*)( T0& )){
    ( (void (*)( T0& )) this->op )
    ( info<T0>::typed::dereference(this->arguments[0]) );
}
template < typename T0 >
void cleanup_template(void (*)( T0& )){
    info<T0>::typed::deallocate(this->arguments[0]);
}
template < typename T0 >
void creditup_template(void (*)( T0& )){
    info<T0>::typed::weight(this->arguments[0], this);
}
template < typename T0 >
void mark_pin(void (*)( T0& )){
    this->pin = NULL;
}
template < typename T0 > void prototype_template(void (*)( pinned T0& )) { ( (void (*)( pinned T0& )) this->op ) ( marked info<T0>::typed::dereference(this->arguments[0]) ); } template < typename T0 > void cleanup_template(void (*)( pinned T0& )) { info<T0>::typed::deallocate(this->arguments[0]); } template < typename T0 > void creditup_template(void (*)( pinned T0& )) { info<T0>::typed::weight(this->arguments[0], this); } template < typename T0 > void mark_pin(void (*)( pinned T0& )) { this->pin = &current(info<T0>::typed::dereference(this->arguments[0])); }
template< typename FP, typename T0 , typename T1 >
operation( FP logistics, FP computing, T0 &arg0 , T1 &arg1 ){
    this->logistics_ptr = (void(*)())logistics;
    this->computing_ptr = (void(*)())computing;
    this->op = this->logistics_ptr;
    this->credit = 0;
    this->state = MARKUP;
    this->count = 2;
    this->arguments = (void**)malloc(sizeof(void*)*this->count);
    this->arguments[0] = (void*)info<T0>::typed::pointer(arg0); info<T0>::typed::modify(arg0, this); this->arguments[1] = (void*)info<T1>::typed::pointer(arg1); info<T1>::typed::modify(arg1, this);
    void(operation::*ptr)(FP); ptr = &operation::prototype_template;
    this->prototype = (void(operation::*)())ptr;
    ptr = &operation::cleanup_template;
    this->cleanup = (void(operation::*)())ptr;
    ptr = &operation::creditup_template;
    this->creditup = (void(operation::*)())ptr;
    this->mark_pin(logistics);
}
template < typename T0 , typename T1 >
void prototype_template(void (*)( T0& , T1& )){
    ( (void (*)( T0& , T1& )) this->op )
    ( info<T0>::typed::dereference(this->arguments[0]) , info<T1>::typed::dereference(this->arguments[1]) );
}
template < typename T0 , typename T1 >
void cleanup_template(void (*)( T0& , T1& )){
    info<T0>::typed::deallocate(this->arguments[0]); info<T1>::typed::deallocate(this->arguments[1]);
}
template < typename T0 , typename T1 >
void creditup_template(void (*)( T0& , T1& )){
    info<T0>::typed::weight(this->arguments[0], this); info<T1>::typed::weight(this->arguments[1], this);
}
template < typename T0 , typename T1 >
void mark_pin(void (*)( T0& , T1& )){
    this->pin = NULL;
}
template < typename T0 , typename T1 > void prototype_template(void (*)( pinned T0& , T1& )) { ( (void (*)( pinned T0& , T1& )) this->op ) ( marked info<T0>::typed::dereference(this->arguments[0]) , info<T1>::typed::dereference(this->arguments[1]) ); } template < typename T0 , typename T1 > void cleanup_template(void (*)( pinned T0& , T1& )) { info<T0>::typed::deallocate(this->arguments[0]); info<T1>::typed::deallocate(this->arguments[1]); } template < typename T0 , typename T1 > void creditup_template(void (*)( pinned T0& , T1& )) { info<T0>::typed::weight(this->arguments[0], this); info<T1>::typed::weight(this->arguments[1], this); } template < typename T0 , typename T1 > void mark_pin(void (*)( pinned T0& , T1& )) { this->pin = &current(info<T0>::typed::dereference(this->arguments[0])); } template < typename T0 , typename T1 > void prototype_template(void (*)( T0& , pinned T1& )) { ( (void (*)( T0& , pinned T1& )) this->op ) ( info<T0>::typed::dereference(this->arguments[0]) , marked info<T1>::typed::dereference(this->arguments[1]) ); } template < typename T0 , typename T1 > void cleanup_template(void (*)( T0& , pinned T1& )) { info<T0>::typed::deallocate(this->arguments[0]); info<T1>::typed::deallocate(this->arguments[1]); } template < typename T0 , typename T1 > void creditup_template(void (*)( T0& , pinned T1& )) { info<T0>::typed::weight(this->arguments[0], this); info<T1>::typed::weight(this->arguments[1], this); } template < typename T0 , typename T1 > void mark_pin(void (*)( T0& , pinned T1& )) { this->pin = &current(info<T1>::typed::dereference(this->arguments[1])); }
template< typename FP, typename T0 , typename T1 , typename T2 >
operation( FP logistics, FP computing, T0 &arg0 , T1 &arg1 , T2 &arg2 ){
    this->logistics_ptr = (void(*)())logistics;
    this->computing_ptr = (void(*)())computing;
    this->op = this->logistics_ptr;
    this->credit = 0;
    this->state = MARKUP;
    this->count = 3;
    this->arguments = (void**)malloc(sizeof(void*)*this->count);
    this->arguments[0] = (void*)info<T0>::typed::pointer(arg0); info<T0>::typed::modify(arg0, this); this->arguments[1] = (void*)info<T1>::typed::pointer(arg1); info<T1>::typed::modify(arg1, this); this->arguments[2] = (void*)info<T2>::typed::pointer(arg2); info<T2>::typed::modify(arg2, this);
    void(operation::*ptr)(FP); ptr = &operation::prototype_template;
    this->prototype = (void(operation::*)())ptr;
    ptr = &operation::cleanup_template;
    this->cleanup = (void(operation::*)())ptr;
    ptr = &operation::creditup_template;
    this->creditup = (void(operation::*)())ptr;
    this->mark_pin(logistics);
}
template < typename T0 , typename T1 , typename T2 >
void prototype_template(void (*)( T0& , T1& , T2& )){
    ( (void (*)( T0& , T1& , T2& )) this->op )
    ( info<T0>::typed::dereference(this->arguments[0]) , info<T1>::typed::dereference(this->arguments[1]) , info<T2>::typed::dereference(this->arguments[2]) );
}
template < typename T0 , typename T1 , typename T2 >
void cleanup_template(void (*)( T0& , T1& , T2& )){
    info<T0>::typed::deallocate(this->arguments[0]); info<T1>::typed::deallocate(this->arguments[1]); info<T2>::typed::deallocate(this->arguments[2]);
}
template < typename T0 , typename T1 , typename T2 >
void creditup_template(void (*)( T0& , T1& , T2& )){
    info<T0>::typed::weight(this->arguments[0], this); info<T1>::typed::weight(this->arguments[1], this); info<T2>::typed::weight(this->arguments[2], this);
}
template < typename T0 , typename T1 , typename T2 >
void mark_pin(void (*)( T0& , T1& , T2& )){
    this->pin = NULL;
}
template < typename T0 , typename T1 , typename T2 > void prototype_template(void (*)( pinned T0& , T1& , T2& )) { ( (void (*)( pinned T0& , T1& , T2& )) this->op ) ( marked info<T0>::typed::dereference(this->arguments[0]) , info<T1>::typed::dereference(this->arguments[1]) , info<T2>::typed::dereference(this->arguments[2]) ); } template < typename T0 , typename T1 , typename T2 > void cleanup_template(void (*)( pinned T0& , T1& , T2& )) { info<T0>::typed::deallocate(this->arguments[0]); info<T1>::typed::deallocate(this->arguments[1]); info<T2>::typed::deallocate(this->arguments[2]); } template < typename T0 , typename T1 , typename T2 > void creditup_template(void (*)( pinned T0& , T1& , T2& )) { info<T0>::typed::weight(this->arguments[0], this); info<T1>::typed::weight(this->arguments[1], this); info<T2>::typed::weight(this->arguments[2], this); } template < typename T0 , typename T1 , typename T2 > void mark_pin(void (*)( pinned T0& , T1& , T2& )) { this->pin = &current(info<T0>::typed::dereference(this->arguments[0])); } template < typename T0 , typename T1 , typename T2 > void prototype_template(void (*)( T0& , pinned T1& , T2& )) { ( (void (*)( T0& , pinned T1& , T2& )) this->op ) ( info<T0>::typed::dereference(this->arguments[0]) , marked info<T1>::typed::dereference(this->arguments[1]) , info<T2>::typed::dereference(this->arguments[2]) ); } template < typename T0 , typename T1 , typename T2 > void cleanup_template(void (*)( T0& , pinned T1& , T2& )) { info<T0>::typed::deallocate(this->arguments[0]); info<T1>::typed::deallocate(this->arguments[1]); info<T2>::typed::deallocate(this->arguments[2]); } template < typename T0 , typename T1 , typename T2 > void creditup_template(void (*)( T0& , pinned T1& , T2& )) { info<T0>::typed::weight(this->arguments[0], this); info<T1>::typed::weight(this->arguments[1], this); info<T2>::typed::weight(this->arguments[2], this); } template < typename T0 , typename T1 , typename T2 > void mark_pin(void (*)( T0& , pinned T1& , T2& )) { this->pin = &current(info<T1>::typed::dereference(this->arguments[1])); } template < typename T0 , typename T1 , typename T2 > void prototype_template(void (*)( T0& , T1& , pinned T2& )) { ( (void (*)( T0& , T1& , pinned T2& )) this->op ) ( info<T0>::typed::dereference(this->arguments[0]) , info<T1>::typed::dereference(this->arguments[1]) , marked info<T2>::typed::dereference(this->arguments[2]) ); } template < typename T0 , typename T1 , typename T2 > void cleanup_template(void (*)( T0& , T1& , pinned T2& )) { info<T0>::typed::deallocate(this->arguments[0]); info<T1>::typed::deallocate(this->arguments[1]); info<T2>::typed::deallocate(this->arguments[2]); } template < typename T0 , typename T1 , typename T2 > void creditup_template(void (*)( T0& , T1& , pinned T2& )) { info<T0>::typed::weight(this->arguments[0], this); info<T1>::typed::weight(this->arguments[1], this); info<T2>::typed::weight(this->arguments[2], this); } template < typename T0 , typename T1 , typename T2 > void mark_pin(void (*)( T0& , T1& , pinned T2& )) { this->pin = &current(info<T2>::typed::dereference(this->arguments[2])); }
template< typename FP, typename T0 , typename T1 , typename T2 , typename T3 >
operation( FP logistics, FP computing, T0 &arg0 , T1 &arg1 , T2 &arg2 , T3 &arg3 ){
    this->logistics_ptr = (void(*)())logistics;
    this->computing_ptr = (void(*)())computing;
    this->op = this->logistics_ptr;
    this->credit = 0;
    this->state = MARKUP;
    this->count = 4;
    this->arguments = (void**)malloc(sizeof(void*)*this->count);
    this->arguments[0] = (void*)info<T0>::typed::pointer(arg0); info<T0>::typed::modify(arg0, this); this->arguments[1] = (void*)info<T1>::typed::pointer(arg1); info<T1>::typed::modify(arg1, this); this->arguments[2] = (void*)info<T2>::typed::pointer(arg2); info<T2>::typed::modify(arg2, this); this->arguments[3] = (void*)info<T3>::typed::pointer(arg3); info<T3>::typed::modify(arg3, this);
    void(operation::*ptr)(FP); ptr = &operation::prototype_template;
    this->prototype = (void(operation::*)())ptr;
    ptr = &operation::cleanup_template;
    this->cleanup = (void(operation::*)())ptr;
    ptr = &operation::creditup_template;
    this->creditup = (void(operation::*)())ptr;
    this->mark_pin(logistics);
}
template < typename T0 , typename T1 , typename T2 , typename T3 >
void prototype_template(void (*)( T0& , T1& , T2& , T3& )){
    ( (void (*)( T0& , T1& , T2& , T3& )) this->op )
    ( info<T0>::typed::dereference(this->arguments[0]) , info<T1>::typed::dereference(this->arguments[1]) , info<T2>::typed::dereference(this->arguments[2]) , info<T3>::typed::dereference(this->arguments[3]) );
}
template < typename T0 , typename T1 , typename T2 , typename T3 >
void cleanup_template(void (*)( T0& , T1& , T2& , T3& )){
    info<T0>::typed::deallocate(this->arguments[0]); info<T1>::typed::deallocate(this->arguments[1]); info<T2>::typed::deallocate(this->arguments[2]); info<T3>::typed::deallocate(this->arguments[3]);
}
template < typename T0 , typename T1 , typename T2 , typename T3 >
void creditup_template(void (*)( T0& , T1& , T2& , T3& )){
    info<T0>::typed::weight(this->arguments[0], this); info<T1>::typed::weight(this->arguments[1], this); info<T2>::typed::weight(this->arguments[2], this); info<T3>::typed::weight(this->arguments[3], this);
}
template < typename T0 , typename T1 , typename T2 , typename T3 >
void mark_pin(void (*)( T0& , T1& , T2& , T3& )){
    this->pin = NULL;
}
template < typename T0 , typename T1 , typename T2 , typename T3 > void prototype_template(void (*)( pinned T0& , T1& , T2& , T3& )) { ( (void (*)( pinned T0& , T1& , T2& , T3& )) this->op ) ( marked info<T0>::typed::dereference(this->arguments[0]) , info<T1>::typed::dereference(this->arguments[1]) , info<T2>::typed::dereference(this->arguments[2]) , info<T3>::typed::dereference(this->arguments[3]) ); } template < typename T0 , typename T1 , typename T2 , typename T3 > void cleanup_template(void (*)( pinned T0& , T1& , T2& , T3& )) { info<T0>::typed::deallocate(this->arguments[0]); info<T1>::typed::deallocate(this->arguments[1]); info<T2>::typed::deallocate(this->arguments[2]); info<T3>::typed::deallocate(this->arguments[3]); } template < typename T0 , typename T1 , typename T2 , typename T3 > void creditup_template(void (*)( pinned T0& , T1& , T2& , T3& )) { info<T0>::typed::weight(this->arguments[0], this); info<T1>::typed::weight(this->arguments[1], this); info<T2>::typed::weight(this->arguments[2], this); info<T3>::typed::weight(this->arguments[3], this); } template < typename T0 , typename T1 , typename T2 , typename T3 > void mark_pin(void (*)( pinned T0& , T1& , T2& , T3& )) { this->pin = &current(info<T0>::typed::dereference(this->arguments[0])); } template < typename T0 , typename T1 , typename T2 , typename T3 > void prototype_template(void (*)( T0& , pinned T1& , T2& , T3& )) { ( (void (*)( T0& , pinned T1& , T2& , T3& )) this->op ) ( info<T0>::typed::dereference(this->arguments[0]) , marked info<T1>::typed::dereference(this->arguments[1]) , info<T2>::typed::dereference(this->arguments[2]) , info<T3>::typed::dereference(this->arguments[3]) ); } template < typename T0 , typename T1 , typename T2 , typename T3 > void cleanup_template(void (*)( T0& , pinned T1& , T2& , T3& )) { info<T0>::typed::deallocate(this->arguments[0]); info<T1>::typed::deallocate(this->arguments[1]); info<T2>::typed::deallocate(this->arguments[2]); info<T3>::typed::deallocate(this->arguments[3]); } template < typename T0 , typename T1 , typename T2 , typename T3 > void creditup_template(void (*)( T0& , pinned T1& , T2& , T3& )) { info<T0>::typed::weight(this->arguments[0], this); info<T1>::typed::weight(this->arguments[1], this); info<T2>::typed::weight(this->arguments[2], this); info<T3>::typed::weight(this->arguments[3], this); } template < typename T0 , typename T1 , typename T2 , typename T3 > void mark_pin(void (*)( T0& , pinned T1& , T2& , T3& )) { this->pin = &current(info<T1>::typed::dereference(this->arguments[1])); } template < typename T0 , typename T1 , typename T2 , typename T3 > void prototype_template(void (*)( T0& , T1& , pinned T2& , T3& )) { ( (void (*)( T0& , T1& , pinned T2& , T3& )) this->op ) ( info<T0>::typed::dereference(this->arguments[0]) , info<T1>::typed::dereference(this->arguments[1]) , marked info<T2>::typed::dereference(this->arguments[2]) , info<T3>::typed::dereference(this->arguments[3]) ); } template < typename T0 , typename T1 , typename T2 , typename T3 > void cleanup_template(void (*)( T0& , T1& , pinned T2& , T3& )) { info<T0>::typed::deallocate(this->arguments[0]); info<T1>::typed::deallocate(this->arguments[1]); info<T2>::typed::deallocate(this->arguments[2]); info<T3>::typed::deallocate(this->arguments[3]); } template < typename T0 , typename T1 , typename T2 , typename T3 > void creditup_template(void (*)( T0& , T1& , pinned T2& , T3& )) { info<T0>::typed::weight(this->arguments[0], this); info<T1>::typed::weight(this->arguments[1], this); info<T2>::typed::weight(this->arguments[2], this); info<T3>::typed::weight(this->arguments[3], this); } template < typename T0 , typename T1 , typename T2 , typename T3 > void mark_pin(void (*)( T0& , T1& , pinned T2& , T3& )) { this->pin = &current(info<T2>::typed::dereference(this->arguments[2])); } template < typename T0 , typename T1 , typename T2 , typename T3 > void prototype_template(void (*)( T0& , T1& , T2& , pinned T3& )) { ( (void (*)( T0& , T1& , T2& , pinned T3& )) this->op ) ( info<T0>::typed::dereference(this->arguments[0]) , info<T1>::typed::dereference(this->arguments[1]) , info<T2>::typed::dereference(this->arguments[2]) , marked info<T3>::typed::dereference(this->arguments[3]) ); } template < typename T0 , typename T1 , typename T2 , typename T3 > void cleanup_template(void (*)( T0& , T1& , T2& , pinned T3& )) { info<T0>::typed::deallocate(this->arguments[0]); info<T1>::typed::deallocate(this->arguments[1]); info<T2>::typed::deallocate(this->arguments[2]); info<T3>::typed::deallocate(this->arguments[3]); } template < typename T0 , typename T1 , typename T2 , typename T3 > void creditup_template(void (*)( T0& , T1& , T2& , pinned T3& )) { info<T0>::typed::weight(this->arguments[0], this); info<T1>::typed::weight(this->arguments[1], this); info<T2>::typed::weight(this->arguments[2], this); info<T3>::typed::weight(this->arguments[3], this); } template < typename T0 , typename T1 , typename T2 , typename T3 > void mark_pin(void (*)( T0& , T1& , T2& , pinned T3& )) { this->pin = &current(info<T3>::typed::dereference(this->arguments[3])); }
template< typename FP, typename T0 , typename T1 , typename T2 , typename T3 , typename T4 >
operation( FP logistics, FP computing, T0 &arg0 , T1 &arg1 , T2 &arg2 , T3 &arg3 , T4 &arg4 ){
    this->logistics_ptr = (void(*)())logistics;
    this->computing_ptr = (void(*)())computing;
    this->op = this->logistics_ptr;
    this->credit = 0;
    this->state = MARKUP;
    this->count = 5;
    this->arguments = (void**)malloc(sizeof(void*)*this->count);
    this->arguments[0] = (void*)info<T0>::typed::pointer(arg0); info<T0>::typed::modify(arg0, this); this->arguments[1] = (void*)info<T1>::typed::pointer(arg1); info<T1>::typed::modify(arg1, this); this->arguments[2] = (void*)info<T2>::typed::pointer(arg2); info<T2>::typed::modify(arg2, this); this->arguments[3] = (void*)info<T3>::typed::pointer(arg3); info<T3>::typed::modify(arg3, this); this->arguments[4] = (void*)info<T4>::typed::pointer(arg4); info<T4>::typed::modify(arg4, this);
    void(operation::*ptr)(FP); ptr = &operation::prototype_template;
    this->prototype = (void(operation::*)())ptr;
    ptr = &operation::cleanup_template;
    this->cleanup = (void(operation::*)())ptr;
    ptr = &operation::creditup_template;
    this->creditup = (void(operation::*)())ptr;
    this->mark_pin(logistics);
}
template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 >
void prototype_template(void (*)( T0& , T1& , T2& , T3& , T4& )){
    ( (void (*)( T0& , T1& , T2& , T3& , T4& )) this->op )
    ( info<T0>::typed::dereference(this->arguments[0]) , info<T1>::typed::dereference(this->arguments[1]) , info<T2>::typed::dereference(this->arguments[2]) , info<T3>::typed::dereference(this->arguments[3]) , info<T4>::typed::dereference(this->arguments[4]) );
}
template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 >
void cleanup_template(void (*)( T0& , T1& , T2& , T3& , T4& )){
    info<T0>::typed::deallocate(this->arguments[0]); info<T1>::typed::deallocate(this->arguments[1]); info<T2>::typed::deallocate(this->arguments[2]); info<T3>::typed::deallocate(this->arguments[3]); info<T4>::typed::deallocate(this->arguments[4]);
}
template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 >
void creditup_template(void (*)( T0& , T1& , T2& , T3& , T4& )){
    info<T0>::typed::weight(this->arguments[0], this); info<T1>::typed::weight(this->arguments[1], this); info<T2>::typed::weight(this->arguments[2], this); info<T3>::typed::weight(this->arguments[3], this); info<T4>::typed::weight(this->arguments[4], this);
}
template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 >
void mark_pin(void (*)( T0& , T1& , T2& , T3& , T4& )){
    this->pin = NULL;
}
template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 > void prototype_template(void (*)( pinned T0& , T1& , T2& , T3& , T4& )) { ( (void (*)( pinned T0& , T1& , T2& , T3& , T4& )) this->op ) ( marked info<T0>::typed::dereference(this->arguments[0]) , info<T1>::typed::dereference(this->arguments[1]) , info<T2>::typed::dereference(this->arguments[2]) , info<T3>::typed::dereference(this->arguments[3]) , info<T4>::typed::dereference(this->arguments[4]) ); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 > void cleanup_template(void (*)( pinned T0& , T1& , T2& , T3& , T4& )) { info<T0>::typed::deallocate(this->arguments[0]); info<T1>::typed::deallocate(this->arguments[1]); info<T2>::typed::deallocate(this->arguments[2]); info<T3>::typed::deallocate(this->arguments[3]); info<T4>::typed::deallocate(this->arguments[4]); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 > void creditup_template(void (*)( pinned T0& , T1& , T2& , T3& , T4& )) { info<T0>::typed::weight(this->arguments[0], this); info<T1>::typed::weight(this->arguments[1], this); info<T2>::typed::weight(this->arguments[2], this); info<T3>::typed::weight(this->arguments[3], this); info<T4>::typed::weight(this->arguments[4], this); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 > void mark_pin(void (*)( pinned T0& , T1& , T2& , T3& , T4& )) { this->pin = &current(info<T0>::typed::dereference(this->arguments[0])); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 > void prototype_template(void (*)( T0& , pinned T1& , T2& , T3& , T4& )) { ( (void (*)( T0& , pinned T1& , T2& , T3& , T4& )) this->op ) ( info<T0>::typed::dereference(this->arguments[0]) , marked info<T1>::typed::dereference(this->arguments[1]) , info<T2>::typed::dereference(this->arguments[2]) , info<T3>::typed::dereference(this->arguments[3]) , info<T4>::typed::dereference(this->arguments[4]) ); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 > void cleanup_template(void (*)( T0& , pinned T1& , T2& , T3& , T4& )) { info<T0>::typed::deallocate(this->arguments[0]); info<T1>::typed::deallocate(this->arguments[1]); info<T2>::typed::deallocate(this->arguments[2]); info<T3>::typed::deallocate(this->arguments[3]); info<T4>::typed::deallocate(this->arguments[4]); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 > void creditup_template(void (*)( T0& , pinned T1& , T2& , T3& , T4& )) { info<T0>::typed::weight(this->arguments[0], this); info<T1>::typed::weight(this->arguments[1], this); info<T2>::typed::weight(this->arguments[2], this); info<T3>::typed::weight(this->arguments[3], this); info<T4>::typed::weight(this->arguments[4], this); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 > void mark_pin(void (*)( T0& , pinned T1& , T2& , T3& , T4& )) { this->pin = &current(info<T1>::typed::dereference(this->arguments[1])); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 > void prototype_template(void (*)( T0& , T1& , pinned T2& , T3& , T4& )) { ( (void (*)( T0& , T1& , pinned T2& , T3& , T4& )) this->op ) ( info<T0>::typed::dereference(this->arguments[0]) , info<T1>::typed::dereference(this->arguments[1]) , marked info<T2>::typed::dereference(this->arguments[2]) , info<T3>::typed::dereference(this->arguments[3]) , info<T4>::typed::dereference(this->arguments[4]) ); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 > void cleanup_template(void (*)( T0& , T1& , pinned T2& , T3& , T4& )) { info<T0>::typed::deallocate(this->arguments[0]); info<T1>::typed::deallocate(this->arguments[1]); info<T2>::typed::deallocate(this->arguments[2]); info<T3>::typed::deallocate(this->arguments[3]); info<T4>::typed::deallocate(this->arguments[4]); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 > void creditup_template(void (*)( T0& , T1& , pinned T2& , T3& , T4& )) { info<T0>::typed::weight(this->arguments[0], this); info<T1>::typed::weight(this->arguments[1], this); info<T2>::typed::weight(this->arguments[2], this); info<T3>::typed::weight(this->arguments[3], this); info<T4>::typed::weight(this->arguments[4], this); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 > void mark_pin(void (*)( T0& , T1& , pinned T2& , T3& , T4& )) { this->pin = &current(info<T2>::typed::dereference(this->arguments[2])); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 > void prototype_template(void (*)( T0& , T1& , T2& , pinned T3& , T4& )) { ( (void (*)( T0& , T1& , T2& , pinned T3& , T4& )) this->op ) ( info<T0>::typed::dereference(this->arguments[0]) , info<T1>::typed::dereference(this->arguments[1]) , info<T2>::typed::dereference(this->arguments[2]) , marked info<T3>::typed::dereference(this->arguments[3]) , info<T4>::typed::dereference(this->arguments[4]) ); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 > void cleanup_template(void (*)( T0& , T1& , T2& , pinned T3& , T4& )) { info<T0>::typed::deallocate(this->arguments[0]); info<T1>::typed::deallocate(this->arguments[1]); info<T2>::typed::deallocate(this->arguments[2]); info<T3>::typed::deallocate(this->arguments[3]); info<T4>::typed::deallocate(this->arguments[4]); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 > void creditup_template(void (*)( T0& , T1& , T2& , pinned T3& , T4& )) { info<T0>::typed::weight(this->arguments[0], this); info<T1>::typed::weight(this->arguments[1], this); info<T2>::typed::weight(this->arguments[2], this); info<T3>::typed::weight(this->arguments[3], this); info<T4>::typed::weight(this->arguments[4], this); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 > void mark_pin(void (*)( T0& , T1& , T2& , pinned T3& , T4& )) { this->pin = &current(info<T3>::typed::dereference(this->arguments[3])); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 > void prototype_template(void (*)( T0& , T1& , T2& , T3& , pinned T4& )) { ( (void (*)( T0& , T1& , T2& , T3& , pinned T4& )) this->op ) ( info<T0>::typed::dereference(this->arguments[0]) , info<T1>::typed::dereference(this->arguments[1]) , info<T2>::typed::dereference(this->arguments[2]) , info<T3>::typed::dereference(this->arguments[3]) , marked info<T4>::typed::dereference(this->arguments[4]) ); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 > void cleanup_template(void (*)( T0& , T1& , T2& , T3& , pinned T4& )) { info<T0>::typed::deallocate(this->arguments[0]); info<T1>::typed::deallocate(this->arguments[1]); info<T2>::typed::deallocate(this->arguments[2]); info<T3>::typed::deallocate(this->arguments[3]); info<T4>::typed::deallocate(this->arguments[4]); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 > void creditup_template(void (*)( T0& , T1& , T2& , T3& , pinned T4& )) { info<T0>::typed::weight(this->arguments[0], this); info<T1>::typed::weight(this->arguments[1], this); info<T2>::typed::weight(this->arguments[2], this); info<T3>::typed::weight(this->arguments[3], this); info<T4>::typed::weight(this->arguments[4], this); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 > void mark_pin(void (*)( T0& , T1& , T2& , T3& , pinned T4& )) { this->pin = &current(info<T4>::typed::dereference(this->arguments[4])); }
template< typename FP, typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 >
operation( FP logistics, FP computing, T0 &arg0 , T1 &arg1 , T2 &arg2 , T3 &arg3 , T4 &arg4 , T5 &arg5 ){
    this->logistics_ptr = (void(*)())logistics;
    this->computing_ptr = (void(*)())computing;
    this->op = this->logistics_ptr;
    this->credit = 0;
    this->state = MARKUP;
    this->count = 6;
    this->arguments = (void**)malloc(sizeof(void*)*this->count);
    this->arguments[0] = (void*)info<T0>::typed::pointer(arg0); info<T0>::typed::modify(arg0, this); this->arguments[1] = (void*)info<T1>::typed::pointer(arg1); info<T1>::typed::modify(arg1, this); this->arguments[2] = (void*)info<T2>::typed::pointer(arg2); info<T2>::typed::modify(arg2, this); this->arguments[3] = (void*)info<T3>::typed::pointer(arg3); info<T3>::typed::modify(arg3, this); this->arguments[4] = (void*)info<T4>::typed::pointer(arg4); info<T4>::typed::modify(arg4, this); this->arguments[5] = (void*)info<T5>::typed::pointer(arg5); info<T5>::typed::modify(arg5, this);
    void(operation::*ptr)(FP); ptr = &operation::prototype_template;
    this->prototype = (void(operation::*)())ptr;
    ptr = &operation::cleanup_template;
    this->cleanup = (void(operation::*)())ptr;
    ptr = &operation::creditup_template;
    this->creditup = (void(operation::*)())ptr;
    this->mark_pin(logistics);
}
template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 >
void prototype_template(void (*)( T0& , T1& , T2& , T3& , T4& , T5& )){
    ( (void (*)( T0& , T1& , T2& , T3& , T4& , T5& )) this->op )
    ( info<T0>::typed::dereference(this->arguments[0]) , info<T1>::typed::dereference(this->arguments[1]) , info<T2>::typed::dereference(this->arguments[2]) , info<T3>::typed::dereference(this->arguments[3]) , info<T4>::typed::dereference(this->arguments[4]) , info<T5>::typed::dereference(this->arguments[5]) );
}
template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 >
void cleanup_template(void (*)( T0& , T1& , T2& , T3& , T4& , T5& )){
    info<T0>::typed::deallocate(this->arguments[0]); info<T1>::typed::deallocate(this->arguments[1]); info<T2>::typed::deallocate(this->arguments[2]); info<T3>::typed::deallocate(this->arguments[3]); info<T4>::typed::deallocate(this->arguments[4]); info<T5>::typed::deallocate(this->arguments[5]);
}
template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 >
void creditup_template(void (*)( T0& , T1& , T2& , T3& , T4& , T5& )){
    info<T0>::typed::weight(this->arguments[0], this); info<T1>::typed::weight(this->arguments[1], this); info<T2>::typed::weight(this->arguments[2], this); info<T3>::typed::weight(this->arguments[3], this); info<T4>::typed::weight(this->arguments[4], this); info<T5>::typed::weight(this->arguments[5], this);
}
template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 >
void mark_pin(void (*)( T0& , T1& , T2& , T3& , T4& , T5& )){
    this->pin = NULL;
}
template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 > void prototype_template(void (*)( pinned T0& , T1& , T2& , T3& , T4& , T5& )) { ( (void (*)( pinned T0& , T1& , T2& , T3& , T4& , T5& )) this->op ) ( marked info<T0>::typed::dereference(this->arguments[0]) , info<T1>::typed::dereference(this->arguments[1]) , info<T2>::typed::dereference(this->arguments[2]) , info<T3>::typed::dereference(this->arguments[3]) , info<T4>::typed::dereference(this->arguments[4]) , info<T5>::typed::dereference(this->arguments[5]) ); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 > void cleanup_template(void (*)( pinned T0& , T1& , T2& , T3& , T4& , T5& )) { info<T0>::typed::deallocate(this->arguments[0]); info<T1>::typed::deallocate(this->arguments[1]); info<T2>::typed::deallocate(this->arguments[2]); info<T3>::typed::deallocate(this->arguments[3]); info<T4>::typed::deallocate(this->arguments[4]); info<T5>::typed::deallocate(this->arguments[5]); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 > void creditup_template(void (*)( pinned T0& , T1& , T2& , T3& , T4& , T5& )) { info<T0>::typed::weight(this->arguments[0], this); info<T1>::typed::weight(this->arguments[1], this); info<T2>::typed::weight(this->arguments[2], this); info<T3>::typed::weight(this->arguments[3], this); info<T4>::typed::weight(this->arguments[4], this); info<T5>::typed::weight(this->arguments[5], this); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 > void mark_pin(void (*)( pinned T0& , T1& , T2& , T3& , T4& , T5& )) { this->pin = &current(info<T0>::typed::dereference(this->arguments[0])); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 > void prototype_template(void (*)( T0& , pinned T1& , T2& , T3& , T4& , T5& )) { ( (void (*)( T0& , pinned T1& , T2& , T3& , T4& , T5& )) this->op ) ( info<T0>::typed::dereference(this->arguments[0]) , marked info<T1>::typed::dereference(this->arguments[1]) , info<T2>::typed::dereference(this->arguments[2]) , info<T3>::typed::dereference(this->arguments[3]) , info<T4>::typed::dereference(this->arguments[4]) , info<T5>::typed::dereference(this->arguments[5]) ); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 > void cleanup_template(void (*)( T0& , pinned T1& , T2& , T3& , T4& , T5& )) { info<T0>::typed::deallocate(this->arguments[0]); info<T1>::typed::deallocate(this->arguments[1]); info<T2>::typed::deallocate(this->arguments[2]); info<T3>::typed::deallocate(this->arguments[3]); info<T4>::typed::deallocate(this->arguments[4]); info<T5>::typed::deallocate(this->arguments[5]); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 > void creditup_template(void (*)( T0& , pinned T1& , T2& , T3& , T4& , T5& )) { info<T0>::typed::weight(this->arguments[0], this); info<T1>::typed::weight(this->arguments[1], this); info<T2>::typed::weight(this->arguments[2], this); info<T3>::typed::weight(this->arguments[3], this); info<T4>::typed::weight(this->arguments[4], this); info<T5>::typed::weight(this->arguments[5], this); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 > void mark_pin(void (*)( T0& , pinned T1& , T2& , T3& , T4& , T5& )) { this->pin = &current(info<T1>::typed::dereference(this->arguments[1])); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 > void prototype_template(void (*)( T0& , T1& , pinned T2& , T3& , T4& , T5& )) { ( (void (*)( T0& , T1& , pinned T2& , T3& , T4& , T5& )) this->op ) ( info<T0>::typed::dereference(this->arguments[0]) , info<T1>::typed::dereference(this->arguments[1]) , marked info<T2>::typed::dereference(this->arguments[2]) , info<T3>::typed::dereference(this->arguments[3]) , info<T4>::typed::dereference(this->arguments[4]) , info<T5>::typed::dereference(this->arguments[5]) ); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 > void cleanup_template(void (*)( T0& , T1& , pinned T2& , T3& , T4& , T5& )) { info<T0>::typed::deallocate(this->arguments[0]); info<T1>::typed::deallocate(this->arguments[1]); info<T2>::typed::deallocate(this->arguments[2]); info<T3>::typed::deallocate(this->arguments[3]); info<T4>::typed::deallocate(this->arguments[4]); info<T5>::typed::deallocate(this->arguments[5]); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 > void creditup_template(void (*)( T0& , T1& , pinned T2& , T3& , T4& , T5& )) { info<T0>::typed::weight(this->arguments[0], this); info<T1>::typed::weight(this->arguments[1], this); info<T2>::typed::weight(this->arguments[2], this); info<T3>::typed::weight(this->arguments[3], this); info<T4>::typed::weight(this->arguments[4], this); info<T5>::typed::weight(this->arguments[5], this); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 > void mark_pin(void (*)( T0& , T1& , pinned T2& , T3& , T4& , T5& )) { this->pin = &current(info<T2>::typed::dereference(this->arguments[2])); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 > void prototype_template(void (*)( T0& , T1& , T2& , pinned T3& , T4& , T5& )) { ( (void (*)( T0& , T1& , T2& , pinned T3& , T4& , T5& )) this->op ) ( info<T0>::typed::dereference(this->arguments[0]) , info<T1>::typed::dereference(this->arguments[1]) , info<T2>::typed::dereference(this->arguments[2]) , marked info<T3>::typed::dereference(this->arguments[3]) , info<T4>::typed::dereference(this->arguments[4]) , info<T5>::typed::dereference(this->arguments[5]) ); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 > void cleanup_template(void (*)( T0& , T1& , T2& , pinned T3& , T4& , T5& )) { info<T0>::typed::deallocate(this->arguments[0]); info<T1>::typed::deallocate(this->arguments[1]); info<T2>::typed::deallocate(this->arguments[2]); info<T3>::typed::deallocate(this->arguments[3]); info<T4>::typed::deallocate(this->arguments[4]); info<T5>::typed::deallocate(this->arguments[5]); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 > void creditup_template(void (*)( T0& , T1& , T2& , pinned T3& , T4& , T5& )) { info<T0>::typed::weight(this->arguments[0], this); info<T1>::typed::weight(this->arguments[1], this); info<T2>::typed::weight(this->arguments[2], this); info<T3>::typed::weight(this->arguments[3], this); info<T4>::typed::weight(this->arguments[4], this); info<T5>::typed::weight(this->arguments[5], this); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 > void mark_pin(void (*)( T0& , T1& , T2& , pinned T3& , T4& , T5& )) { this->pin = &current(info<T3>::typed::dereference(this->arguments[3])); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 > void prototype_template(void (*)( T0& , T1& , T2& , T3& , pinned T4& , T5& )) { ( (void (*)( T0& , T1& , T2& , T3& , pinned T4& , T5& )) this->op ) ( info<T0>::typed::dereference(this->arguments[0]) , info<T1>::typed::dereference(this->arguments[1]) , info<T2>::typed::dereference(this->arguments[2]) , info<T3>::typed::dereference(this->arguments[3]) , marked info<T4>::typed::dereference(this->arguments[4]) , info<T5>::typed::dereference(this->arguments[5]) ); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 > void cleanup_template(void (*)( T0& , T1& , T2& , T3& , pinned T4& , T5& )) { info<T0>::typed::deallocate(this->arguments[0]); info<T1>::typed::deallocate(this->arguments[1]); info<T2>::typed::deallocate(this->arguments[2]); info<T3>::typed::deallocate(this->arguments[3]); info<T4>::typed::deallocate(this->arguments[4]); info<T5>::typed::deallocate(this->arguments[5]); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 > void creditup_template(void (*)( T0& , T1& , T2& , T3& , pinned T4& , T5& )) { info<T0>::typed::weight(this->arguments[0], this); info<T1>::typed::weight(this->arguments[1], this); info<T2>::typed::weight(this->arguments[2], this); info<T3>::typed::weight(this->arguments[3], this); info<T4>::typed::weight(this->arguments[4], this); info<T5>::typed::weight(this->arguments[5], this); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 > void mark_pin(void (*)( T0& , T1& , T2& , T3& , pinned T4& , T5& )) { this->pin = &current(info<T4>::typed::dereference(this->arguments[4])); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 > void prototype_template(void (*)( T0& , T1& , T2& , T3& , T4& , pinned T5& )) { ( (void (*)( T0& , T1& , T2& , T3& , T4& , pinned T5& )) this->op ) ( info<T0>::typed::dereference(this->arguments[0]) , info<T1>::typed::dereference(this->arguments[1]) , info<T2>::typed::dereference(this->arguments[2]) , info<T3>::typed::dereference(this->arguments[3]) , info<T4>::typed::dereference(this->arguments[4]) , marked info<T5>::typed::dereference(this->arguments[5]) ); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 > void cleanup_template(void (*)( T0& , T1& , T2& , T3& , T4& , pinned T5& )) { info<T0>::typed::deallocate(this->arguments[0]); info<T1>::typed::deallocate(this->arguments[1]); info<T2>::typed::deallocate(this->arguments[2]); info<T3>::typed::deallocate(this->arguments[3]); info<T4>::typed::deallocate(this->arguments[4]); info<T5>::typed::deallocate(this->arguments[5]); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 > void creditup_template(void (*)( T0& , T1& , T2& , T3& , T4& , pinned T5& )) { info<T0>::typed::weight(this->arguments[0], this); info<T1>::typed::weight(this->arguments[1], this); info<T2>::typed::weight(this->arguments[2], this); info<T3>::typed::weight(this->arguments[3], this); info<T4>::typed::weight(this->arguments[4], this); info<T5>::typed::weight(this->arguments[5], this); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 > void mark_pin(void (*)( T0& , T1& , T2& , T3& , T4& , pinned T5& )) { this->pin = &current(info<T5>::typed::dereference(this->arguments[5])); }
template< typename FP, typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 >
operation( FP logistics, FP computing, T0 &arg0 , T1 &arg1 , T2 &arg2 , T3 &arg3 , T4 &arg4 , T5 &arg5 , T6 &arg6 ){
    this->logistics_ptr = (void(*)())logistics;
    this->computing_ptr = (void(*)())computing;
    this->op = this->logistics_ptr;
    this->credit = 0;
    this->state = MARKUP;
    this->count = 7;
    this->arguments = (void**)malloc(sizeof(void*)*this->count);
    this->arguments[0] = (void*)info<T0>::typed::pointer(arg0); info<T0>::typed::modify(arg0, this); this->arguments[1] = (void*)info<T1>::typed::pointer(arg1); info<T1>::typed::modify(arg1, this); this->arguments[2] = (void*)info<T2>::typed::pointer(arg2); info<T2>::typed::modify(arg2, this); this->arguments[3] = (void*)info<T3>::typed::pointer(arg3); info<T3>::typed::modify(arg3, this); this->arguments[4] = (void*)info<T4>::typed::pointer(arg4); info<T4>::typed::modify(arg4, this); this->arguments[5] = (void*)info<T5>::typed::pointer(arg5); info<T5>::typed::modify(arg5, this); this->arguments[6] = (void*)info<T6>::typed::pointer(arg6); info<T6>::typed::modify(arg6, this);
    void(operation::*ptr)(FP); ptr = &operation::prototype_template;
    this->prototype = (void(operation::*)())ptr;
    ptr = &operation::cleanup_template;
    this->cleanup = (void(operation::*)())ptr;
    ptr = &operation::creditup_template;
    this->creditup = (void(operation::*)())ptr;
    this->mark_pin(logistics);
}
template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 >
void prototype_template(void (*)( T0& , T1& , T2& , T3& , T4& , T5& , T6& )){
    ( (void (*)( T0& , T1& , T2& , T3& , T4& , T5& , T6& )) this->op )
    ( info<T0>::typed::dereference(this->arguments[0]) , info<T1>::typed::dereference(this->arguments[1]) , info<T2>::typed::dereference(this->arguments[2]) , info<T3>::typed::dereference(this->arguments[3]) , info<T4>::typed::dereference(this->arguments[4]) , info<T5>::typed::dereference(this->arguments[5]) , info<T6>::typed::dereference(this->arguments[6]) );
}
template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 >
void cleanup_template(void (*)( T0& , T1& , T2& , T3& , T4& , T5& , T6& )){
    info<T0>::typed::deallocate(this->arguments[0]); info<T1>::typed::deallocate(this->arguments[1]); info<T2>::typed::deallocate(this->arguments[2]); info<T3>::typed::deallocate(this->arguments[3]); info<T4>::typed::deallocate(this->arguments[4]); info<T5>::typed::deallocate(this->arguments[5]); info<T6>::typed::deallocate(this->arguments[6]);
}
template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 >
void creditup_template(void (*)( T0& , T1& , T2& , T3& , T4& , T5& , T6& )){
    info<T0>::typed::weight(this->arguments[0], this); info<T1>::typed::weight(this->arguments[1], this); info<T2>::typed::weight(this->arguments[2], this); info<T3>::typed::weight(this->arguments[3], this); info<T4>::typed::weight(this->arguments[4], this); info<T5>::typed::weight(this->arguments[5], this); info<T6>::typed::weight(this->arguments[6], this);
}
template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 >
void mark_pin(void (*)( T0& , T1& , T2& , T3& , T4& , T5& , T6& )){
    this->pin = NULL;
}
template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 > void prototype_template(void (*)( pinned T0& , T1& , T2& , T3& , T4& , T5& , T6& )) { ( (void (*)( pinned T0& , T1& , T2& , T3& , T4& , T5& , T6& )) this->op ) ( marked info<T0>::typed::dereference(this->arguments[0]) , info<T1>::typed::dereference(this->arguments[1]) , info<T2>::typed::dereference(this->arguments[2]) , info<T3>::typed::dereference(this->arguments[3]) , info<T4>::typed::dereference(this->arguments[4]) , info<T5>::typed::dereference(this->arguments[5]) , info<T6>::typed::dereference(this->arguments[6]) ); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 > void cleanup_template(void (*)( pinned T0& , T1& , T2& , T3& , T4& , T5& , T6& )) { info<T0>::typed::deallocate(this->arguments[0]); info<T1>::typed::deallocate(this->arguments[1]); info<T2>::typed::deallocate(this->arguments[2]); info<T3>::typed::deallocate(this->arguments[3]); info<T4>::typed::deallocate(this->arguments[4]); info<T5>::typed::deallocate(this->arguments[5]); info<T6>::typed::deallocate(this->arguments[6]); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 > void creditup_template(void (*)( pinned T0& , T1& , T2& , T3& , T4& , T5& , T6& )) { info<T0>::typed::weight(this->arguments[0], this); info<T1>::typed::weight(this->arguments[1], this); info<T2>::typed::weight(this->arguments[2], this); info<T3>::typed::weight(this->arguments[3], this); info<T4>::typed::weight(this->arguments[4], this); info<T5>::typed::weight(this->arguments[5], this); info<T6>::typed::weight(this->arguments[6], this); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 > void mark_pin(void (*)( pinned T0& , T1& , T2& , T3& , T4& , T5& , T6& )) { this->pin = &current(info<T0>::typed::dereference(this->arguments[0])); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 > void prototype_template(void (*)( T0& , pinned T1& , T2& , T3& , T4& , T5& , T6& )) { ( (void (*)( T0& , pinned T1& , T2& , T3& , T4& , T5& , T6& )) this->op ) ( info<T0>::typed::dereference(this->arguments[0]) , marked info<T1>::typed::dereference(this->arguments[1]) , info<T2>::typed::dereference(this->arguments[2]) , info<T3>::typed::dereference(this->arguments[3]) , info<T4>::typed::dereference(this->arguments[4]) , info<T5>::typed::dereference(this->arguments[5]) , info<T6>::typed::dereference(this->arguments[6]) ); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 > void cleanup_template(void (*)( T0& , pinned T1& , T2& , T3& , T4& , T5& , T6& )) { info<T0>::typed::deallocate(this->arguments[0]); info<T1>::typed::deallocate(this->arguments[1]); info<T2>::typed::deallocate(this->arguments[2]); info<T3>::typed::deallocate(this->arguments[3]); info<T4>::typed::deallocate(this->arguments[4]); info<T5>::typed::deallocate(this->arguments[5]); info<T6>::typed::deallocate(this->arguments[6]); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 > void creditup_template(void (*)( T0& , pinned T1& , T2& , T3& , T4& , T5& , T6& )) { info<T0>::typed::weight(this->arguments[0], this); info<T1>::typed::weight(this->arguments[1], this); info<T2>::typed::weight(this->arguments[2], this); info<T3>::typed::weight(this->arguments[3], this); info<T4>::typed::weight(this->arguments[4], this); info<T5>::typed::weight(this->arguments[5], this); info<T6>::typed::weight(this->arguments[6], this); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 > void mark_pin(void (*)( T0& , pinned T1& , T2& , T3& , T4& , T5& , T6& )) { this->pin = &current(info<T1>::typed::dereference(this->arguments[1])); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 > void prototype_template(void (*)( T0& , T1& , pinned T2& , T3& , T4& , T5& , T6& )) { ( (void (*)( T0& , T1& , pinned T2& , T3& , T4& , T5& , T6& )) this->op ) ( info<T0>::typed::dereference(this->arguments[0]) , info<T1>::typed::dereference(this->arguments[1]) , marked info<T2>::typed::dereference(this->arguments[2]) , info<T3>::typed::dereference(this->arguments[3]) , info<T4>::typed::dereference(this->arguments[4]) , info<T5>::typed::dereference(this->arguments[5]) , info<T6>::typed::dereference(this->arguments[6]) ); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 > void cleanup_template(void (*)( T0& , T1& , pinned T2& , T3& , T4& , T5& , T6& )) { info<T0>::typed::deallocate(this->arguments[0]); info<T1>::typed::deallocate(this->arguments[1]); info<T2>::typed::deallocate(this->arguments[2]); info<T3>::typed::deallocate(this->arguments[3]); info<T4>::typed::deallocate(this->arguments[4]); info<T5>::typed::deallocate(this->arguments[5]); info<T6>::typed::deallocate(this->arguments[6]); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 > void creditup_template(void (*)( T0& , T1& , pinned T2& , T3& , T4& , T5& , T6& )) { info<T0>::typed::weight(this->arguments[0], this); info<T1>::typed::weight(this->arguments[1], this); info<T2>::typed::weight(this->arguments[2], this); info<T3>::typed::weight(this->arguments[3], this); info<T4>::typed::weight(this->arguments[4], this); info<T5>::typed::weight(this->arguments[5], this); info<T6>::typed::weight(this->arguments[6], this); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 > void mark_pin(void (*)( T0& , T1& , pinned T2& , T3& , T4& , T5& , T6& )) { this->pin = &current(info<T2>::typed::dereference(this->arguments[2])); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 > void prototype_template(void (*)( T0& , T1& , T2& , pinned T3& , T4& , T5& , T6& )) { ( (void (*)( T0& , T1& , T2& , pinned T3& , T4& , T5& , T6& )) this->op ) ( info<T0>::typed::dereference(this->arguments[0]) , info<T1>::typed::dereference(this->arguments[1]) , info<T2>::typed::dereference(this->arguments[2]) , marked info<T3>::typed::dereference(this->arguments[3]) , info<T4>::typed::dereference(this->arguments[4]) , info<T5>::typed::dereference(this->arguments[5]) , info<T6>::typed::dereference(this->arguments[6]) ); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 > void cleanup_template(void (*)( T0& , T1& , T2& , pinned T3& , T4& , T5& , T6& )) { info<T0>::typed::deallocate(this->arguments[0]); info<T1>::typed::deallocate(this->arguments[1]); info<T2>::typed::deallocate(this->arguments[2]); info<T3>::typed::deallocate(this->arguments[3]); info<T4>::typed::deallocate(this->arguments[4]); info<T5>::typed::deallocate(this->arguments[5]); info<T6>::typed::deallocate(this->arguments[6]); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 > void creditup_template(void (*)( T0& , T1& , T2& , pinned T3& , T4& , T5& , T6& )) { info<T0>::typed::weight(this->arguments[0], this); info<T1>::typed::weight(this->arguments[1], this); info<T2>::typed::weight(this->arguments[2], this); info<T3>::typed::weight(this->arguments[3], this); info<T4>::typed::weight(this->arguments[4], this); info<T5>::typed::weight(this->arguments[5], this); info<T6>::typed::weight(this->arguments[6], this); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 > void mark_pin(void (*)( T0& , T1& , T2& , pinned T3& , T4& , T5& , T6& )) { this->pin = &current(info<T3>::typed::dereference(this->arguments[3])); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 > void prototype_template(void (*)( T0& , T1& , T2& , T3& , pinned T4& , T5& , T6& )) { ( (void (*)( T0& , T1& , T2& , T3& , pinned T4& , T5& , T6& )) this->op ) ( info<T0>::typed::dereference(this->arguments[0]) , info<T1>::typed::dereference(this->arguments[1]) , info<T2>::typed::dereference(this->arguments[2]) , info<T3>::typed::dereference(this->arguments[3]) , marked info<T4>::typed::dereference(this->arguments[4]) , info<T5>::typed::dereference(this->arguments[5]) , info<T6>::typed::dereference(this->arguments[6]) ); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 > void cleanup_template(void (*)( T0& , T1& , T2& , T3& , pinned T4& , T5& , T6& )) { info<T0>::typed::deallocate(this->arguments[0]); info<T1>::typed::deallocate(this->arguments[1]); info<T2>::typed::deallocate(this->arguments[2]); info<T3>::typed::deallocate(this->arguments[3]); info<T4>::typed::deallocate(this->arguments[4]); info<T5>::typed::deallocate(this->arguments[5]); info<T6>::typed::deallocate(this->arguments[6]); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 > void creditup_template(void (*)( T0& , T1& , T2& , T3& , pinned T4& , T5& , T6& )) { info<T0>::typed::weight(this->arguments[0], this); info<T1>::typed::weight(this->arguments[1], this); info<T2>::typed::weight(this->arguments[2], this); info<T3>::typed::weight(this->arguments[3], this); info<T4>::typed::weight(this->arguments[4], this); info<T5>::typed::weight(this->arguments[5], this); info<T6>::typed::weight(this->arguments[6], this); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 > void mark_pin(void (*)( T0& , T1& , T2& , T3& , pinned T4& , T5& , T6& )) { this->pin = &current(info<T4>::typed::dereference(this->arguments[4])); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 > void prototype_template(void (*)( T0& , T1& , T2& , T3& , T4& , pinned T5& , T6& )) { ( (void (*)( T0& , T1& , T2& , T3& , T4& , pinned T5& , T6& )) this->op ) ( info<T0>::typed::dereference(this->arguments[0]) , info<T1>::typed::dereference(this->arguments[1]) , info<T2>::typed::dereference(this->arguments[2]) , info<T3>::typed::dereference(this->arguments[3]) , info<T4>::typed::dereference(this->arguments[4]) , marked info<T5>::typed::dereference(this->arguments[5]) , info<T6>::typed::dereference(this->arguments[6]) ); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 > void cleanup_template(void (*)( T0& , T1& , T2& , T3& , T4& , pinned T5& , T6& )) { info<T0>::typed::deallocate(this->arguments[0]); info<T1>::typed::deallocate(this->arguments[1]); info<T2>::typed::deallocate(this->arguments[2]); info<T3>::typed::deallocate(this->arguments[3]); info<T4>::typed::deallocate(this->arguments[4]); info<T5>::typed::deallocate(this->arguments[5]); info<T6>::typed::deallocate(this->arguments[6]); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 > void creditup_template(void (*)( T0& , T1& , T2& , T3& , T4& , pinned T5& , T6& )) { info<T0>::typed::weight(this->arguments[0], this); info<T1>::typed::weight(this->arguments[1], this); info<T2>::typed::weight(this->arguments[2], this); info<T3>::typed::weight(this->arguments[3], this); info<T4>::typed::weight(this->arguments[4], this); info<T5>::typed::weight(this->arguments[5], this); info<T6>::typed::weight(this->arguments[6], this); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 > void mark_pin(void (*)( T0& , T1& , T2& , T3& , T4& , pinned T5& , T6& )) { this->pin = &current(info<T5>::typed::dereference(this->arguments[5])); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 > void prototype_template(void (*)( T0& , T1& , T2& , T3& , T4& , T5& , pinned T6& )) { ( (void (*)( T0& , T1& , T2& , T3& , T4& , T5& , pinned T6& )) this->op ) ( info<T0>::typed::dereference(this->arguments[0]) , info<T1>::typed::dereference(this->arguments[1]) , info<T2>::typed::dereference(this->arguments[2]) , info<T3>::typed::dereference(this->arguments[3]) , info<T4>::typed::dereference(this->arguments[4]) , info<T5>::typed::dereference(this->arguments[5]) , marked info<T6>::typed::dereference(this->arguments[6]) ); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 > void cleanup_template(void (*)( T0& , T1& , T2& , T3& , T4& , T5& , pinned T6& )) { info<T0>::typed::deallocate(this->arguments[0]); info<T1>::typed::deallocate(this->arguments[1]); info<T2>::typed::deallocate(this->arguments[2]); info<T3>::typed::deallocate(this->arguments[3]); info<T4>::typed::deallocate(this->arguments[4]); info<T5>::typed::deallocate(this->arguments[5]); info<T6>::typed::deallocate(this->arguments[6]); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 > void creditup_template(void (*)( T0& , T1& , T2& , T3& , T4& , T5& , pinned T6& )) { info<T0>::typed::weight(this->arguments[0], this); info<T1>::typed::weight(this->arguments[1], this); info<T2>::typed::weight(this->arguments[2], this); info<T3>::typed::weight(this->arguments[3], this); info<T4>::typed::weight(this->arguments[4], this); info<T5>::typed::weight(this->arguments[5], this); info<T6>::typed::weight(this->arguments[6], this); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 > void mark_pin(void (*)( T0& , T1& , T2& , T3& , T4& , T5& , pinned T6& )) { this->pin = &current(info<T6>::typed::dereference(this->arguments[6])); }
template< typename FP, typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 >
operation( FP logistics, FP computing, T0 &arg0 , T1 &arg1 , T2 &arg2 , T3 &arg3 , T4 &arg4 , T5 &arg5 , T6 &arg6 , T7 &arg7 ){
    this->logistics_ptr = (void(*)())logistics;
    this->computing_ptr = (void(*)())computing;
    this->op = this->logistics_ptr;
    this->credit = 0;
    this->state = MARKUP;
    this->count = 8;
    this->arguments = (void**)malloc(sizeof(void*)*this->count);
    this->arguments[0] = (void*)info<T0>::typed::pointer(arg0); info<T0>::typed::modify(arg0, this); this->arguments[1] = (void*)info<T1>::typed::pointer(arg1); info<T1>::typed::modify(arg1, this); this->arguments[2] = (void*)info<T2>::typed::pointer(arg2); info<T2>::typed::modify(arg2, this); this->arguments[3] = (void*)info<T3>::typed::pointer(arg3); info<T3>::typed::modify(arg3, this); this->arguments[4] = (void*)info<T4>::typed::pointer(arg4); info<T4>::typed::modify(arg4, this); this->arguments[5] = (void*)info<T5>::typed::pointer(arg5); info<T5>::typed::modify(arg5, this); this->arguments[6] = (void*)info<T6>::typed::pointer(arg6); info<T6>::typed::modify(arg6, this); this->arguments[7] = (void*)info<T7>::typed::pointer(arg7); info<T7>::typed::modify(arg7, this);
    void(operation::*ptr)(FP); ptr = &operation::prototype_template;
    this->prototype = (void(operation::*)())ptr;
    ptr = &operation::cleanup_template;
    this->cleanup = (void(operation::*)())ptr;
    ptr = &operation::creditup_template;
    this->creditup = (void(operation::*)())ptr;
    this->mark_pin(logistics);
}
template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 >
void prototype_template(void (*)( T0& , T1& , T2& , T3& , T4& , T5& , T6& , T7& )){
    ( (void (*)( T0& , T1& , T2& , T3& , T4& , T5& , T6& , T7& )) this->op )
    ( info<T0>::typed::dereference(this->arguments[0]) , info<T1>::typed::dereference(this->arguments[1]) , info<T2>::typed::dereference(this->arguments[2]) , info<T3>::typed::dereference(this->arguments[3]) , info<T4>::typed::dereference(this->arguments[4]) , info<T5>::typed::dereference(this->arguments[5]) , info<T6>::typed::dereference(this->arguments[6]) , info<T7>::typed::dereference(this->arguments[7]) );
}
template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 >
void cleanup_template(void (*)( T0& , T1& , T2& , T3& , T4& , T5& , T6& , T7& )){
    info<T0>::typed::deallocate(this->arguments[0]); info<T1>::typed::deallocate(this->arguments[1]); info<T2>::typed::deallocate(this->arguments[2]); info<T3>::typed::deallocate(this->arguments[3]); info<T4>::typed::deallocate(this->arguments[4]); info<T5>::typed::deallocate(this->arguments[5]); info<T6>::typed::deallocate(this->arguments[6]); info<T7>::typed::deallocate(this->arguments[7]);
}
template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 >
void creditup_template(void (*)( T0& , T1& , T2& , T3& , T4& , T5& , T6& , T7& )){
    info<T0>::typed::weight(this->arguments[0], this); info<T1>::typed::weight(this->arguments[1], this); info<T2>::typed::weight(this->arguments[2], this); info<T3>::typed::weight(this->arguments[3], this); info<T4>::typed::weight(this->arguments[4], this); info<T5>::typed::weight(this->arguments[5], this); info<T6>::typed::weight(this->arguments[6], this); info<T7>::typed::weight(this->arguments[7], this);
}
template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 >
void mark_pin(void (*)( T0& , T1& , T2& , T3& , T4& , T5& , T6& , T7& )){
    this->pin = NULL;
}
template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 > void prototype_template(void (*)( pinned T0& , T1& , T2& , T3& , T4& , T5& , T6& , T7& )) { ( (void (*)( pinned T0& , T1& , T2& , T3& , T4& , T5& , T6& , T7& )) this->op ) ( marked info<T0>::typed::dereference(this->arguments[0]) , info<T1>::typed::dereference(this->arguments[1]) , info<T2>::typed::dereference(this->arguments[2]) , info<T3>::typed::dereference(this->arguments[3]) , info<T4>::typed::dereference(this->arguments[4]) , info<T5>::typed::dereference(this->arguments[5]) , info<T6>::typed::dereference(this->arguments[6]) , info<T7>::typed::dereference(this->arguments[7]) ); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 > void cleanup_template(void (*)( pinned T0& , T1& , T2& , T3& , T4& , T5& , T6& , T7& )) { info<T0>::typed::deallocate(this->arguments[0]); info<T1>::typed::deallocate(this->arguments[1]); info<T2>::typed::deallocate(this->arguments[2]); info<T3>::typed::deallocate(this->arguments[3]); info<T4>::typed::deallocate(this->arguments[4]); info<T5>::typed::deallocate(this->arguments[5]); info<T6>::typed::deallocate(this->arguments[6]); info<T7>::typed::deallocate(this->arguments[7]); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 > void creditup_template(void (*)( pinned T0& , T1& , T2& , T3& , T4& , T5& , T6& , T7& )) { info<T0>::typed::weight(this->arguments[0], this); info<T1>::typed::weight(this->arguments[1], this); info<T2>::typed::weight(this->arguments[2], this); info<T3>::typed::weight(this->arguments[3], this); info<T4>::typed::weight(this->arguments[4], this); info<T5>::typed::weight(this->arguments[5], this); info<T6>::typed::weight(this->arguments[6], this); info<T7>::typed::weight(this->arguments[7], this); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 > void mark_pin(void (*)( pinned T0& , T1& , T2& , T3& , T4& , T5& , T6& , T7& )) { this->pin = &current(info<T0>::typed::dereference(this->arguments[0])); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 > void prototype_template(void (*)( T0& , pinned T1& , T2& , T3& , T4& , T5& , T6& , T7& )) { ( (void (*)( T0& , pinned T1& , T2& , T3& , T4& , T5& , T6& , T7& )) this->op ) ( info<T0>::typed::dereference(this->arguments[0]) , marked info<T1>::typed::dereference(this->arguments[1]) , info<T2>::typed::dereference(this->arguments[2]) , info<T3>::typed::dereference(this->arguments[3]) , info<T4>::typed::dereference(this->arguments[4]) , info<T5>::typed::dereference(this->arguments[5]) , info<T6>::typed::dereference(this->arguments[6]) , info<T7>::typed::dereference(this->arguments[7]) ); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 > void cleanup_template(void (*)( T0& , pinned T1& , T2& , T3& , T4& , T5& , T6& , T7& )) { info<T0>::typed::deallocate(this->arguments[0]); info<T1>::typed::deallocate(this->arguments[1]); info<T2>::typed::deallocate(this->arguments[2]); info<T3>::typed::deallocate(this->arguments[3]); info<T4>::typed::deallocate(this->arguments[4]); info<T5>::typed::deallocate(this->arguments[5]); info<T6>::typed::deallocate(this->arguments[6]); info<T7>::typed::deallocate(this->arguments[7]); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 > void creditup_template(void (*)( T0& , pinned T1& , T2& , T3& , T4& , T5& , T6& , T7& )) { info<T0>::typed::weight(this->arguments[0], this); info<T1>::typed::weight(this->arguments[1], this); info<T2>::typed::weight(this->arguments[2], this); info<T3>::typed::weight(this->arguments[3], this); info<T4>::typed::weight(this->arguments[4], this); info<T5>::typed::weight(this->arguments[5], this); info<T6>::typed::weight(this->arguments[6], this); info<T7>::typed::weight(this->arguments[7], this); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 > void mark_pin(void (*)( T0& , pinned T1& , T2& , T3& , T4& , T5& , T6& , T7& )) { this->pin = &current(info<T1>::typed::dereference(this->arguments[1])); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 > void prototype_template(void (*)( T0& , T1& , pinned T2& , T3& , T4& , T5& , T6& , T7& )) { ( (void (*)( T0& , T1& , pinned T2& , T3& , T4& , T5& , T6& , T7& )) this->op ) ( info<T0>::typed::dereference(this->arguments[0]) , info<T1>::typed::dereference(this->arguments[1]) , marked info<T2>::typed::dereference(this->arguments[2]) , info<T3>::typed::dereference(this->arguments[3]) , info<T4>::typed::dereference(this->arguments[4]) , info<T5>::typed::dereference(this->arguments[5]) , info<T6>::typed::dereference(this->arguments[6]) , info<T7>::typed::dereference(this->arguments[7]) ); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 > void cleanup_template(void (*)( T0& , T1& , pinned T2& , T3& , T4& , T5& , T6& , T7& )) { info<T0>::typed::deallocate(this->arguments[0]); info<T1>::typed::deallocate(this->arguments[1]); info<T2>::typed::deallocate(this->arguments[2]); info<T3>::typed::deallocate(this->arguments[3]); info<T4>::typed::deallocate(this->arguments[4]); info<T5>::typed::deallocate(this->arguments[5]); info<T6>::typed::deallocate(this->arguments[6]); info<T7>::typed::deallocate(this->arguments[7]); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 > void creditup_template(void (*)( T0& , T1& , pinned T2& , T3& , T4& , T5& , T6& , T7& )) { info<T0>::typed::weight(this->arguments[0], this); info<T1>::typed::weight(this->arguments[1], this); info<T2>::typed::weight(this->arguments[2], this); info<T3>::typed::weight(this->arguments[3], this); info<T4>::typed::weight(this->arguments[4], this); info<T5>::typed::weight(this->arguments[5], this); info<T6>::typed::weight(this->arguments[6], this); info<T7>::typed::weight(this->arguments[7], this); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 > void mark_pin(void (*)( T0& , T1& , pinned T2& , T3& , T4& , T5& , T6& , T7& )) { this->pin = &current(info<T2>::typed::dereference(this->arguments[2])); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 > void prototype_template(void (*)( T0& , T1& , T2& , pinned T3& , T4& , T5& , T6& , T7& )) { ( (void (*)( T0& , T1& , T2& , pinned T3& , T4& , T5& , T6& , T7& )) this->op ) ( info<T0>::typed::dereference(this->arguments[0]) , info<T1>::typed::dereference(this->arguments[1]) , info<T2>::typed::dereference(this->arguments[2]) , marked info<T3>::typed::dereference(this->arguments[3]) , info<T4>::typed::dereference(this->arguments[4]) , info<T5>::typed::dereference(this->arguments[5]) , info<T6>::typed::dereference(this->arguments[6]) , info<T7>::typed::dereference(this->arguments[7]) ); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 > void cleanup_template(void (*)( T0& , T1& , T2& , pinned T3& , T4& , T5& , T6& , T7& )) { info<T0>::typed::deallocate(this->arguments[0]); info<T1>::typed::deallocate(this->arguments[1]); info<T2>::typed::deallocate(this->arguments[2]); info<T3>::typed::deallocate(this->arguments[3]); info<T4>::typed::deallocate(this->arguments[4]); info<T5>::typed::deallocate(this->arguments[5]); info<T6>::typed::deallocate(this->arguments[6]); info<T7>::typed::deallocate(this->arguments[7]); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 > void creditup_template(void (*)( T0& , T1& , T2& , pinned T3& , T4& , T5& , T6& , T7& )) { info<T0>::typed::weight(this->arguments[0], this); info<T1>::typed::weight(this->arguments[1], this); info<T2>::typed::weight(this->arguments[2], this); info<T3>::typed::weight(this->arguments[3], this); info<T4>::typed::weight(this->arguments[4], this); info<T5>::typed::weight(this->arguments[5], this); info<T6>::typed::weight(this->arguments[6], this); info<T7>::typed::weight(this->arguments[7], this); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 > void mark_pin(void (*)( T0& , T1& , T2& , pinned T3& , T4& , T5& , T6& , T7& )) { this->pin = &current(info<T3>::typed::dereference(this->arguments[3])); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 > void prototype_template(void (*)( T0& , T1& , T2& , T3& , pinned T4& , T5& , T6& , T7& )) { ( (void (*)( T0& , T1& , T2& , T3& , pinned T4& , T5& , T6& , T7& )) this->op ) ( info<T0>::typed::dereference(this->arguments[0]) , info<T1>::typed::dereference(this->arguments[1]) , info<T2>::typed::dereference(this->arguments[2]) , info<T3>::typed::dereference(this->arguments[3]) , marked info<T4>::typed::dereference(this->arguments[4]) , info<T5>::typed::dereference(this->arguments[5]) , info<T6>::typed::dereference(this->arguments[6]) , info<T7>::typed::dereference(this->arguments[7]) ); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 > void cleanup_template(void (*)( T0& , T1& , T2& , T3& , pinned T4& , T5& , T6& , T7& )) { info<T0>::typed::deallocate(this->arguments[0]); info<T1>::typed::deallocate(this->arguments[1]); info<T2>::typed::deallocate(this->arguments[2]); info<T3>::typed::deallocate(this->arguments[3]); info<T4>::typed::deallocate(this->arguments[4]); info<T5>::typed::deallocate(this->arguments[5]); info<T6>::typed::deallocate(this->arguments[6]); info<T7>::typed::deallocate(this->arguments[7]); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 > void creditup_template(void (*)( T0& , T1& , T2& , T3& , pinned T4& , T5& , T6& , T7& )) { info<T0>::typed::weight(this->arguments[0], this); info<T1>::typed::weight(this->arguments[1], this); info<T2>::typed::weight(this->arguments[2], this); info<T3>::typed::weight(this->arguments[3], this); info<T4>::typed::weight(this->arguments[4], this); info<T5>::typed::weight(this->arguments[5], this); info<T6>::typed::weight(this->arguments[6], this); info<T7>::typed::weight(this->arguments[7], this); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 > void mark_pin(void (*)( T0& , T1& , T2& , T3& , pinned T4& , T5& , T6& , T7& )) { this->pin = &current(info<T4>::typed::dereference(this->arguments[4])); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 > void prototype_template(void (*)( T0& , T1& , T2& , T3& , T4& , pinned T5& , T6& , T7& )) { ( (void (*)( T0& , T1& , T2& , T3& , T4& , pinned T5& , T6& , T7& )) this->op ) ( info<T0>::typed::dereference(this->arguments[0]) , info<T1>::typed::dereference(this->arguments[1]) , info<T2>::typed::dereference(this->arguments[2]) , info<T3>::typed::dereference(this->arguments[3]) , info<T4>::typed::dereference(this->arguments[4]) , marked info<T5>::typed::dereference(this->arguments[5]) , info<T6>::typed::dereference(this->arguments[6]) , info<T7>::typed::dereference(this->arguments[7]) ); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 > void cleanup_template(void (*)( T0& , T1& , T2& , T3& , T4& , pinned T5& , T6& , T7& )) { info<T0>::typed::deallocate(this->arguments[0]); info<T1>::typed::deallocate(this->arguments[1]); info<T2>::typed::deallocate(this->arguments[2]); info<T3>::typed::deallocate(this->arguments[3]); info<T4>::typed::deallocate(this->arguments[4]); info<T5>::typed::deallocate(this->arguments[5]); info<T6>::typed::deallocate(this->arguments[6]); info<T7>::typed::deallocate(this->arguments[7]); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 > void creditup_template(void (*)( T0& , T1& , T2& , T3& , T4& , pinned T5& , T6& , T7& )) { info<T0>::typed::weight(this->arguments[0], this); info<T1>::typed::weight(this->arguments[1], this); info<T2>::typed::weight(this->arguments[2], this); info<T3>::typed::weight(this->arguments[3], this); info<T4>::typed::weight(this->arguments[4], this); info<T5>::typed::weight(this->arguments[5], this); info<T6>::typed::weight(this->arguments[6], this); info<T7>::typed::weight(this->arguments[7], this); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 > void mark_pin(void (*)( T0& , T1& , T2& , T3& , T4& , pinned T5& , T6& , T7& )) { this->pin = &current(info<T5>::typed::dereference(this->arguments[5])); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 > void prototype_template(void (*)( T0& , T1& , T2& , T3& , T4& , T5& , pinned T6& , T7& )) { ( (void (*)( T0& , T1& , T2& , T3& , T4& , T5& , pinned T6& , T7& )) this->op ) ( info<T0>::typed::dereference(this->arguments[0]) , info<T1>::typed::dereference(this->arguments[1]) , info<T2>::typed::dereference(this->arguments[2]) , info<T3>::typed::dereference(this->arguments[3]) , info<T4>::typed::dereference(this->arguments[4]) , info<T5>::typed::dereference(this->arguments[5]) , marked info<T6>::typed::dereference(this->arguments[6]) , info<T7>::typed::dereference(this->arguments[7]) ); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 > void cleanup_template(void (*)( T0& , T1& , T2& , T3& , T4& , T5& , pinned T6& , T7& )) { info<T0>::typed::deallocate(this->arguments[0]); info<T1>::typed::deallocate(this->arguments[1]); info<T2>::typed::deallocate(this->arguments[2]); info<T3>::typed::deallocate(this->arguments[3]); info<T4>::typed::deallocate(this->arguments[4]); info<T5>::typed::deallocate(this->arguments[5]); info<T6>::typed::deallocate(this->arguments[6]); info<T7>::typed::deallocate(this->arguments[7]); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 > void creditup_template(void (*)( T0& , T1& , T2& , T3& , T4& , T5& , pinned T6& , T7& )) { info<T0>::typed::weight(this->arguments[0], this); info<T1>::typed::weight(this->arguments[1], this); info<T2>::typed::weight(this->arguments[2], this); info<T3>::typed::weight(this->arguments[3], this); info<T4>::typed::weight(this->arguments[4], this); info<T5>::typed::weight(this->arguments[5], this); info<T6>::typed::weight(this->arguments[6], this); info<T7>::typed::weight(this->arguments[7], this); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 > void mark_pin(void (*)( T0& , T1& , T2& , T3& , T4& , T5& , pinned T6& , T7& )) { this->pin = &current(info<T6>::typed::dereference(this->arguments[6])); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 > void prototype_template(void (*)( T0& , T1& , T2& , T3& , T4& , T5& , T6& , pinned T7& )) { ( (void (*)( T0& , T1& , T2& , T3& , T4& , T5& , T6& , pinned T7& )) this->op ) ( info<T0>::typed::dereference(this->arguments[0]) , info<T1>::typed::dereference(this->arguments[1]) , info<T2>::typed::dereference(this->arguments[2]) , info<T3>::typed::dereference(this->arguments[3]) , info<T4>::typed::dereference(this->arguments[4]) , info<T5>::typed::dereference(this->arguments[5]) , info<T6>::typed::dereference(this->arguments[6]) , marked info<T7>::typed::dereference(this->arguments[7]) ); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 > void cleanup_template(void (*)( T0& , T1& , T2& , T3& , T4& , T5& , T6& , pinned T7& )) { info<T0>::typed::deallocate(this->arguments[0]); info<T1>::typed::deallocate(this->arguments[1]); info<T2>::typed::deallocate(this->arguments[2]); info<T3>::typed::deallocate(this->arguments[3]); info<T4>::typed::deallocate(this->arguments[4]); info<T5>::typed::deallocate(this->arguments[5]); info<T6>::typed::deallocate(this->arguments[6]); info<T7>::typed::deallocate(this->arguments[7]); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 > void creditup_template(void (*)( T0& , T1& , T2& , T3& , T4& , T5& , T6& , pinned T7& )) { info<T0>::typed::weight(this->arguments[0], this); info<T1>::typed::weight(this->arguments[1], this); info<T2>::typed::weight(this->arguments[2], this); info<T3>::typed::weight(this->arguments[3], this); info<T4>::typed::weight(this->arguments[4], this); info<T5>::typed::weight(this->arguments[5], this); info<T6>::typed::weight(this->arguments[6], this); info<T7>::typed::weight(this->arguments[7], this); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 > void mark_pin(void (*)( T0& , T1& , T2& , T3& , T4& , T5& , T6& , pinned T7& )) { this->pin = &current(info<T7>::typed::dereference(this->arguments[7])); }
template< typename FP, typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 >
operation( FP logistics, FP computing, T0 &arg0 , T1 &arg1 , T2 &arg2 , T3 &arg3 , T4 &arg4 , T5 &arg5 , T6 &arg6 , T7 &arg7 , T8 &arg8 ){
    this->logistics_ptr = (void(*)())logistics;
    this->computing_ptr = (void(*)())computing;
    this->op = this->logistics_ptr;
    this->credit = 0;
    this->state = MARKUP;
    this->count = 9;
    this->arguments = (void**)malloc(sizeof(void*)*this->count);
    this->arguments[0] = (void*)info<T0>::typed::pointer(arg0); info<T0>::typed::modify(arg0, this); this->arguments[1] = (void*)info<T1>::typed::pointer(arg1); info<T1>::typed::modify(arg1, this); this->arguments[2] = (void*)info<T2>::typed::pointer(arg2); info<T2>::typed::modify(arg2, this); this->arguments[3] = (void*)info<T3>::typed::pointer(arg3); info<T3>::typed::modify(arg3, this); this->arguments[4] = (void*)info<T4>::typed::pointer(arg4); info<T4>::typed::modify(arg4, this); this->arguments[5] = (void*)info<T5>::typed::pointer(arg5); info<T5>::typed::modify(arg5, this); this->arguments[6] = (void*)info<T6>::typed::pointer(arg6); info<T6>::typed::modify(arg6, this); this->arguments[7] = (void*)info<T7>::typed::pointer(arg7); info<T7>::typed::modify(arg7, this); this->arguments[8] = (void*)info<T8>::typed::pointer(arg8); info<T8>::typed::modify(arg8, this);
    void(operation::*ptr)(FP); ptr = &operation::prototype_template;
    this->prototype = (void(operation::*)())ptr;
    ptr = &operation::cleanup_template;
    this->cleanup = (void(operation::*)())ptr;
    ptr = &operation::creditup_template;
    this->creditup = (void(operation::*)())ptr;
    this->mark_pin(logistics);
}
template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 >
void prototype_template(void (*)( T0& , T1& , T2& , T3& , T4& , T5& , T6& , T7& , T8& )){
    ( (void (*)( T0& , T1& , T2& , T3& , T4& , T5& , T6& , T7& , T8& )) this->op )
    ( info<T0>::typed::dereference(this->arguments[0]) , info<T1>::typed::dereference(this->arguments[1]) , info<T2>::typed::dereference(this->arguments[2]) , info<T3>::typed::dereference(this->arguments[3]) , info<T4>::typed::dereference(this->arguments[4]) , info<T5>::typed::dereference(this->arguments[5]) , info<T6>::typed::dereference(this->arguments[6]) , info<T7>::typed::dereference(this->arguments[7]) , info<T8>::typed::dereference(this->arguments[8]) );
}
template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 >
void cleanup_template(void (*)( T0& , T1& , T2& , T3& , T4& , T5& , T6& , T7& , T8& )){
    info<T0>::typed::deallocate(this->arguments[0]); info<T1>::typed::deallocate(this->arguments[1]); info<T2>::typed::deallocate(this->arguments[2]); info<T3>::typed::deallocate(this->arguments[3]); info<T4>::typed::deallocate(this->arguments[4]); info<T5>::typed::deallocate(this->arguments[5]); info<T6>::typed::deallocate(this->arguments[6]); info<T7>::typed::deallocate(this->arguments[7]); info<T8>::typed::deallocate(this->arguments[8]);
}
template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 >
void creditup_template(void (*)( T0& , T1& , T2& , T3& , T4& , T5& , T6& , T7& , T8& )){
    info<T0>::typed::weight(this->arguments[0], this); info<T1>::typed::weight(this->arguments[1], this); info<T2>::typed::weight(this->arguments[2], this); info<T3>::typed::weight(this->arguments[3], this); info<T4>::typed::weight(this->arguments[4], this); info<T5>::typed::weight(this->arguments[5], this); info<T6>::typed::weight(this->arguments[6], this); info<T7>::typed::weight(this->arguments[7], this); info<T8>::typed::weight(this->arguments[8], this);
}
template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 >
void mark_pin(void (*)( T0& , T1& , T2& , T3& , T4& , T5& , T6& , T7& , T8& )){
    this->pin = NULL;
}
template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 > void prototype_template(void (*)( pinned T0& , T1& , T2& , T3& , T4& , T5& , T6& , T7& , T8& )) { ( (void (*)( pinned T0& , T1& , T2& , T3& , T4& , T5& , T6& , T7& , T8& )) this->op ) ( marked info<T0>::typed::dereference(this->arguments[0]) , info<T1>::typed::dereference(this->arguments[1]) , info<T2>::typed::dereference(this->arguments[2]) , info<T3>::typed::dereference(this->arguments[3]) , info<T4>::typed::dereference(this->arguments[4]) , info<T5>::typed::dereference(this->arguments[5]) , info<T6>::typed::dereference(this->arguments[6]) , info<T7>::typed::dereference(this->arguments[7]) , info<T8>::typed::dereference(this->arguments[8]) ); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 > void cleanup_template(void (*)( pinned T0& , T1& , T2& , T3& , T4& , T5& , T6& , T7& , T8& )) { info<T0>::typed::deallocate(this->arguments[0]); info<T1>::typed::deallocate(this->arguments[1]); info<T2>::typed::deallocate(this->arguments[2]); info<T3>::typed::deallocate(this->arguments[3]); info<T4>::typed::deallocate(this->arguments[4]); info<T5>::typed::deallocate(this->arguments[5]); info<T6>::typed::deallocate(this->arguments[6]); info<T7>::typed::deallocate(this->arguments[7]); info<T8>::typed::deallocate(this->arguments[8]); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 > void creditup_template(void (*)( pinned T0& , T1& , T2& , T3& , T4& , T5& , T6& , T7& , T8& )) { info<T0>::typed::weight(this->arguments[0], this); info<T1>::typed::weight(this->arguments[1], this); info<T2>::typed::weight(this->arguments[2], this); info<T3>::typed::weight(this->arguments[3], this); info<T4>::typed::weight(this->arguments[4], this); info<T5>::typed::weight(this->arguments[5], this); info<T6>::typed::weight(this->arguments[6], this); info<T7>::typed::weight(this->arguments[7], this); info<T8>::typed::weight(this->arguments[8], this); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 > void mark_pin(void (*)( pinned T0& , T1& , T2& , T3& , T4& , T5& , T6& , T7& , T8& )) { this->pin = &current(info<T0>::typed::dereference(this->arguments[0])); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 > void prototype_template(void (*)( T0& , pinned T1& , T2& , T3& , T4& , T5& , T6& , T7& , T8& )) { ( (void (*)( T0& , pinned T1& , T2& , T3& , T4& , T5& , T6& , T7& , T8& )) this->op ) ( info<T0>::typed::dereference(this->arguments[0]) , marked info<T1>::typed::dereference(this->arguments[1]) , info<T2>::typed::dereference(this->arguments[2]) , info<T3>::typed::dereference(this->arguments[3]) , info<T4>::typed::dereference(this->arguments[4]) , info<T5>::typed::dereference(this->arguments[5]) , info<T6>::typed::dereference(this->arguments[6]) , info<T7>::typed::dereference(this->arguments[7]) , info<T8>::typed::dereference(this->arguments[8]) ); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 > void cleanup_template(void (*)( T0& , pinned T1& , T2& , T3& , T4& , T5& , T6& , T7& , T8& )) { info<T0>::typed::deallocate(this->arguments[0]); info<T1>::typed::deallocate(this->arguments[1]); info<T2>::typed::deallocate(this->arguments[2]); info<T3>::typed::deallocate(this->arguments[3]); info<T4>::typed::deallocate(this->arguments[4]); info<T5>::typed::deallocate(this->arguments[5]); info<T6>::typed::deallocate(this->arguments[6]); info<T7>::typed::deallocate(this->arguments[7]); info<T8>::typed::deallocate(this->arguments[8]); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 > void creditup_template(void (*)( T0& , pinned T1& , T2& , T3& , T4& , T5& , T6& , T7& , T8& )) { info<T0>::typed::weight(this->arguments[0], this); info<T1>::typed::weight(this->arguments[1], this); info<T2>::typed::weight(this->arguments[2], this); info<T3>::typed::weight(this->arguments[3], this); info<T4>::typed::weight(this->arguments[4], this); info<T5>::typed::weight(this->arguments[5], this); info<T6>::typed::weight(this->arguments[6], this); info<T7>::typed::weight(this->arguments[7], this); info<T8>::typed::weight(this->arguments[8], this); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 > void mark_pin(void (*)( T0& , pinned T1& , T2& , T3& , T4& , T5& , T6& , T7& , T8& )) { this->pin = &current(info<T1>::typed::dereference(this->arguments[1])); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 > void prototype_template(void (*)( T0& , T1& , pinned T2& , T3& , T4& , T5& , T6& , T7& , T8& )) { ( (void (*)( T0& , T1& , pinned T2& , T3& , T4& , T5& , T6& , T7& , T8& )) this->op ) ( info<T0>::typed::dereference(this->arguments[0]) , info<T1>::typed::dereference(this->arguments[1]) , marked info<T2>::typed::dereference(this->arguments[2]) , info<T3>::typed::dereference(this->arguments[3]) , info<T4>::typed::dereference(this->arguments[4]) , info<T5>::typed::dereference(this->arguments[5]) , info<T6>::typed::dereference(this->arguments[6]) , info<T7>::typed::dereference(this->arguments[7]) , info<T8>::typed::dereference(this->arguments[8]) ); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 > void cleanup_template(void (*)( T0& , T1& , pinned T2& , T3& , T4& , T5& , T6& , T7& , T8& )) { info<T0>::typed::deallocate(this->arguments[0]); info<T1>::typed::deallocate(this->arguments[1]); info<T2>::typed::deallocate(this->arguments[2]); info<T3>::typed::deallocate(this->arguments[3]); info<T4>::typed::deallocate(this->arguments[4]); info<T5>::typed::deallocate(this->arguments[5]); info<T6>::typed::deallocate(this->arguments[6]); info<T7>::typed::deallocate(this->arguments[7]); info<T8>::typed::deallocate(this->arguments[8]); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 > void creditup_template(void (*)( T0& , T1& , pinned T2& , T3& , T4& , T5& , T6& , T7& , T8& )) { info<T0>::typed::weight(this->arguments[0], this); info<T1>::typed::weight(this->arguments[1], this); info<T2>::typed::weight(this->arguments[2], this); info<T3>::typed::weight(this->arguments[3], this); info<T4>::typed::weight(this->arguments[4], this); info<T5>::typed::weight(this->arguments[5], this); info<T6>::typed::weight(this->arguments[6], this); info<T7>::typed::weight(this->arguments[7], this); info<T8>::typed::weight(this->arguments[8], this); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 > void mark_pin(void (*)( T0& , T1& , pinned T2& , T3& , T4& , T5& , T6& , T7& , T8& )) { this->pin = &current(info<T2>::typed::dereference(this->arguments[2])); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 > void prototype_template(void (*)( T0& , T1& , T2& , pinned T3& , T4& , T5& , T6& , T7& , T8& )) { ( (void (*)( T0& , T1& , T2& , pinned T3& , T4& , T5& , T6& , T7& , T8& )) this->op ) ( info<T0>::typed::dereference(this->arguments[0]) , info<T1>::typed::dereference(this->arguments[1]) , info<T2>::typed::dereference(this->arguments[2]) , marked info<T3>::typed::dereference(this->arguments[3]) , info<T4>::typed::dereference(this->arguments[4]) , info<T5>::typed::dereference(this->arguments[5]) , info<T6>::typed::dereference(this->arguments[6]) , info<T7>::typed::dereference(this->arguments[7]) , info<T8>::typed::dereference(this->arguments[8]) ); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 > void cleanup_template(void (*)( T0& , T1& , T2& , pinned T3& , T4& , T5& , T6& , T7& , T8& )) { info<T0>::typed::deallocate(this->arguments[0]); info<T1>::typed::deallocate(this->arguments[1]); info<T2>::typed::deallocate(this->arguments[2]); info<T3>::typed::deallocate(this->arguments[3]); info<T4>::typed::deallocate(this->arguments[4]); info<T5>::typed::deallocate(this->arguments[5]); info<T6>::typed::deallocate(this->arguments[6]); info<T7>::typed::deallocate(this->arguments[7]); info<T8>::typed::deallocate(this->arguments[8]); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 > void creditup_template(void (*)( T0& , T1& , T2& , pinned T3& , T4& , T5& , T6& , T7& , T8& )) { info<T0>::typed::weight(this->arguments[0], this); info<T1>::typed::weight(this->arguments[1], this); info<T2>::typed::weight(this->arguments[2], this); info<T3>::typed::weight(this->arguments[3], this); info<T4>::typed::weight(this->arguments[4], this); info<T5>::typed::weight(this->arguments[5], this); info<T6>::typed::weight(this->arguments[6], this); info<T7>::typed::weight(this->arguments[7], this); info<T8>::typed::weight(this->arguments[8], this); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 > void mark_pin(void (*)( T0& , T1& , T2& , pinned T3& , T4& , T5& , T6& , T7& , T8& )) { this->pin = &current(info<T3>::typed::dereference(this->arguments[3])); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 > void prototype_template(void (*)( T0& , T1& , T2& , T3& , pinned T4& , T5& , T6& , T7& , T8& )) { ( (void (*)( T0& , T1& , T2& , T3& , pinned T4& , T5& , T6& , T7& , T8& )) this->op ) ( info<T0>::typed::dereference(this->arguments[0]) , info<T1>::typed::dereference(this->arguments[1]) , info<T2>::typed::dereference(this->arguments[2]) , info<T3>::typed::dereference(this->arguments[3]) , marked info<T4>::typed::dereference(this->arguments[4]) , info<T5>::typed::dereference(this->arguments[5]) , info<T6>::typed::dereference(this->arguments[6]) , info<T7>::typed::dereference(this->arguments[7]) , info<T8>::typed::dereference(this->arguments[8]) ); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 > void cleanup_template(void (*)( T0& , T1& , T2& , T3& , pinned T4& , T5& , T6& , T7& , T8& )) { info<T0>::typed::deallocate(this->arguments[0]); info<T1>::typed::deallocate(this->arguments[1]); info<T2>::typed::deallocate(this->arguments[2]); info<T3>::typed::deallocate(this->arguments[3]); info<T4>::typed::deallocate(this->arguments[4]); info<T5>::typed::deallocate(this->arguments[5]); info<T6>::typed::deallocate(this->arguments[6]); info<T7>::typed::deallocate(this->arguments[7]); info<T8>::typed::deallocate(this->arguments[8]); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 > void creditup_template(void (*)( T0& , T1& , T2& , T3& , pinned T4& , T5& , T6& , T7& , T8& )) { info<T0>::typed::weight(this->arguments[0], this); info<T1>::typed::weight(this->arguments[1], this); info<T2>::typed::weight(this->arguments[2], this); info<T3>::typed::weight(this->arguments[3], this); info<T4>::typed::weight(this->arguments[4], this); info<T5>::typed::weight(this->arguments[5], this); info<T6>::typed::weight(this->arguments[6], this); info<T7>::typed::weight(this->arguments[7], this); info<T8>::typed::weight(this->arguments[8], this); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 > void mark_pin(void (*)( T0& , T1& , T2& , T3& , pinned T4& , T5& , T6& , T7& , T8& )) { this->pin = &current(info<T4>::typed::dereference(this->arguments[4])); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 > void prototype_template(void (*)( T0& , T1& , T2& , T3& , T4& , pinned T5& , T6& , T7& , T8& )) { ( (void (*)( T0& , T1& , T2& , T3& , T4& , pinned T5& , T6& , T7& , T8& )) this->op ) ( info<T0>::typed::dereference(this->arguments[0]) , info<T1>::typed::dereference(this->arguments[1]) , info<T2>::typed::dereference(this->arguments[2]) , info<T3>::typed::dereference(this->arguments[3]) , info<T4>::typed::dereference(this->arguments[4]) , marked info<T5>::typed::dereference(this->arguments[5]) , info<T6>::typed::dereference(this->arguments[6]) , info<T7>::typed::dereference(this->arguments[7]) , info<T8>::typed::dereference(this->arguments[8]) ); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 > void cleanup_template(void (*)( T0& , T1& , T2& , T3& , T4& , pinned T5& , T6& , T7& , T8& )) { info<T0>::typed::deallocate(this->arguments[0]); info<T1>::typed::deallocate(this->arguments[1]); info<T2>::typed::deallocate(this->arguments[2]); info<T3>::typed::deallocate(this->arguments[3]); info<T4>::typed::deallocate(this->arguments[4]); info<T5>::typed::deallocate(this->arguments[5]); info<T6>::typed::deallocate(this->arguments[6]); info<T7>::typed::deallocate(this->arguments[7]); info<T8>::typed::deallocate(this->arguments[8]); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 > void creditup_template(void (*)( T0& , T1& , T2& , T3& , T4& , pinned T5& , T6& , T7& , T8& )) { info<T0>::typed::weight(this->arguments[0], this); info<T1>::typed::weight(this->arguments[1], this); info<T2>::typed::weight(this->arguments[2], this); info<T3>::typed::weight(this->arguments[3], this); info<T4>::typed::weight(this->arguments[4], this); info<T5>::typed::weight(this->arguments[5], this); info<T6>::typed::weight(this->arguments[6], this); info<T7>::typed::weight(this->arguments[7], this); info<T8>::typed::weight(this->arguments[8], this); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 > void mark_pin(void (*)( T0& , T1& , T2& , T3& , T4& , pinned T5& , T6& , T7& , T8& )) { this->pin = &current(info<T5>::typed::dereference(this->arguments[5])); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 > void prototype_template(void (*)( T0& , T1& , T2& , T3& , T4& , T5& , pinned T6& , T7& , T8& )) { ( (void (*)( T0& , T1& , T2& , T3& , T4& , T5& , pinned T6& , T7& , T8& )) this->op ) ( info<T0>::typed::dereference(this->arguments[0]) , info<T1>::typed::dereference(this->arguments[1]) , info<T2>::typed::dereference(this->arguments[2]) , info<T3>::typed::dereference(this->arguments[3]) , info<T4>::typed::dereference(this->arguments[4]) , info<T5>::typed::dereference(this->arguments[5]) , marked info<T6>::typed::dereference(this->arguments[6]) , info<T7>::typed::dereference(this->arguments[7]) , info<T8>::typed::dereference(this->arguments[8]) ); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 > void cleanup_template(void (*)( T0& , T1& , T2& , T3& , T4& , T5& , pinned T6& , T7& , T8& )) { info<T0>::typed::deallocate(this->arguments[0]); info<T1>::typed::deallocate(this->arguments[1]); info<T2>::typed::deallocate(this->arguments[2]); info<T3>::typed::deallocate(this->arguments[3]); info<T4>::typed::deallocate(this->arguments[4]); info<T5>::typed::deallocate(this->arguments[5]); info<T6>::typed::deallocate(this->arguments[6]); info<T7>::typed::deallocate(this->arguments[7]); info<T8>::typed::deallocate(this->arguments[8]); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 > void creditup_template(void (*)( T0& , T1& , T2& , T3& , T4& , T5& , pinned T6& , T7& , T8& )) { info<T0>::typed::weight(this->arguments[0], this); info<T1>::typed::weight(this->arguments[1], this); info<T2>::typed::weight(this->arguments[2], this); info<T3>::typed::weight(this->arguments[3], this); info<T4>::typed::weight(this->arguments[4], this); info<T5>::typed::weight(this->arguments[5], this); info<T6>::typed::weight(this->arguments[6], this); info<T7>::typed::weight(this->arguments[7], this); info<T8>::typed::weight(this->arguments[8], this); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 > void mark_pin(void (*)( T0& , T1& , T2& , T3& , T4& , T5& , pinned T6& , T7& , T8& )) { this->pin = &current(info<T6>::typed::dereference(this->arguments[6])); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 > void prototype_template(void (*)( T0& , T1& , T2& , T3& , T4& , T5& , T6& , pinned T7& , T8& )) { ( (void (*)( T0& , T1& , T2& , T3& , T4& , T5& , T6& , pinned T7& , T8& )) this->op ) ( info<T0>::typed::dereference(this->arguments[0]) , info<T1>::typed::dereference(this->arguments[1]) , info<T2>::typed::dereference(this->arguments[2]) , info<T3>::typed::dereference(this->arguments[3]) , info<T4>::typed::dereference(this->arguments[4]) , info<T5>::typed::dereference(this->arguments[5]) , info<T6>::typed::dereference(this->arguments[6]) , marked info<T7>::typed::dereference(this->arguments[7]) , info<T8>::typed::dereference(this->arguments[8]) ); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 > void cleanup_template(void (*)( T0& , T1& , T2& , T3& , T4& , T5& , T6& , pinned T7& , T8& )) { info<T0>::typed::deallocate(this->arguments[0]); info<T1>::typed::deallocate(this->arguments[1]); info<T2>::typed::deallocate(this->arguments[2]); info<T3>::typed::deallocate(this->arguments[3]); info<T4>::typed::deallocate(this->arguments[4]); info<T5>::typed::deallocate(this->arguments[5]); info<T6>::typed::deallocate(this->arguments[6]); info<T7>::typed::deallocate(this->arguments[7]); info<T8>::typed::deallocate(this->arguments[8]); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 > void creditup_template(void (*)( T0& , T1& , T2& , T3& , T4& , T5& , T6& , pinned T7& , T8& )) { info<T0>::typed::weight(this->arguments[0], this); info<T1>::typed::weight(this->arguments[1], this); info<T2>::typed::weight(this->arguments[2], this); info<T3>::typed::weight(this->arguments[3], this); info<T4>::typed::weight(this->arguments[4], this); info<T5>::typed::weight(this->arguments[5], this); info<T6>::typed::weight(this->arguments[6], this); info<T7>::typed::weight(this->arguments[7], this); info<T8>::typed::weight(this->arguments[8], this); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 > void mark_pin(void (*)( T0& , T1& , T2& , T3& , T4& , T5& , T6& , pinned T7& , T8& )) { this->pin = &current(info<T7>::typed::dereference(this->arguments[7])); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 > void prototype_template(void (*)( T0& , T1& , T2& , T3& , T4& , T5& , T6& , T7& , pinned T8& )) { ( (void (*)( T0& , T1& , T2& , T3& , T4& , T5& , T6& , T7& , pinned T8& )) this->op ) ( info<T0>::typed::dereference(this->arguments[0]) , info<T1>::typed::dereference(this->arguments[1]) , info<T2>::typed::dereference(this->arguments[2]) , info<T3>::typed::dereference(this->arguments[3]) , info<T4>::typed::dereference(this->arguments[4]) , info<T5>::typed::dereference(this->arguments[5]) , info<T6>::typed::dereference(this->arguments[6]) , info<T7>::typed::dereference(this->arguments[7]) , marked info<T8>::typed::dereference(this->arguments[8]) ); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 > void cleanup_template(void (*)( T0& , T1& , T2& , T3& , T4& , T5& , T6& , T7& , pinned T8& )) { info<T0>::typed::deallocate(this->arguments[0]); info<T1>::typed::deallocate(this->arguments[1]); info<T2>::typed::deallocate(this->arguments[2]); info<T3>::typed::deallocate(this->arguments[3]); info<T4>::typed::deallocate(this->arguments[4]); info<T5>::typed::deallocate(this->arguments[5]); info<T6>::typed::deallocate(this->arguments[6]); info<T7>::typed::deallocate(this->arguments[7]); info<T8>::typed::deallocate(this->arguments[8]); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 > void creditup_template(void (*)( T0& , T1& , T2& , T3& , T4& , T5& , T6& , T7& , pinned T8& )) { info<T0>::typed::weight(this->arguments[0], this); info<T1>::typed::weight(this->arguments[1], this); info<T2>::typed::weight(this->arguments[2], this); info<T3>::typed::weight(this->arguments[3], this); info<T4>::typed::weight(this->arguments[4], this); info<T5>::typed::weight(this->arguments[5], this); info<T6>::typed::weight(this->arguments[6], this); info<T7>::typed::weight(this->arguments[7], this); info<T8>::typed::weight(this->arguments[8], this); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 > void mark_pin(void (*)( T0& , T1& , T2& , T3& , T4& , T5& , T6& , T7& , pinned T8& )) { this->pin = &current(info<T8>::typed::dereference(this->arguments[8])); }
template< typename FP, typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 >
operation( FP logistics, FP computing, T0 &arg0 , T1 &arg1 , T2 &arg2 , T3 &arg3 , T4 &arg4 , T5 &arg5 , T6 &arg6 , T7 &arg7 , T8 &arg8 , T9 &arg9 ){
    this->logistics_ptr = (void(*)())logistics;
    this->computing_ptr = (void(*)())computing;
    this->op = this->logistics_ptr;
    this->credit = 0;
    this->state = MARKUP;
    this->count = 10;
    this->arguments = (void**)malloc(sizeof(void*)*this->count);
    this->arguments[0] = (void*)info<T0>::typed::pointer(arg0); info<T0>::typed::modify(arg0, this); this->arguments[1] = (void*)info<T1>::typed::pointer(arg1); info<T1>::typed::modify(arg1, this); this->arguments[2] = (void*)info<T2>::typed::pointer(arg2); info<T2>::typed::modify(arg2, this); this->arguments[3] = (void*)info<T3>::typed::pointer(arg3); info<T3>::typed::modify(arg3, this); this->arguments[4] = (void*)info<T4>::typed::pointer(arg4); info<T4>::typed::modify(arg4, this); this->arguments[5] = (void*)info<T5>::typed::pointer(arg5); info<T5>::typed::modify(arg5, this); this->arguments[6] = (void*)info<T6>::typed::pointer(arg6); info<T6>::typed::modify(arg6, this); this->arguments[7] = (void*)info<T7>::typed::pointer(arg7); info<T7>::typed::modify(arg7, this); this->arguments[8] = (void*)info<T8>::typed::pointer(arg8); info<T8>::typed::modify(arg8, this); this->arguments[9] = (void*)info<T9>::typed::pointer(arg9); info<T9>::typed::modify(arg9, this);
    void(operation::*ptr)(FP); ptr = &operation::prototype_template;
    this->prototype = (void(operation::*)())ptr;
    ptr = &operation::cleanup_template;
    this->cleanup = (void(operation::*)())ptr;
    ptr = &operation::creditup_template;
    this->creditup = (void(operation::*)())ptr;
    this->mark_pin(logistics);
}
template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 >
void prototype_template(void (*)( T0& , T1& , T2& , T3& , T4& , T5& , T6& , T7& , T8& , T9& )){
    ( (void (*)( T0& , T1& , T2& , T3& , T4& , T5& , T6& , T7& , T8& , T9& )) this->op )
    ( info<T0>::typed::dereference(this->arguments[0]) , info<T1>::typed::dereference(this->arguments[1]) , info<T2>::typed::dereference(this->arguments[2]) , info<T3>::typed::dereference(this->arguments[3]) , info<T4>::typed::dereference(this->arguments[4]) , info<T5>::typed::dereference(this->arguments[5]) , info<T6>::typed::dereference(this->arguments[6]) , info<T7>::typed::dereference(this->arguments[7]) , info<T8>::typed::dereference(this->arguments[8]) , info<T9>::typed::dereference(this->arguments[9]) );
}
template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 >
void cleanup_template(void (*)( T0& , T1& , T2& , T3& , T4& , T5& , T6& , T7& , T8& , T9& )){
    info<T0>::typed::deallocate(this->arguments[0]); info<T1>::typed::deallocate(this->arguments[1]); info<T2>::typed::deallocate(this->arguments[2]); info<T3>::typed::deallocate(this->arguments[3]); info<T4>::typed::deallocate(this->arguments[4]); info<T5>::typed::deallocate(this->arguments[5]); info<T6>::typed::deallocate(this->arguments[6]); info<T7>::typed::deallocate(this->arguments[7]); info<T8>::typed::deallocate(this->arguments[8]); info<T9>::typed::deallocate(this->arguments[9]);
}
template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 >
void creditup_template(void (*)( T0& , T1& , T2& , T3& , T4& , T5& , T6& , T7& , T8& , T9& )){
    info<T0>::typed::weight(this->arguments[0], this); info<T1>::typed::weight(this->arguments[1], this); info<T2>::typed::weight(this->arguments[2], this); info<T3>::typed::weight(this->arguments[3], this); info<T4>::typed::weight(this->arguments[4], this); info<T5>::typed::weight(this->arguments[5], this); info<T6>::typed::weight(this->arguments[6], this); info<T7>::typed::weight(this->arguments[7], this); info<T8>::typed::weight(this->arguments[8], this); info<T9>::typed::weight(this->arguments[9], this);
}
template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 >
void mark_pin(void (*)( T0& , T1& , T2& , T3& , T4& , T5& , T6& , T7& , T8& , T9& )){
    this->pin = NULL;
}
template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 > void prototype_template(void (*)( pinned T0& , T1& , T2& , T3& , T4& , T5& , T6& , T7& , T8& , T9& )) { ( (void (*)( pinned T0& , T1& , T2& , T3& , T4& , T5& , T6& , T7& , T8& , T9& )) this->op ) ( marked info<T0>::typed::dereference(this->arguments[0]) , info<T1>::typed::dereference(this->arguments[1]) , info<T2>::typed::dereference(this->arguments[2]) , info<T3>::typed::dereference(this->arguments[3]) , info<T4>::typed::dereference(this->arguments[4]) , info<T5>::typed::dereference(this->arguments[5]) , info<T6>::typed::dereference(this->arguments[6]) , info<T7>::typed::dereference(this->arguments[7]) , info<T8>::typed::dereference(this->arguments[8]) , info<T9>::typed::dereference(this->arguments[9]) ); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 > void cleanup_template(void (*)( pinned T0& , T1& , T2& , T3& , T4& , T5& , T6& , T7& , T8& , T9& )) { info<T0>::typed::deallocate(this->arguments[0]); info<T1>::typed::deallocate(this->arguments[1]); info<T2>::typed::deallocate(this->arguments[2]); info<T3>::typed::deallocate(this->arguments[3]); info<T4>::typed::deallocate(this->arguments[4]); info<T5>::typed::deallocate(this->arguments[5]); info<T6>::typed::deallocate(this->arguments[6]); info<T7>::typed::deallocate(this->arguments[7]); info<T8>::typed::deallocate(this->arguments[8]); info<T9>::typed::deallocate(this->arguments[9]); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 > void creditup_template(void (*)( pinned T0& , T1& , T2& , T3& , T4& , T5& , T6& , T7& , T8& , T9& )) { info<T0>::typed::weight(this->arguments[0], this); info<T1>::typed::weight(this->arguments[1], this); info<T2>::typed::weight(this->arguments[2], this); info<T3>::typed::weight(this->arguments[3], this); info<T4>::typed::weight(this->arguments[4], this); info<T5>::typed::weight(this->arguments[5], this); info<T6>::typed::weight(this->arguments[6], this); info<T7>::typed::weight(this->arguments[7], this); info<T8>::typed::weight(this->arguments[8], this); info<T9>::typed::weight(this->arguments[9], this); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 > void mark_pin(void (*)( pinned T0& , T1& , T2& , T3& , T4& , T5& , T6& , T7& , T8& , T9& )) { this->pin = &current(info<T0>::typed::dereference(this->arguments[0])); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 > void prototype_template(void (*)( T0& , pinned T1& , T2& , T3& , T4& , T5& , T6& , T7& , T8& , T9& )) { ( (void (*)( T0& , pinned T1& , T2& , T3& , T4& , T5& , T6& , T7& , T8& , T9& )) this->op ) ( info<T0>::typed::dereference(this->arguments[0]) , marked info<T1>::typed::dereference(this->arguments[1]) , info<T2>::typed::dereference(this->arguments[2]) , info<T3>::typed::dereference(this->arguments[3]) , info<T4>::typed::dereference(this->arguments[4]) , info<T5>::typed::dereference(this->arguments[5]) , info<T6>::typed::dereference(this->arguments[6]) , info<T7>::typed::dereference(this->arguments[7]) , info<T8>::typed::dereference(this->arguments[8]) , info<T9>::typed::dereference(this->arguments[9]) ); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 > void cleanup_template(void (*)( T0& , pinned T1& , T2& , T3& , T4& , T5& , T6& , T7& , T8& , T9& )) { info<T0>::typed::deallocate(this->arguments[0]); info<T1>::typed::deallocate(this->arguments[1]); info<T2>::typed::deallocate(this->arguments[2]); info<T3>::typed::deallocate(this->arguments[3]); info<T4>::typed::deallocate(this->arguments[4]); info<T5>::typed::deallocate(this->arguments[5]); info<T6>::typed::deallocate(this->arguments[6]); info<T7>::typed::deallocate(this->arguments[7]); info<T8>::typed::deallocate(this->arguments[8]); info<T9>::typed::deallocate(this->arguments[9]); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 > void creditup_template(void (*)( T0& , pinned T1& , T2& , T3& , T4& , T5& , T6& , T7& , T8& , T9& )) { info<T0>::typed::weight(this->arguments[0], this); info<T1>::typed::weight(this->arguments[1], this); info<T2>::typed::weight(this->arguments[2], this); info<T3>::typed::weight(this->arguments[3], this); info<T4>::typed::weight(this->arguments[4], this); info<T5>::typed::weight(this->arguments[5], this); info<T6>::typed::weight(this->arguments[6], this); info<T7>::typed::weight(this->arguments[7], this); info<T8>::typed::weight(this->arguments[8], this); info<T9>::typed::weight(this->arguments[9], this); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 > void mark_pin(void (*)( T0& , pinned T1& , T2& , T3& , T4& , T5& , T6& , T7& , T8& , T9& )) { this->pin = &current(info<T1>::typed::dereference(this->arguments[1])); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 > void prototype_template(void (*)( T0& , T1& , pinned T2& , T3& , T4& , T5& , T6& , T7& , T8& , T9& )) { ( (void (*)( T0& , T1& , pinned T2& , T3& , T4& , T5& , T6& , T7& , T8& , T9& )) this->op ) ( info<T0>::typed::dereference(this->arguments[0]) , info<T1>::typed::dereference(this->arguments[1]) , marked info<T2>::typed::dereference(this->arguments[2]) , info<T3>::typed::dereference(this->arguments[3]) , info<T4>::typed::dereference(this->arguments[4]) , info<T5>::typed::dereference(this->arguments[5]) , info<T6>::typed::dereference(this->arguments[6]) , info<T7>::typed::dereference(this->arguments[7]) , info<T8>::typed::dereference(this->arguments[8]) , info<T9>::typed::dereference(this->arguments[9]) ); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 > void cleanup_template(void (*)( T0& , T1& , pinned T2& , T3& , T4& , T5& , T6& , T7& , T8& , T9& )) { info<T0>::typed::deallocate(this->arguments[0]); info<T1>::typed::deallocate(this->arguments[1]); info<T2>::typed::deallocate(this->arguments[2]); info<T3>::typed::deallocate(this->arguments[3]); info<T4>::typed::deallocate(this->arguments[4]); info<T5>::typed::deallocate(this->arguments[5]); info<T6>::typed::deallocate(this->arguments[6]); info<T7>::typed::deallocate(this->arguments[7]); info<T8>::typed::deallocate(this->arguments[8]); info<T9>::typed::deallocate(this->arguments[9]); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 > void creditup_template(void (*)( T0& , T1& , pinned T2& , T3& , T4& , T5& , T6& , T7& , T8& , T9& )) { info<T0>::typed::weight(this->arguments[0], this); info<T1>::typed::weight(this->arguments[1], this); info<T2>::typed::weight(this->arguments[2], this); info<T3>::typed::weight(this->arguments[3], this); info<T4>::typed::weight(this->arguments[4], this); info<T5>::typed::weight(this->arguments[5], this); info<T6>::typed::weight(this->arguments[6], this); info<T7>::typed::weight(this->arguments[7], this); info<T8>::typed::weight(this->arguments[8], this); info<T9>::typed::weight(this->arguments[9], this); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 > void mark_pin(void (*)( T0& , T1& , pinned T2& , T3& , T4& , T5& , T6& , T7& , T8& , T9& )) { this->pin = &current(info<T2>::typed::dereference(this->arguments[2])); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 > void prototype_template(void (*)( T0& , T1& , T2& , pinned T3& , T4& , T5& , T6& , T7& , T8& , T9& )) { ( (void (*)( T0& , T1& , T2& , pinned T3& , T4& , T5& , T6& , T7& , T8& , T9& )) this->op ) ( info<T0>::typed::dereference(this->arguments[0]) , info<T1>::typed::dereference(this->arguments[1]) , info<T2>::typed::dereference(this->arguments[2]) , marked info<T3>::typed::dereference(this->arguments[3]) , info<T4>::typed::dereference(this->arguments[4]) , info<T5>::typed::dereference(this->arguments[5]) , info<T6>::typed::dereference(this->arguments[6]) , info<T7>::typed::dereference(this->arguments[7]) , info<T8>::typed::dereference(this->arguments[8]) , info<T9>::typed::dereference(this->arguments[9]) ); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 > void cleanup_template(void (*)( T0& , T1& , T2& , pinned T3& , T4& , T5& , T6& , T7& , T8& , T9& )) { info<T0>::typed::deallocate(this->arguments[0]); info<T1>::typed::deallocate(this->arguments[1]); info<T2>::typed::deallocate(this->arguments[2]); info<T3>::typed::deallocate(this->arguments[3]); info<T4>::typed::deallocate(this->arguments[4]); info<T5>::typed::deallocate(this->arguments[5]); info<T6>::typed::deallocate(this->arguments[6]); info<T7>::typed::deallocate(this->arguments[7]); info<T8>::typed::deallocate(this->arguments[8]); info<T9>::typed::deallocate(this->arguments[9]); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 > void creditup_template(void (*)( T0& , T1& , T2& , pinned T3& , T4& , T5& , T6& , T7& , T8& , T9& )) { info<T0>::typed::weight(this->arguments[0], this); info<T1>::typed::weight(this->arguments[1], this); info<T2>::typed::weight(this->arguments[2], this); info<T3>::typed::weight(this->arguments[3], this); info<T4>::typed::weight(this->arguments[4], this); info<T5>::typed::weight(this->arguments[5], this); info<T6>::typed::weight(this->arguments[6], this); info<T7>::typed::weight(this->arguments[7], this); info<T8>::typed::weight(this->arguments[8], this); info<T9>::typed::weight(this->arguments[9], this); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 > void mark_pin(void (*)( T0& , T1& , T2& , pinned T3& , T4& , T5& , T6& , T7& , T8& , T9& )) { this->pin = &current(info<T3>::typed::dereference(this->arguments[3])); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 > void prototype_template(void (*)( T0& , T1& , T2& , T3& , pinned T4& , T5& , T6& , T7& , T8& , T9& )) { ( (void (*)( T0& , T1& , T2& , T3& , pinned T4& , T5& , T6& , T7& , T8& , T9& )) this->op ) ( info<T0>::typed::dereference(this->arguments[0]) , info<T1>::typed::dereference(this->arguments[1]) , info<T2>::typed::dereference(this->arguments[2]) , info<T3>::typed::dereference(this->arguments[3]) , marked info<T4>::typed::dereference(this->arguments[4]) , info<T5>::typed::dereference(this->arguments[5]) , info<T6>::typed::dereference(this->arguments[6]) , info<T7>::typed::dereference(this->arguments[7]) , info<T8>::typed::dereference(this->arguments[8]) , info<T9>::typed::dereference(this->arguments[9]) ); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 > void cleanup_template(void (*)( T0& , T1& , T2& , T3& , pinned T4& , T5& , T6& , T7& , T8& , T9& )) { info<T0>::typed::deallocate(this->arguments[0]); info<T1>::typed::deallocate(this->arguments[1]); info<T2>::typed::deallocate(this->arguments[2]); info<T3>::typed::deallocate(this->arguments[3]); info<T4>::typed::deallocate(this->arguments[4]); info<T5>::typed::deallocate(this->arguments[5]); info<T6>::typed::deallocate(this->arguments[6]); info<T7>::typed::deallocate(this->arguments[7]); info<T8>::typed::deallocate(this->arguments[8]); info<T9>::typed::deallocate(this->arguments[9]); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 > void creditup_template(void (*)( T0& , T1& , T2& , T3& , pinned T4& , T5& , T6& , T7& , T8& , T9& )) { info<T0>::typed::weight(this->arguments[0], this); info<T1>::typed::weight(this->arguments[1], this); info<T2>::typed::weight(this->arguments[2], this); info<T3>::typed::weight(this->arguments[3], this); info<T4>::typed::weight(this->arguments[4], this); info<T5>::typed::weight(this->arguments[5], this); info<T6>::typed::weight(this->arguments[6], this); info<T7>::typed::weight(this->arguments[7], this); info<T8>::typed::weight(this->arguments[8], this); info<T9>::typed::weight(this->arguments[9], this); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 > void mark_pin(void (*)( T0& , T1& , T2& , T3& , pinned T4& , T5& , T6& , T7& , T8& , T9& )) { this->pin = &current(info<T4>::typed::dereference(this->arguments[4])); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 > void prototype_template(void (*)( T0& , T1& , T2& , T3& , T4& , pinned T5& , T6& , T7& , T8& , T9& )) { ( (void (*)( T0& , T1& , T2& , T3& , T4& , pinned T5& , T6& , T7& , T8& , T9& )) this->op ) ( info<T0>::typed::dereference(this->arguments[0]) , info<T1>::typed::dereference(this->arguments[1]) , info<T2>::typed::dereference(this->arguments[2]) , info<T3>::typed::dereference(this->arguments[3]) , info<T4>::typed::dereference(this->arguments[4]) , marked info<T5>::typed::dereference(this->arguments[5]) , info<T6>::typed::dereference(this->arguments[6]) , info<T7>::typed::dereference(this->arguments[7]) , info<T8>::typed::dereference(this->arguments[8]) , info<T9>::typed::dereference(this->arguments[9]) ); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 > void cleanup_template(void (*)( T0& , T1& , T2& , T3& , T4& , pinned T5& , T6& , T7& , T8& , T9& )) { info<T0>::typed::deallocate(this->arguments[0]); info<T1>::typed::deallocate(this->arguments[1]); info<T2>::typed::deallocate(this->arguments[2]); info<T3>::typed::deallocate(this->arguments[3]); info<T4>::typed::deallocate(this->arguments[4]); info<T5>::typed::deallocate(this->arguments[5]); info<T6>::typed::deallocate(this->arguments[6]); info<T7>::typed::deallocate(this->arguments[7]); info<T8>::typed::deallocate(this->arguments[8]); info<T9>::typed::deallocate(this->arguments[9]); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 > void creditup_template(void (*)( T0& , T1& , T2& , T3& , T4& , pinned T5& , T6& , T7& , T8& , T9& )) { info<T0>::typed::weight(this->arguments[0], this); info<T1>::typed::weight(this->arguments[1], this); info<T2>::typed::weight(this->arguments[2], this); info<T3>::typed::weight(this->arguments[3], this); info<T4>::typed::weight(this->arguments[4], this); info<T5>::typed::weight(this->arguments[5], this); info<T6>::typed::weight(this->arguments[6], this); info<T7>::typed::weight(this->arguments[7], this); info<T8>::typed::weight(this->arguments[8], this); info<T9>::typed::weight(this->arguments[9], this); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 > void mark_pin(void (*)( T0& , T1& , T2& , T3& , T4& , pinned T5& , T6& , T7& , T8& , T9& )) { this->pin = &current(info<T5>::typed::dereference(this->arguments[5])); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 > void prototype_template(void (*)( T0& , T1& , T2& , T3& , T4& , T5& , pinned T6& , T7& , T8& , T9& )) { ( (void (*)( T0& , T1& , T2& , T3& , T4& , T5& , pinned T6& , T7& , T8& , T9& )) this->op ) ( info<T0>::typed::dereference(this->arguments[0]) , info<T1>::typed::dereference(this->arguments[1]) , info<T2>::typed::dereference(this->arguments[2]) , info<T3>::typed::dereference(this->arguments[3]) , info<T4>::typed::dereference(this->arguments[4]) , info<T5>::typed::dereference(this->arguments[5]) , marked info<T6>::typed::dereference(this->arguments[6]) , info<T7>::typed::dereference(this->arguments[7]) , info<T8>::typed::dereference(this->arguments[8]) , info<T9>::typed::dereference(this->arguments[9]) ); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 > void cleanup_template(void (*)( T0& , T1& , T2& , T3& , T4& , T5& , pinned T6& , T7& , T8& , T9& )) { info<T0>::typed::deallocate(this->arguments[0]); info<T1>::typed::deallocate(this->arguments[1]); info<T2>::typed::deallocate(this->arguments[2]); info<T3>::typed::deallocate(this->arguments[3]); info<T4>::typed::deallocate(this->arguments[4]); info<T5>::typed::deallocate(this->arguments[5]); info<T6>::typed::deallocate(this->arguments[6]); info<T7>::typed::deallocate(this->arguments[7]); info<T8>::typed::deallocate(this->arguments[8]); info<T9>::typed::deallocate(this->arguments[9]); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 > void creditup_template(void (*)( T0& , T1& , T2& , T3& , T4& , T5& , pinned T6& , T7& , T8& , T9& )) { info<T0>::typed::weight(this->arguments[0], this); info<T1>::typed::weight(this->arguments[1], this); info<T2>::typed::weight(this->arguments[2], this); info<T3>::typed::weight(this->arguments[3], this); info<T4>::typed::weight(this->arguments[4], this); info<T5>::typed::weight(this->arguments[5], this); info<T6>::typed::weight(this->arguments[6], this); info<T7>::typed::weight(this->arguments[7], this); info<T8>::typed::weight(this->arguments[8], this); info<T9>::typed::weight(this->arguments[9], this); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 > void mark_pin(void (*)( T0& , T1& , T2& , T3& , T4& , T5& , pinned T6& , T7& , T8& , T9& )) { this->pin = &current(info<T6>::typed::dereference(this->arguments[6])); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 > void prototype_template(void (*)( T0& , T1& , T2& , T3& , T4& , T5& , T6& , pinned T7& , T8& , T9& )) { ( (void (*)( T0& , T1& , T2& , T3& , T4& , T5& , T6& , pinned T7& , T8& , T9& )) this->op ) ( info<T0>::typed::dereference(this->arguments[0]) , info<T1>::typed::dereference(this->arguments[1]) , info<T2>::typed::dereference(this->arguments[2]) , info<T3>::typed::dereference(this->arguments[3]) , info<T4>::typed::dereference(this->arguments[4]) , info<T5>::typed::dereference(this->arguments[5]) , info<T6>::typed::dereference(this->arguments[6]) , marked info<T7>::typed::dereference(this->arguments[7]) , info<T8>::typed::dereference(this->arguments[8]) , info<T9>::typed::dereference(this->arguments[9]) ); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 > void cleanup_template(void (*)( T0& , T1& , T2& , T3& , T4& , T5& , T6& , pinned T7& , T8& , T9& )) { info<T0>::typed::deallocate(this->arguments[0]); info<T1>::typed::deallocate(this->arguments[1]); info<T2>::typed::deallocate(this->arguments[2]); info<T3>::typed::deallocate(this->arguments[3]); info<T4>::typed::deallocate(this->arguments[4]); info<T5>::typed::deallocate(this->arguments[5]); info<T6>::typed::deallocate(this->arguments[6]); info<T7>::typed::deallocate(this->arguments[7]); info<T8>::typed::deallocate(this->arguments[8]); info<T9>::typed::deallocate(this->arguments[9]); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 > void creditup_template(void (*)( T0& , T1& , T2& , T3& , T4& , T5& , T6& , pinned T7& , T8& , T9& )) { info<T0>::typed::weight(this->arguments[0], this); info<T1>::typed::weight(this->arguments[1], this); info<T2>::typed::weight(this->arguments[2], this); info<T3>::typed::weight(this->arguments[3], this); info<T4>::typed::weight(this->arguments[4], this); info<T5>::typed::weight(this->arguments[5], this); info<T6>::typed::weight(this->arguments[6], this); info<T7>::typed::weight(this->arguments[7], this); info<T8>::typed::weight(this->arguments[8], this); info<T9>::typed::weight(this->arguments[9], this); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 > void mark_pin(void (*)( T0& , T1& , T2& , T3& , T4& , T5& , T6& , pinned T7& , T8& , T9& )) { this->pin = &current(info<T7>::typed::dereference(this->arguments[7])); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 > void prototype_template(void (*)( T0& , T1& , T2& , T3& , T4& , T5& , T6& , T7& , pinned T8& , T9& )) { ( (void (*)( T0& , T1& , T2& , T3& , T4& , T5& , T6& , T7& , pinned T8& , T9& )) this->op ) ( info<T0>::typed::dereference(this->arguments[0]) , info<T1>::typed::dereference(this->arguments[1]) , info<T2>::typed::dereference(this->arguments[2]) , info<T3>::typed::dereference(this->arguments[3]) , info<T4>::typed::dereference(this->arguments[4]) , info<T5>::typed::dereference(this->arguments[5]) , info<T6>::typed::dereference(this->arguments[6]) , info<T7>::typed::dereference(this->arguments[7]) , marked info<T8>::typed::dereference(this->arguments[8]) , info<T9>::typed::dereference(this->arguments[9]) ); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 > void cleanup_template(void (*)( T0& , T1& , T2& , T3& , T4& , T5& , T6& , T7& , pinned T8& , T9& )) { info<T0>::typed::deallocate(this->arguments[0]); info<T1>::typed::deallocate(this->arguments[1]); info<T2>::typed::deallocate(this->arguments[2]); info<T3>::typed::deallocate(this->arguments[3]); info<T4>::typed::deallocate(this->arguments[4]); info<T5>::typed::deallocate(this->arguments[5]); info<T6>::typed::deallocate(this->arguments[6]); info<T7>::typed::deallocate(this->arguments[7]); info<T8>::typed::deallocate(this->arguments[8]); info<T9>::typed::deallocate(this->arguments[9]); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 > void creditup_template(void (*)( T0& , T1& , T2& , T3& , T4& , T5& , T6& , T7& , pinned T8& , T9& )) { info<T0>::typed::weight(this->arguments[0], this); info<T1>::typed::weight(this->arguments[1], this); info<T2>::typed::weight(this->arguments[2], this); info<T3>::typed::weight(this->arguments[3], this); info<T4>::typed::weight(this->arguments[4], this); info<T5>::typed::weight(this->arguments[5], this); info<T6>::typed::weight(this->arguments[6], this); info<T7>::typed::weight(this->arguments[7], this); info<T8>::typed::weight(this->arguments[8], this); info<T9>::typed::weight(this->arguments[9], this); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 > void mark_pin(void (*)( T0& , T1& , T2& , T3& , T4& , T5& , T6& , T7& , pinned T8& , T9& )) { this->pin = &current(info<T8>::typed::dereference(this->arguments[8])); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 > void prototype_template(void (*)( T0& , T1& , T2& , T3& , T4& , T5& , T6& , T7& , T8& , pinned T9& )) { ( (void (*)( T0& , T1& , T2& , T3& , T4& , T5& , T6& , T7& , T8& , pinned T9& )) this->op ) ( info<T0>::typed::dereference(this->arguments[0]) , info<T1>::typed::dereference(this->arguments[1]) , info<T2>::typed::dereference(this->arguments[2]) , info<T3>::typed::dereference(this->arguments[3]) , info<T4>::typed::dereference(this->arguments[4]) , info<T5>::typed::dereference(this->arguments[5]) , info<T6>::typed::dereference(this->arguments[6]) , info<T7>::typed::dereference(this->arguments[7]) , info<T8>::typed::dereference(this->arguments[8]) , marked info<T9>::typed::dereference(this->arguments[9]) ); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 > void cleanup_template(void (*)( T0& , T1& , T2& , T3& , T4& , T5& , T6& , T7& , T8& , pinned T9& )) { info<T0>::typed::deallocate(this->arguments[0]); info<T1>::typed::deallocate(this->arguments[1]); info<T2>::typed::deallocate(this->arguments[2]); info<T3>::typed::deallocate(this->arguments[3]); info<T4>::typed::deallocate(this->arguments[4]); info<T5>::typed::deallocate(this->arguments[5]); info<T6>::typed::deallocate(this->arguments[6]); info<T7>::typed::deallocate(this->arguments[7]); info<T8>::typed::deallocate(this->arguments[8]); info<T9>::typed::deallocate(this->arguments[9]); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 > void creditup_template(void (*)( T0& , T1& , T2& , T3& , T4& , T5& , T6& , T7& , T8& , pinned T9& )) { info<T0>::typed::weight(this->arguments[0], this); info<T1>::typed::weight(this->arguments[1], this); info<T2>::typed::weight(this->arguments[2], this); info<T3>::typed::weight(this->arguments[3], this); info<T4>::typed::weight(this->arguments[4], this); info<T5>::typed::weight(this->arguments[5], this); info<T6>::typed::weight(this->arguments[6], this); info<T7>::typed::weight(this->arguments[7], this); info<T8>::typed::weight(this->arguments[8], this); info<T9>::typed::weight(this->arguments[9], this); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 > void mark_pin(void (*)( T0& , T1& , T2& , T3& , T4& , T5& , T6& , T7& , T8& , pinned T9& )) { this->pin = &current(info<T9>::typed::dereference(this->arguments[9])); }
 #undef marked
 #undef pinned
