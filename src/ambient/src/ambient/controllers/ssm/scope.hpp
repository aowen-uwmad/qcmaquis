/*
 * Ambient, License - Version 1.0 - May 3rd, 2012
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#ifndef AMBIENT_INTERFACE_SCOPE_HPP
#define AMBIENT_INTERFACE_SCOPE_HPP

namespace ambient { 

        inline scope<base>::scope(){
            context = this;
            int db = ambient::isset("AMBIENT_DB_NUM_PROCS") ? ambient::getint("AMBIENT_DB_NUM_PROCS") : 0;
            c.init(db);

            this->round = ambient::num_workers();
            this->state = ambient::rank() ? ambient::remote : ambient::local;
            this->rank  = 0;
            this->scores.resize(round, 0);

            if(ambient::isset("AMBIENT_VERBOSE")){
                ambient::cout << "ambient: initialized ("                   << AMBIENT_THREADING_TAGLINE     << ")\n";
                if(ambient::isset("AMBIENT_MKL_NUM_THREADS")) ambient::cout << "ambient: selective threading (mkl)\n";
                ambient::cout << "ambient: size of instr bulk chunks: "     << AMBIENT_INSTR_BULK_CHUNK       << "\n";
                ambient::cout << "ambient: size of data bulk chunks: "      << AMBIENT_DATA_BULK_CHUNK        << "\n";
                if(ambient::isset("AMBIENT_BULK_LIMIT")) ambient::cout << "ambient: max chunks of data bulk: " << ambient::getint("AMBIENT_BULK_LIMIT") << "\n";
                if(ambient::isset("AMBIENT_BULK_REUSE")) ambient::cout << "ambient: enabled bulk garbage collection\n";
                if(ambient::isset("AMBIENT_BULK_DEALLOCATE")) ambient::cout << "ambient: enabled bulk deallocation\n";
                ambient::cout << "ambient: maximum sid value: "             << AMBIENT_MAX_SID                << "\n";
                ambient::cout << "ambient: number of db procs: "            << ambient::num_db_procs()        << "\n";
                ambient::cout << "ambient: number of work procs: "          << ambient::num_workers()         << "\n";
                ambient::cout << "ambient: number of threads per proc: "    << ambient::num_threads()         << "\n";
                ambient::cout << "\n";
            }
            if(ambient::isset("AMBIENT_MKL_NUM_THREADS")) mkl_parallel();
        }

        inline typename scope<base>::controller_type& scope<base>::operator()(size_t n){
            return c;
        }
        inline void scope<base>::sync(){
            c.flush();
            c.clear();  
            memory::data_bulk::drop();
        }
        inline bool scope<base>::scoped() const {
            return (context != this);
        }
        inline void scope<base>::set_context(const iscope* s){
            this->context = s; // no nesting
        }
        inline void scope<base>::pop_context(){
            this->context = this;
        }
        inline bool scope<base>::remote() const {
            return (this->context->state == ambient::remote);
        }
        inline bool scope<base>::local() const {
            return (this->context->state == ambient::local);
        }
        inline bool scope<base>::common() const {
            return (this->context->state == ambient::common);
        }
        inline int scope<base>::which() const {
            return this->context->rank;
        }
        inline void scope<base>::intend_read(models::ssm::revision* r){
            if(r == NULL || model_type::common(r)) return;
            this->score(model_type::owner(r), r->spec.extent);
        }
        inline void scope<base>::intend_write(models::ssm::revision* r){
            if(r == NULL || model_type::common(r)) return;
            this->select(model_type::owner(r));
        }
        inline bool scope<base>::tunable() const { 
            if(c.serial) return false;
            return (context == this);
        }
        inline void scope<base>::score(int r, size_t v) const {
            this->scores[r] += v;
        }
        inline void scope<base>::select(int r) const {
            this->stakeholders.push_back(r);
        }
        inline void scope<base>::schedule(){
            int max = 0;
            if(stakeholders.empty()){
                for(int i = 0; i < round; i++)
                if(scores[i] >= max){
                    max = scores[i];
                    this->rank = i;
                }
            }else{
                for(int i = 0; i < stakeholders.size(); i++){
                    int k = stakeholders[i];
                    if(scores[k] >= max){
                        max = scores[k];
                        this->rank = k;
                    }
                }
                stakeholders.clear();
            }
            std::fill(scores.begin(), scores.end(), 0);
            this->state = (this->rank == ambient::rank()) ? 
                          ambient::local : ambient::remote;
        }

        inline scope<threaded>::scope(const std::vector<int>& map, int iterator){
            if(ambient::parallel()) dry = true;
            else{ dry = false; cell.set_context(this); }
            int round = ambient::num_workers();

            int i = iterator >= map.size() ? iterator : map[iterator];
            if(i >= round) this->rank = i % round;
            else           this->rank = i;
            this->state = (this->rank == ambient::rank()) ? ambient::local : ambient::remote;
        }
        inline scope<threaded>::~scope(){
            if(!dry) cell.pop_context();
        }
        inline bool scope<threaded>::tunable() const {
            return false; 
        }


        inline void scope<single>::compact(size_t n){ 
            if(n <= ambient::num_workers()) return; 
            grain = (int)(n / ambient::num_workers()); // iterations before switch 
        } 
        inline void scope<single>::scatter(const std::vector<int>& p){
            permutation = p;
        } 
        inline scope<single>::scope(int value) : index(value), iterator(value) {
            this->factor = grain; grain = 1;
            this->map = permutation; permutation.clear();
            if(ambient::parallel()) dry = true;
            else{ dry = false; cell.set_context(this); }
            this->round = ambient::num_workers();
            this->eval();
        }
        inline void scope<single>::eval(){
            int i = iterator >= map.size() ? iterator : map[iterator];
            if(i >= this->round*this->factor) this->rank = i % this->round;
            else                              this->rank = i / this->factor;
            this->state = (this->rank == ambient::rank()) ? ambient::local : ambient::remote;
        }
        inline void scope<single>::shift(){
            this->iterator++;
            this->eval();
        }
        inline void scope<single>::shift_back(){ 
            this->iterator--;
            this->eval();
        } 
        inline scope<single>& scope<single>::operator++ (){
            this->shift();
            this->index++;
            return *this;
        }
        inline scope<single>& scope<single>::operator-- (){
            this->shift_back();
            this->index--;
            return *this;
        }
        inline scope<single>::operator size_t () const{
            return index;
        }
        inline bool scope<single>::operator < (size_t lim){
            return index < lim;
        }
        inline scope<single>::~scope(){
            if(!dry) cell.pop_context();
        }
        inline bool scope<single>::tunable() const {
            return false; 
        }


        inline scope<dedicated>::scope(){
            cell.set_context(this);
            this->rank = ambient::dedicated_rank();
            this->state = (this->rank == ambient::rank()) ? ambient::local : ambient::remote;
        }
        inline scope<dedicated>::~scope(){
            cell.pop_context();
        }
        inline bool scope<dedicated>::tunable() const {
            return false; 
        }

        inline scope<shared>::scope(){
            cell.set_context(this);
            this->state = ambient::common;
            this->rank = cell().get_shared_rank();
        }
        inline scope<shared>::~scope(){
            cell.pop_context();
        }
        inline bool scope<shared>::tunable() const { 
            return false; 
        }
}

#endif
