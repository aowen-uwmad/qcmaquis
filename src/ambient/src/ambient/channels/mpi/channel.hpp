/*
 * Ambient, License - Version 1.0 - May 3rd, 2012
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#define AMBIENT_MASTER_RANK 0
#define AMBIENT_MPI_THREADING MPI_THREAD_FUNNELED

namespace ambient { namespace channels { namespace mpi {

    inline void recv_impl(request_impl* r){
        MPI_Irecv(r->data, r->extent, MPI_DOUBLE, r->target, r->tag, MPI_COMM_WORLD, &r->mpi_request);
    }
    inline void send_impl(request_impl* r){
        MPI_Isend(r->data, r->extent, MPI_DOUBLE, r->target, r->tag, MPI_COMM_WORLD, &r->mpi_request);
    }
    inline bool test_impl(request_impl* r){
        int f = 0; MPI_Test(&r->mpi_request, &f, MPI_STATUS_IGNORE); return f;
    }

    inline channel::~channel(){
        MPI_Finalize();
    }

    inline void channel::init(){
        int level, zero = 0;
        MPI_Init_thread(&zero, NULL, AMBIENT_MPI_THREADING, &level);
        if(level != AMBIENT_MPI_THREADING) printf("Error: Wrong threading level\n");
        this->world = new group(AMBIENT_MASTER_RANK, MPI_COMM_WORLD);
        this->volume = this->world->size;
        this->db_volume = this->volume > AMBIENT_DB_PROCS ? AMBIENT_DB_PROCS : 0;
        this->sid = 13;
        this->scheme.resize(2); // N = 0,1 are empty
        for(int i = 2; i <= volume; i++) scheme.push_back(new binary_tree(i));
        for(int i = 0; i < 2*volume; i++) circle_ranks.push_back(i % volume);
    }

    inline void channel::barrier(){
        MPI_Barrier(MPI_COMM_WORLD);
    }

    inline size_t channel::dim(){
        return this->volume;
    }

    inline size_t channel::wk_dim(){
        return (this->volume-this->db_volume);
    }

    inline size_t channel::db_dim(){
        return this->db_volume;
    }

    inline void channel::index(){
        ++this->sid %= AMBIENT_MAX_SID;
    }

    inline int channel::generate_sid(){
        index();
        return get_sid();
    }

    inline int channel::get_sid() const {
        return this->sid;
    }

    inline collective<transformable>* channel::bcast(transformable& v, int root){
        return new collective<transformable>(v, root);
    }

    inline collective<transformable>* channel::bcast(transformable& v){
        return new collective<transformable>(v, ambient::rank());
    }

    inline collective<revision>* channel::get(revision& r){
        return new collective<revision>(r, r.owner);
    }

    inline collective<revision>* channel::set(revision& r){
        return new collective<revision>(r, ambient::rank());
    }

    inline const binary_tree& channel::get_scheme(int volume){
        return *this->scheme[volume];
    }

} } }
