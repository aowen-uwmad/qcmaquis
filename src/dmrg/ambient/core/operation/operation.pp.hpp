namespace core {
template< typename FP, typename T0 >
operation::operation( FP op, T0 *arg0 ){
    this->init();
    this->operation_ptr = (void(*)())op;
    this->count = 1;
    this->profiles = (p_object**)malloc(sizeof(p_object*)*this->count);
    this->arguments = new boost::shared_ptr<void>[this->count];
    this->arguments[0] = boost::shared_ptr<void>(get_handle(*arg0));
    void(operation::*ptr)(FP); ptr = &operation::prototype_template;
    this->prototype = (void(operation::*)())ptr;
    ptr = &operation::extract_template;
    this->extract = (void(operation::*)())ptr;
}
template < typename T0 >
void operation::extract_template(void (*)( T0& ))
{
    this->profiles[0] = &breakdown(*static_cast<T0*>(this->arguments[0].get()));
}
template < typename T0 >
void operation::prototype_template(void (*)( T0& ))
{
    ((void (*)( T0& ))this->operation_ptr)
    ( *static_cast<T0*>(this->arguments[0].get()) );
}
template < typename T0 > void operation::extract_template(void (*)( pinned T0& )) { this->profiles[0] = &breakdown(*static_cast<T0*>(this->arguments[0].get())); this->pin = this->profiles[0]; } template < typename T0 > void operation::prototype_template(void (*)( pinned T0& )) { ((void (*)( pinned T0& ))this->operation_ptr) ( marked *static_cast<T0*>(this->arguments[0].get()) ); }

template< typename FP, typename T0 , typename T1 >
operation::operation( FP op, T0 *arg0 , T1 *arg1 ){
    this->init();
    this->operation_ptr = (void(*)())op;
    this->count = 2;
    this->profiles = (p_object**)malloc(sizeof(p_object*)*this->count);
    this->arguments = new boost::shared_ptr<void>[this->count];
    this->arguments[0] = boost::shared_ptr<void>(get_handle(*arg0)); this->arguments[1] = boost::shared_ptr<void>(get_handle(*arg1));
    void(operation::*ptr)(FP); ptr = &operation::prototype_template;
    this->prototype = (void(operation::*)())ptr;
    ptr = &operation::extract_template;
    this->extract = (void(operation::*)())ptr;
}
template < typename T0 , typename T1 >
void operation::extract_template(void (*)( T0& , T1& ))
{
    this->profiles[0] = &breakdown(*static_cast<T0*>(this->arguments[0].get())); this->profiles[1] = &breakdown(*static_cast<T1*>(this->arguments[1].get()));
}
template < typename T0 , typename T1 >
void operation::prototype_template(void (*)( T0& , T1& ))
{
    ((void (*)( T0& , T1& ))this->operation_ptr)
    ( *static_cast<T0*>(this->arguments[0].get()) , *static_cast<T1*>(this->arguments[1].get()) );
}
template < typename T0 , typename T1 > void operation::extract_template(void (*)( pinned T0& , T1& )) { this->profiles[0] = &breakdown(*static_cast<T0*>(this->arguments[0].get())); this->profiles[1] = &breakdown(*static_cast<T1*>(this->arguments[1].get())); this->pin = this->profiles[0]; } template < typename T0 , typename T1 > void operation::prototype_template(void (*)( pinned T0& , T1& )) { ((void (*)( pinned T0& , T1& ))this->operation_ptr) ( marked *static_cast<T0*>(this->arguments[0].get()) , *static_cast<T1*>(this->arguments[1].get()) ); } template < typename T0 , typename T1 > void operation::extract_template(void (*)( T0& , pinned T1& )) { this->profiles[0] = &breakdown(*static_cast<T0*>(this->arguments[0].get())); this->profiles[1] = &breakdown(*static_cast<T1*>(this->arguments[1].get())); this->pin = this->profiles[1]; } template < typename T0 , typename T1 > void operation::prototype_template(void (*)( T0& , pinned T1& )) { ((void (*)( T0& , pinned T1& ))this->operation_ptr) ( *static_cast<T0*>(this->arguments[0].get()) , marked *static_cast<T1*>(this->arguments[1].get()) ); }

template< typename FP, typename T0 , typename T1 , typename T2 >
operation::operation( FP op, T0 *arg0 , T1 *arg1 , T2 *arg2 ){
    this->init();
    this->operation_ptr = (void(*)())op;
    this->count = 3;
    this->profiles = (p_object**)malloc(sizeof(p_object*)*this->count);
    this->arguments = new boost::shared_ptr<void>[this->count];
    this->arguments[0] = boost::shared_ptr<void>(get_handle(*arg0)); this->arguments[1] = boost::shared_ptr<void>(get_handle(*arg1)); this->arguments[2] = boost::shared_ptr<void>(get_handle(*arg2));
    void(operation::*ptr)(FP); ptr = &operation::prototype_template;
    this->prototype = (void(operation::*)())ptr;
    ptr = &operation::extract_template;
    this->extract = (void(operation::*)())ptr;
}
template < typename T0 , typename T1 , typename T2 >
void operation::extract_template(void (*)( T0& , T1& , T2& ))
{
    this->profiles[0] = &breakdown(*static_cast<T0*>(this->arguments[0].get())); this->profiles[1] = &breakdown(*static_cast<T1*>(this->arguments[1].get())); this->profiles[2] = &breakdown(*static_cast<T2*>(this->arguments[2].get()));
}
template < typename T0 , typename T1 , typename T2 >
void operation::prototype_template(void (*)( T0& , T1& , T2& ))
{
    ((void (*)( T0& , T1& , T2& ))this->operation_ptr)
    ( *static_cast<T0*>(this->arguments[0].get()) , *static_cast<T1*>(this->arguments[1].get()) , *static_cast<T2*>(this->arguments[2].get()) );
}
template < typename T0 , typename T1 , typename T2 > void operation::extract_template(void (*)( pinned T0& , T1& , T2& )) { this->profiles[0] = &breakdown(*static_cast<T0*>(this->arguments[0].get())); this->profiles[1] = &breakdown(*static_cast<T1*>(this->arguments[1].get())); this->profiles[2] = &breakdown(*static_cast<T2*>(this->arguments[2].get())); this->pin = this->profiles[0]; } template < typename T0 , typename T1 , typename T2 > void operation::prototype_template(void (*)( pinned T0& , T1& , T2& )) { ((void (*)( pinned T0& , T1& , T2& ))this->operation_ptr) ( marked *static_cast<T0*>(this->arguments[0].get()) , *static_cast<T1*>(this->arguments[1].get()) , *static_cast<T2*>(this->arguments[2].get()) ); } template < typename T0 , typename T1 , typename T2 > void operation::extract_template(void (*)( T0& , pinned T1& , T2& )) { this->profiles[0] = &breakdown(*static_cast<T0*>(this->arguments[0].get())); this->profiles[1] = &breakdown(*static_cast<T1*>(this->arguments[1].get())); this->profiles[2] = &breakdown(*static_cast<T2*>(this->arguments[2].get())); this->pin = this->profiles[1]; } template < typename T0 , typename T1 , typename T2 > void operation::prototype_template(void (*)( T0& , pinned T1& , T2& )) { ((void (*)( T0& , pinned T1& , T2& ))this->operation_ptr) ( *static_cast<T0*>(this->arguments[0].get()) , marked *static_cast<T1*>(this->arguments[1].get()) , *static_cast<T2*>(this->arguments[2].get()) ); } template < typename T0 , typename T1 , typename T2 > void operation::extract_template(void (*)( T0& , T1& , pinned T2& )) { this->profiles[0] = &breakdown(*static_cast<T0*>(this->arguments[0].get())); this->profiles[1] = &breakdown(*static_cast<T1*>(this->arguments[1].get())); this->profiles[2] = &breakdown(*static_cast<T2*>(this->arguments[2].get())); this->pin = this->profiles[2]; } template < typename T0 , typename T1 , typename T2 > void operation::prototype_template(void (*)( T0& , T1& , pinned T2& )) { ((void (*)( T0& , T1& , pinned T2& ))this->operation_ptr) ( *static_cast<T0*>(this->arguments[0].get()) , *static_cast<T1*>(this->arguments[1].get()) , marked *static_cast<T2*>(this->arguments[2].get()) ); }

template< typename FP, typename T0 , typename T1 , typename T2 , typename T3 >
operation::operation( FP op, T0 *arg0 , T1 *arg1 , T2 *arg2 , T3 *arg3 ){
    this->init();
    this->operation_ptr = (void(*)())op;
    this->count = 4;
    this->profiles = (p_object**)malloc(sizeof(p_object*)*this->count);
    this->arguments = new boost::shared_ptr<void>[this->count];
    this->arguments[0] = boost::shared_ptr<void>(get_handle(*arg0)); this->arguments[1] = boost::shared_ptr<void>(get_handle(*arg1)); this->arguments[2] = boost::shared_ptr<void>(get_handle(*arg2)); this->arguments[3] = boost::shared_ptr<void>(get_handle(*arg3));
    void(operation::*ptr)(FP); ptr = &operation::prototype_template;
    this->prototype = (void(operation::*)())ptr;
    ptr = &operation::extract_template;
    this->extract = (void(operation::*)())ptr;
}
template < typename T0 , typename T1 , typename T2 , typename T3 >
void operation::extract_template(void (*)( T0& , T1& , T2& , T3& ))
{
    this->profiles[0] = &breakdown(*static_cast<T0*>(this->arguments[0].get())); this->profiles[1] = &breakdown(*static_cast<T1*>(this->arguments[1].get())); this->profiles[2] = &breakdown(*static_cast<T2*>(this->arguments[2].get())); this->profiles[3] = &breakdown(*static_cast<T3*>(this->arguments[3].get()));
}
template < typename T0 , typename T1 , typename T2 , typename T3 >
void operation::prototype_template(void (*)( T0& , T1& , T2& , T3& ))
{
    ((void (*)( T0& , T1& , T2& , T3& ))this->operation_ptr)
    ( *static_cast<T0*>(this->arguments[0].get()) , *static_cast<T1*>(this->arguments[1].get()) , *static_cast<T2*>(this->arguments[2].get()) , *static_cast<T3*>(this->arguments[3].get()) );
}
template < typename T0 , typename T1 , typename T2 , typename T3 > void operation::extract_template(void (*)( pinned T0& , T1& , T2& , T3& )) { this->profiles[0] = &breakdown(*static_cast<T0*>(this->arguments[0].get())); this->profiles[1] = &breakdown(*static_cast<T1*>(this->arguments[1].get())); this->profiles[2] = &breakdown(*static_cast<T2*>(this->arguments[2].get())); this->profiles[3] = &breakdown(*static_cast<T3*>(this->arguments[3].get())); this->pin = this->profiles[0]; } template < typename T0 , typename T1 , typename T2 , typename T3 > void operation::prototype_template(void (*)( pinned T0& , T1& , T2& , T3& )) { ((void (*)( pinned T0& , T1& , T2& , T3& ))this->operation_ptr) ( marked *static_cast<T0*>(this->arguments[0].get()) , *static_cast<T1*>(this->arguments[1].get()) , *static_cast<T2*>(this->arguments[2].get()) , *static_cast<T3*>(this->arguments[3].get()) ); } template < typename T0 , typename T1 , typename T2 , typename T3 > void operation::extract_template(void (*)( T0& , pinned T1& , T2& , T3& )) { this->profiles[0] = &breakdown(*static_cast<T0*>(this->arguments[0].get())); this->profiles[1] = &breakdown(*static_cast<T1*>(this->arguments[1].get())); this->profiles[2] = &breakdown(*static_cast<T2*>(this->arguments[2].get())); this->profiles[3] = &breakdown(*static_cast<T3*>(this->arguments[3].get())); this->pin = this->profiles[1]; } template < typename T0 , typename T1 , typename T2 , typename T3 > void operation::prototype_template(void (*)( T0& , pinned T1& , T2& , T3& )) { ((void (*)( T0& , pinned T1& , T2& , T3& ))this->operation_ptr) ( *static_cast<T0*>(this->arguments[0].get()) , marked *static_cast<T1*>(this->arguments[1].get()) , *static_cast<T2*>(this->arguments[2].get()) , *static_cast<T3*>(this->arguments[3].get()) ); } template < typename T0 , typename T1 , typename T2 , typename T3 > void operation::extract_template(void (*)( T0& , T1& , pinned T2& , T3& )) { this->profiles[0] = &breakdown(*static_cast<T0*>(this->arguments[0].get())); this->profiles[1] = &breakdown(*static_cast<T1*>(this->arguments[1].get())); this->profiles[2] = &breakdown(*static_cast<T2*>(this->arguments[2].get())); this->profiles[3] = &breakdown(*static_cast<T3*>(this->arguments[3].get())); this->pin = this->profiles[2]; } template < typename T0 , typename T1 , typename T2 , typename T3 > void operation::prototype_template(void (*)( T0& , T1& , pinned T2& , T3& )) { ((void (*)( T0& , T1& , pinned T2& , T3& ))this->operation_ptr) ( *static_cast<T0*>(this->arguments[0].get()) , *static_cast<T1*>(this->arguments[1].get()) , marked *static_cast<T2*>(this->arguments[2].get()) , *static_cast<T3*>(this->arguments[3].get()) ); } template < typename T0 , typename T1 , typename T2 , typename T3 > void operation::extract_template(void (*)( T0& , T1& , T2& , pinned T3& )) { this->profiles[0] = &breakdown(*static_cast<T0*>(this->arguments[0].get())); this->profiles[1] = &breakdown(*static_cast<T1*>(this->arguments[1].get())); this->profiles[2] = &breakdown(*static_cast<T2*>(this->arguments[2].get())); this->profiles[3] = &breakdown(*static_cast<T3*>(this->arguments[3].get())); this->pin = this->profiles[3]; } template < typename T0 , typename T1 , typename T2 , typename T3 > void operation::prototype_template(void (*)( T0& , T1& , T2& , pinned T3& )) { ((void (*)( T0& , T1& , T2& , pinned T3& ))this->operation_ptr) ( *static_cast<T0*>(this->arguments[0].get()) , *static_cast<T1*>(this->arguments[1].get()) , *static_cast<T2*>(this->arguments[2].get()) , marked *static_cast<T3*>(this->arguments[3].get()) ); }

template< typename FP, typename T0 , typename T1 , typename T2 , typename T3 , typename T4 >
operation::operation( FP op, T0 *arg0 , T1 *arg1 , T2 *arg2 , T3 *arg3 , T4 *arg4 ){
    this->init();
    this->operation_ptr = (void(*)())op;
    this->count = 5;
    this->profiles = (p_object**)malloc(sizeof(p_object*)*this->count);
    this->arguments = new boost::shared_ptr<void>[this->count];
    this->arguments[0] = boost::shared_ptr<void>(get_handle(*arg0)); this->arguments[1] = boost::shared_ptr<void>(get_handle(*arg1)); this->arguments[2] = boost::shared_ptr<void>(get_handle(*arg2)); this->arguments[3] = boost::shared_ptr<void>(get_handle(*arg3)); this->arguments[4] = boost::shared_ptr<void>(get_handle(*arg4));
    void(operation::*ptr)(FP); ptr = &operation::prototype_template;
    this->prototype = (void(operation::*)())ptr;
    ptr = &operation::extract_template;
    this->extract = (void(operation::*)())ptr;
}
template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 >
void operation::extract_template(void (*)( T0& , T1& , T2& , T3& , T4& ))
{
    this->profiles[0] = &breakdown(*static_cast<T0*>(this->arguments[0].get())); this->profiles[1] = &breakdown(*static_cast<T1*>(this->arguments[1].get())); this->profiles[2] = &breakdown(*static_cast<T2*>(this->arguments[2].get())); this->profiles[3] = &breakdown(*static_cast<T3*>(this->arguments[3].get())); this->profiles[4] = &breakdown(*static_cast<T4*>(this->arguments[4].get()));
}
template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 >
void operation::prototype_template(void (*)( T0& , T1& , T2& , T3& , T4& ))
{
    ((void (*)( T0& , T1& , T2& , T3& , T4& ))this->operation_ptr)
    ( *static_cast<T0*>(this->arguments[0].get()) , *static_cast<T1*>(this->arguments[1].get()) , *static_cast<T2*>(this->arguments[2].get()) , *static_cast<T3*>(this->arguments[3].get()) , *static_cast<T4*>(this->arguments[4].get()) );
}
template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 > void operation::extract_template(void (*)( pinned T0& , T1& , T2& , T3& , T4& )) { this->profiles[0] = &breakdown(*static_cast<T0*>(this->arguments[0].get())); this->profiles[1] = &breakdown(*static_cast<T1*>(this->arguments[1].get())); this->profiles[2] = &breakdown(*static_cast<T2*>(this->arguments[2].get())); this->profiles[3] = &breakdown(*static_cast<T3*>(this->arguments[3].get())); this->profiles[4] = &breakdown(*static_cast<T4*>(this->arguments[4].get())); this->pin = this->profiles[0]; } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 > void operation::prototype_template(void (*)( pinned T0& , T1& , T2& , T3& , T4& )) { ((void (*)( pinned T0& , T1& , T2& , T3& , T4& ))this->operation_ptr) ( marked *static_cast<T0*>(this->arguments[0].get()) , *static_cast<T1*>(this->arguments[1].get()) , *static_cast<T2*>(this->arguments[2].get()) , *static_cast<T3*>(this->arguments[3].get()) , *static_cast<T4*>(this->arguments[4].get()) ); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 > void operation::extract_template(void (*)( T0& , pinned T1& , T2& , T3& , T4& )) { this->profiles[0] = &breakdown(*static_cast<T0*>(this->arguments[0].get())); this->profiles[1] = &breakdown(*static_cast<T1*>(this->arguments[1].get())); this->profiles[2] = &breakdown(*static_cast<T2*>(this->arguments[2].get())); this->profiles[3] = &breakdown(*static_cast<T3*>(this->arguments[3].get())); this->profiles[4] = &breakdown(*static_cast<T4*>(this->arguments[4].get())); this->pin = this->profiles[1]; } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 > void operation::prototype_template(void (*)( T0& , pinned T1& , T2& , T3& , T4& )) { ((void (*)( T0& , pinned T1& , T2& , T3& , T4& ))this->operation_ptr) ( *static_cast<T0*>(this->arguments[0].get()) , marked *static_cast<T1*>(this->arguments[1].get()) , *static_cast<T2*>(this->arguments[2].get()) , *static_cast<T3*>(this->arguments[3].get()) , *static_cast<T4*>(this->arguments[4].get()) ); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 > void operation::extract_template(void (*)( T0& , T1& , pinned T2& , T3& , T4& )) { this->profiles[0] = &breakdown(*static_cast<T0*>(this->arguments[0].get())); this->profiles[1] = &breakdown(*static_cast<T1*>(this->arguments[1].get())); this->profiles[2] = &breakdown(*static_cast<T2*>(this->arguments[2].get())); this->profiles[3] = &breakdown(*static_cast<T3*>(this->arguments[3].get())); this->profiles[4] = &breakdown(*static_cast<T4*>(this->arguments[4].get())); this->pin = this->profiles[2]; } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 > void operation::prototype_template(void (*)( T0& , T1& , pinned T2& , T3& , T4& )) { ((void (*)( T0& , T1& , pinned T2& , T3& , T4& ))this->operation_ptr) ( *static_cast<T0*>(this->arguments[0].get()) , *static_cast<T1*>(this->arguments[1].get()) , marked *static_cast<T2*>(this->arguments[2].get()) , *static_cast<T3*>(this->arguments[3].get()) , *static_cast<T4*>(this->arguments[4].get()) ); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 > void operation::extract_template(void (*)( T0& , T1& , T2& , pinned T3& , T4& )) { this->profiles[0] = &breakdown(*static_cast<T0*>(this->arguments[0].get())); this->profiles[1] = &breakdown(*static_cast<T1*>(this->arguments[1].get())); this->profiles[2] = &breakdown(*static_cast<T2*>(this->arguments[2].get())); this->profiles[3] = &breakdown(*static_cast<T3*>(this->arguments[3].get())); this->profiles[4] = &breakdown(*static_cast<T4*>(this->arguments[4].get())); this->pin = this->profiles[3]; } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 > void operation::prototype_template(void (*)( T0& , T1& , T2& , pinned T3& , T4& )) { ((void (*)( T0& , T1& , T2& , pinned T3& , T4& ))this->operation_ptr) ( *static_cast<T0*>(this->arguments[0].get()) , *static_cast<T1*>(this->arguments[1].get()) , *static_cast<T2*>(this->arguments[2].get()) , marked *static_cast<T3*>(this->arguments[3].get()) , *static_cast<T4*>(this->arguments[4].get()) ); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 > void operation::extract_template(void (*)( T0& , T1& , T2& , T3& , pinned T4& )) { this->profiles[0] = &breakdown(*static_cast<T0*>(this->arguments[0].get())); this->profiles[1] = &breakdown(*static_cast<T1*>(this->arguments[1].get())); this->profiles[2] = &breakdown(*static_cast<T2*>(this->arguments[2].get())); this->profiles[3] = &breakdown(*static_cast<T3*>(this->arguments[3].get())); this->profiles[4] = &breakdown(*static_cast<T4*>(this->arguments[4].get())); this->pin = this->profiles[4]; } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 > void operation::prototype_template(void (*)( T0& , T1& , T2& , T3& , pinned T4& )) { ((void (*)( T0& , T1& , T2& , T3& , pinned T4& ))this->operation_ptr) ( *static_cast<T0*>(this->arguments[0].get()) , *static_cast<T1*>(this->arguments[1].get()) , *static_cast<T2*>(this->arguments[2].get()) , *static_cast<T3*>(this->arguments[3].get()) , marked *static_cast<T4*>(this->arguments[4].get()) ); }

template< typename FP, typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 >
operation::operation( FP op, T0 *arg0 , T1 *arg1 , T2 *arg2 , T3 *arg3 , T4 *arg4 , T5 *arg5 ){
    this->init();
    this->operation_ptr = (void(*)())op;
    this->count = 6;
    this->profiles = (p_object**)malloc(sizeof(p_object*)*this->count);
    this->arguments = new boost::shared_ptr<void>[this->count];
    this->arguments[0] = boost::shared_ptr<void>(get_handle(*arg0)); this->arguments[1] = boost::shared_ptr<void>(get_handle(*arg1)); this->arguments[2] = boost::shared_ptr<void>(get_handle(*arg2)); this->arguments[3] = boost::shared_ptr<void>(get_handle(*arg3)); this->arguments[4] = boost::shared_ptr<void>(get_handle(*arg4)); this->arguments[5] = boost::shared_ptr<void>(get_handle(*arg5));
    void(operation::*ptr)(FP); ptr = &operation::prototype_template;
    this->prototype = (void(operation::*)())ptr;
    ptr = &operation::extract_template;
    this->extract = (void(operation::*)())ptr;
}
template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 >
void operation::extract_template(void (*)( T0& , T1& , T2& , T3& , T4& , T5& ))
{
    this->profiles[0] = &breakdown(*static_cast<T0*>(this->arguments[0].get())); this->profiles[1] = &breakdown(*static_cast<T1*>(this->arguments[1].get())); this->profiles[2] = &breakdown(*static_cast<T2*>(this->arguments[2].get())); this->profiles[3] = &breakdown(*static_cast<T3*>(this->arguments[3].get())); this->profiles[4] = &breakdown(*static_cast<T4*>(this->arguments[4].get())); this->profiles[5] = &breakdown(*static_cast<T5*>(this->arguments[5].get()));
}
template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 >
void operation::prototype_template(void (*)( T0& , T1& , T2& , T3& , T4& , T5& ))
{
    ((void (*)( T0& , T1& , T2& , T3& , T4& , T5& ))this->operation_ptr)
    ( *static_cast<T0*>(this->arguments[0].get()) , *static_cast<T1*>(this->arguments[1].get()) , *static_cast<T2*>(this->arguments[2].get()) , *static_cast<T3*>(this->arguments[3].get()) , *static_cast<T4*>(this->arguments[4].get()) , *static_cast<T5*>(this->arguments[5].get()) );
}
template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 > void operation::extract_template(void (*)( pinned T0& , T1& , T2& , T3& , T4& , T5& )) { this->profiles[0] = &breakdown(*static_cast<T0*>(this->arguments[0].get())); this->profiles[1] = &breakdown(*static_cast<T1*>(this->arguments[1].get())); this->profiles[2] = &breakdown(*static_cast<T2*>(this->arguments[2].get())); this->profiles[3] = &breakdown(*static_cast<T3*>(this->arguments[3].get())); this->profiles[4] = &breakdown(*static_cast<T4*>(this->arguments[4].get())); this->profiles[5] = &breakdown(*static_cast<T5*>(this->arguments[5].get())); this->pin = this->profiles[0]; } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 > void operation::prototype_template(void (*)( pinned T0& , T1& , T2& , T3& , T4& , T5& )) { ((void (*)( pinned T0& , T1& , T2& , T3& , T4& , T5& ))this->operation_ptr) ( marked *static_cast<T0*>(this->arguments[0].get()) , *static_cast<T1*>(this->arguments[1].get()) , *static_cast<T2*>(this->arguments[2].get()) , *static_cast<T3*>(this->arguments[3].get()) , *static_cast<T4*>(this->arguments[4].get()) , *static_cast<T5*>(this->arguments[5].get()) ); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 > void operation::extract_template(void (*)( T0& , pinned T1& , T2& , T3& , T4& , T5& )) { this->profiles[0] = &breakdown(*static_cast<T0*>(this->arguments[0].get())); this->profiles[1] = &breakdown(*static_cast<T1*>(this->arguments[1].get())); this->profiles[2] = &breakdown(*static_cast<T2*>(this->arguments[2].get())); this->profiles[3] = &breakdown(*static_cast<T3*>(this->arguments[3].get())); this->profiles[4] = &breakdown(*static_cast<T4*>(this->arguments[4].get())); this->profiles[5] = &breakdown(*static_cast<T5*>(this->arguments[5].get())); this->pin = this->profiles[1]; } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 > void operation::prototype_template(void (*)( T0& , pinned T1& , T2& , T3& , T4& , T5& )) { ((void (*)( T0& , pinned T1& , T2& , T3& , T4& , T5& ))this->operation_ptr) ( *static_cast<T0*>(this->arguments[0].get()) , marked *static_cast<T1*>(this->arguments[1].get()) , *static_cast<T2*>(this->arguments[2].get()) , *static_cast<T3*>(this->arguments[3].get()) , *static_cast<T4*>(this->arguments[4].get()) , *static_cast<T5*>(this->arguments[5].get()) ); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 > void operation::extract_template(void (*)( T0& , T1& , pinned T2& , T3& , T4& , T5& )) { this->profiles[0] = &breakdown(*static_cast<T0*>(this->arguments[0].get())); this->profiles[1] = &breakdown(*static_cast<T1*>(this->arguments[1].get())); this->profiles[2] = &breakdown(*static_cast<T2*>(this->arguments[2].get())); this->profiles[3] = &breakdown(*static_cast<T3*>(this->arguments[3].get())); this->profiles[4] = &breakdown(*static_cast<T4*>(this->arguments[4].get())); this->profiles[5] = &breakdown(*static_cast<T5*>(this->arguments[5].get())); this->pin = this->profiles[2]; } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 > void operation::prototype_template(void (*)( T0& , T1& , pinned T2& , T3& , T4& , T5& )) { ((void (*)( T0& , T1& , pinned T2& , T3& , T4& , T5& ))this->operation_ptr) ( *static_cast<T0*>(this->arguments[0].get()) , *static_cast<T1*>(this->arguments[1].get()) , marked *static_cast<T2*>(this->arguments[2].get()) , *static_cast<T3*>(this->arguments[3].get()) , *static_cast<T4*>(this->arguments[4].get()) , *static_cast<T5*>(this->arguments[5].get()) ); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 > void operation::extract_template(void (*)( T0& , T1& , T2& , pinned T3& , T4& , T5& )) { this->profiles[0] = &breakdown(*static_cast<T0*>(this->arguments[0].get())); this->profiles[1] = &breakdown(*static_cast<T1*>(this->arguments[1].get())); this->profiles[2] = &breakdown(*static_cast<T2*>(this->arguments[2].get())); this->profiles[3] = &breakdown(*static_cast<T3*>(this->arguments[3].get())); this->profiles[4] = &breakdown(*static_cast<T4*>(this->arguments[4].get())); this->profiles[5] = &breakdown(*static_cast<T5*>(this->arguments[5].get())); this->pin = this->profiles[3]; } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 > void operation::prototype_template(void (*)( T0& , T1& , T2& , pinned T3& , T4& , T5& )) { ((void (*)( T0& , T1& , T2& , pinned T3& , T4& , T5& ))this->operation_ptr) ( *static_cast<T0*>(this->arguments[0].get()) , *static_cast<T1*>(this->arguments[1].get()) , *static_cast<T2*>(this->arguments[2].get()) , marked *static_cast<T3*>(this->arguments[3].get()) , *static_cast<T4*>(this->arguments[4].get()) , *static_cast<T5*>(this->arguments[5].get()) ); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 > void operation::extract_template(void (*)( T0& , T1& , T2& , T3& , pinned T4& , T5& )) { this->profiles[0] = &breakdown(*static_cast<T0*>(this->arguments[0].get())); this->profiles[1] = &breakdown(*static_cast<T1*>(this->arguments[1].get())); this->profiles[2] = &breakdown(*static_cast<T2*>(this->arguments[2].get())); this->profiles[3] = &breakdown(*static_cast<T3*>(this->arguments[3].get())); this->profiles[4] = &breakdown(*static_cast<T4*>(this->arguments[4].get())); this->profiles[5] = &breakdown(*static_cast<T5*>(this->arguments[5].get())); this->pin = this->profiles[4]; } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 > void operation::prototype_template(void (*)( T0& , T1& , T2& , T3& , pinned T4& , T5& )) { ((void (*)( T0& , T1& , T2& , T3& , pinned T4& , T5& ))this->operation_ptr) ( *static_cast<T0*>(this->arguments[0].get()) , *static_cast<T1*>(this->arguments[1].get()) , *static_cast<T2*>(this->arguments[2].get()) , *static_cast<T3*>(this->arguments[3].get()) , marked *static_cast<T4*>(this->arguments[4].get()) , *static_cast<T5*>(this->arguments[5].get()) ); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 > void operation::extract_template(void (*)( T0& , T1& , T2& , T3& , T4& , pinned T5& )) { this->profiles[0] = &breakdown(*static_cast<T0*>(this->arguments[0].get())); this->profiles[1] = &breakdown(*static_cast<T1*>(this->arguments[1].get())); this->profiles[2] = &breakdown(*static_cast<T2*>(this->arguments[2].get())); this->profiles[3] = &breakdown(*static_cast<T3*>(this->arguments[3].get())); this->profiles[4] = &breakdown(*static_cast<T4*>(this->arguments[4].get())); this->profiles[5] = &breakdown(*static_cast<T5*>(this->arguments[5].get())); this->pin = this->profiles[5]; } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 > void operation::prototype_template(void (*)( T0& , T1& , T2& , T3& , T4& , pinned T5& )) { ((void (*)( T0& , T1& , T2& , T3& , T4& , pinned T5& ))this->operation_ptr) ( *static_cast<T0*>(this->arguments[0].get()) , *static_cast<T1*>(this->arguments[1].get()) , *static_cast<T2*>(this->arguments[2].get()) , *static_cast<T3*>(this->arguments[3].get()) , *static_cast<T4*>(this->arguments[4].get()) , marked *static_cast<T5*>(this->arguments[5].get()) ); }

template< typename FP, typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 >
operation::operation( FP op, T0 *arg0 , T1 *arg1 , T2 *arg2 , T3 *arg3 , T4 *arg4 , T5 *arg5 , T6 *arg6 ){
    this->init();
    this->operation_ptr = (void(*)())op;
    this->count = 7;
    this->profiles = (p_object**)malloc(sizeof(p_object*)*this->count);
    this->arguments = new boost::shared_ptr<void>[this->count];
    this->arguments[0] = boost::shared_ptr<void>(get_handle(*arg0)); this->arguments[1] = boost::shared_ptr<void>(get_handle(*arg1)); this->arguments[2] = boost::shared_ptr<void>(get_handle(*arg2)); this->arguments[3] = boost::shared_ptr<void>(get_handle(*arg3)); this->arguments[4] = boost::shared_ptr<void>(get_handle(*arg4)); this->arguments[5] = boost::shared_ptr<void>(get_handle(*arg5)); this->arguments[6] = boost::shared_ptr<void>(get_handle(*arg6));
    void(operation::*ptr)(FP); ptr = &operation::prototype_template;
    this->prototype = (void(operation::*)())ptr;
    ptr = &operation::extract_template;
    this->extract = (void(operation::*)())ptr;
}
template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 >
void operation::extract_template(void (*)( T0& , T1& , T2& , T3& , T4& , T5& , T6& ))
{
    this->profiles[0] = &breakdown(*static_cast<T0*>(this->arguments[0].get())); this->profiles[1] = &breakdown(*static_cast<T1*>(this->arguments[1].get())); this->profiles[2] = &breakdown(*static_cast<T2*>(this->arguments[2].get())); this->profiles[3] = &breakdown(*static_cast<T3*>(this->arguments[3].get())); this->profiles[4] = &breakdown(*static_cast<T4*>(this->arguments[4].get())); this->profiles[5] = &breakdown(*static_cast<T5*>(this->arguments[5].get())); this->profiles[6] = &breakdown(*static_cast<T6*>(this->arguments[6].get()));
}
template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 >
void operation::prototype_template(void (*)( T0& , T1& , T2& , T3& , T4& , T5& , T6& ))
{
    ((void (*)( T0& , T1& , T2& , T3& , T4& , T5& , T6& ))this->operation_ptr)
    ( *static_cast<T0*>(this->arguments[0].get()) , *static_cast<T1*>(this->arguments[1].get()) , *static_cast<T2*>(this->arguments[2].get()) , *static_cast<T3*>(this->arguments[3].get()) , *static_cast<T4*>(this->arguments[4].get()) , *static_cast<T5*>(this->arguments[5].get()) , *static_cast<T6*>(this->arguments[6].get()) );
}
template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 > void operation::extract_template(void (*)( pinned T0& , T1& , T2& , T3& , T4& , T5& , T6& )) { this->profiles[0] = &breakdown(*static_cast<T0*>(this->arguments[0].get())); this->profiles[1] = &breakdown(*static_cast<T1*>(this->arguments[1].get())); this->profiles[2] = &breakdown(*static_cast<T2*>(this->arguments[2].get())); this->profiles[3] = &breakdown(*static_cast<T3*>(this->arguments[3].get())); this->profiles[4] = &breakdown(*static_cast<T4*>(this->arguments[4].get())); this->profiles[5] = &breakdown(*static_cast<T5*>(this->arguments[5].get())); this->profiles[6] = &breakdown(*static_cast<T6*>(this->arguments[6].get())); this->pin = this->profiles[0]; } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 > void operation::prototype_template(void (*)( pinned T0& , T1& , T2& , T3& , T4& , T5& , T6& )) { ((void (*)( pinned T0& , T1& , T2& , T3& , T4& , T5& , T6& ))this->operation_ptr) ( marked *static_cast<T0*>(this->arguments[0].get()) , *static_cast<T1*>(this->arguments[1].get()) , *static_cast<T2*>(this->arguments[2].get()) , *static_cast<T3*>(this->arguments[3].get()) , *static_cast<T4*>(this->arguments[4].get()) , *static_cast<T5*>(this->arguments[5].get()) , *static_cast<T6*>(this->arguments[6].get()) ); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 > void operation::extract_template(void (*)( T0& , pinned T1& , T2& , T3& , T4& , T5& , T6& )) { this->profiles[0] = &breakdown(*static_cast<T0*>(this->arguments[0].get())); this->profiles[1] = &breakdown(*static_cast<T1*>(this->arguments[1].get())); this->profiles[2] = &breakdown(*static_cast<T2*>(this->arguments[2].get())); this->profiles[3] = &breakdown(*static_cast<T3*>(this->arguments[3].get())); this->profiles[4] = &breakdown(*static_cast<T4*>(this->arguments[4].get())); this->profiles[5] = &breakdown(*static_cast<T5*>(this->arguments[5].get())); this->profiles[6] = &breakdown(*static_cast<T6*>(this->arguments[6].get())); this->pin = this->profiles[1]; } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 > void operation::prototype_template(void (*)( T0& , pinned T1& , T2& , T3& , T4& , T5& , T6& )) { ((void (*)( T0& , pinned T1& , T2& , T3& , T4& , T5& , T6& ))this->operation_ptr) ( *static_cast<T0*>(this->arguments[0].get()) , marked *static_cast<T1*>(this->arguments[1].get()) , *static_cast<T2*>(this->arguments[2].get()) , *static_cast<T3*>(this->arguments[3].get()) , *static_cast<T4*>(this->arguments[4].get()) , *static_cast<T5*>(this->arguments[5].get()) , *static_cast<T6*>(this->arguments[6].get()) ); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 > void operation::extract_template(void (*)( T0& , T1& , pinned T2& , T3& , T4& , T5& , T6& )) { this->profiles[0] = &breakdown(*static_cast<T0*>(this->arguments[0].get())); this->profiles[1] = &breakdown(*static_cast<T1*>(this->arguments[1].get())); this->profiles[2] = &breakdown(*static_cast<T2*>(this->arguments[2].get())); this->profiles[3] = &breakdown(*static_cast<T3*>(this->arguments[3].get())); this->profiles[4] = &breakdown(*static_cast<T4*>(this->arguments[4].get())); this->profiles[5] = &breakdown(*static_cast<T5*>(this->arguments[5].get())); this->profiles[6] = &breakdown(*static_cast<T6*>(this->arguments[6].get())); this->pin = this->profiles[2]; } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 > void operation::prototype_template(void (*)( T0& , T1& , pinned T2& , T3& , T4& , T5& , T6& )) { ((void (*)( T0& , T1& , pinned T2& , T3& , T4& , T5& , T6& ))this->operation_ptr) ( *static_cast<T0*>(this->arguments[0].get()) , *static_cast<T1*>(this->arguments[1].get()) , marked *static_cast<T2*>(this->arguments[2].get()) , *static_cast<T3*>(this->arguments[3].get()) , *static_cast<T4*>(this->arguments[4].get()) , *static_cast<T5*>(this->arguments[5].get()) , *static_cast<T6*>(this->arguments[6].get()) ); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 > void operation::extract_template(void (*)( T0& , T1& , T2& , pinned T3& , T4& , T5& , T6& )) { this->profiles[0] = &breakdown(*static_cast<T0*>(this->arguments[0].get())); this->profiles[1] = &breakdown(*static_cast<T1*>(this->arguments[1].get())); this->profiles[2] = &breakdown(*static_cast<T2*>(this->arguments[2].get())); this->profiles[3] = &breakdown(*static_cast<T3*>(this->arguments[3].get())); this->profiles[4] = &breakdown(*static_cast<T4*>(this->arguments[4].get())); this->profiles[5] = &breakdown(*static_cast<T5*>(this->arguments[5].get())); this->profiles[6] = &breakdown(*static_cast<T6*>(this->arguments[6].get())); this->pin = this->profiles[3]; } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 > void operation::prototype_template(void (*)( T0& , T1& , T2& , pinned T3& , T4& , T5& , T6& )) { ((void (*)( T0& , T1& , T2& , pinned T3& , T4& , T5& , T6& ))this->operation_ptr) ( *static_cast<T0*>(this->arguments[0].get()) , *static_cast<T1*>(this->arguments[1].get()) , *static_cast<T2*>(this->arguments[2].get()) , marked *static_cast<T3*>(this->arguments[3].get()) , *static_cast<T4*>(this->arguments[4].get()) , *static_cast<T5*>(this->arguments[5].get()) , *static_cast<T6*>(this->arguments[6].get()) ); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 > void operation::extract_template(void (*)( T0& , T1& , T2& , T3& , pinned T4& , T5& , T6& )) { this->profiles[0] = &breakdown(*static_cast<T0*>(this->arguments[0].get())); this->profiles[1] = &breakdown(*static_cast<T1*>(this->arguments[1].get())); this->profiles[2] = &breakdown(*static_cast<T2*>(this->arguments[2].get())); this->profiles[3] = &breakdown(*static_cast<T3*>(this->arguments[3].get())); this->profiles[4] = &breakdown(*static_cast<T4*>(this->arguments[4].get())); this->profiles[5] = &breakdown(*static_cast<T5*>(this->arguments[5].get())); this->profiles[6] = &breakdown(*static_cast<T6*>(this->arguments[6].get())); this->pin = this->profiles[4]; } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 > void operation::prototype_template(void (*)( T0& , T1& , T2& , T3& , pinned T4& , T5& , T6& )) { ((void (*)( T0& , T1& , T2& , T3& , pinned T4& , T5& , T6& ))this->operation_ptr) ( *static_cast<T0*>(this->arguments[0].get()) , *static_cast<T1*>(this->arguments[1].get()) , *static_cast<T2*>(this->arguments[2].get()) , *static_cast<T3*>(this->arguments[3].get()) , marked *static_cast<T4*>(this->arguments[4].get()) , *static_cast<T5*>(this->arguments[5].get()) , *static_cast<T6*>(this->arguments[6].get()) ); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 > void operation::extract_template(void (*)( T0& , T1& , T2& , T3& , T4& , pinned T5& , T6& )) { this->profiles[0] = &breakdown(*static_cast<T0*>(this->arguments[0].get())); this->profiles[1] = &breakdown(*static_cast<T1*>(this->arguments[1].get())); this->profiles[2] = &breakdown(*static_cast<T2*>(this->arguments[2].get())); this->profiles[3] = &breakdown(*static_cast<T3*>(this->arguments[3].get())); this->profiles[4] = &breakdown(*static_cast<T4*>(this->arguments[4].get())); this->profiles[5] = &breakdown(*static_cast<T5*>(this->arguments[5].get())); this->profiles[6] = &breakdown(*static_cast<T6*>(this->arguments[6].get())); this->pin = this->profiles[5]; } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 > void operation::prototype_template(void (*)( T0& , T1& , T2& , T3& , T4& , pinned T5& , T6& )) { ((void (*)( T0& , T1& , T2& , T3& , T4& , pinned T5& , T6& ))this->operation_ptr) ( *static_cast<T0*>(this->arguments[0].get()) , *static_cast<T1*>(this->arguments[1].get()) , *static_cast<T2*>(this->arguments[2].get()) , *static_cast<T3*>(this->arguments[3].get()) , *static_cast<T4*>(this->arguments[4].get()) , marked *static_cast<T5*>(this->arguments[5].get()) , *static_cast<T6*>(this->arguments[6].get()) ); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 > void operation::extract_template(void (*)( T0& , T1& , T2& , T3& , T4& , T5& , pinned T6& )) { this->profiles[0] = &breakdown(*static_cast<T0*>(this->arguments[0].get())); this->profiles[1] = &breakdown(*static_cast<T1*>(this->arguments[1].get())); this->profiles[2] = &breakdown(*static_cast<T2*>(this->arguments[2].get())); this->profiles[3] = &breakdown(*static_cast<T3*>(this->arguments[3].get())); this->profiles[4] = &breakdown(*static_cast<T4*>(this->arguments[4].get())); this->profiles[5] = &breakdown(*static_cast<T5*>(this->arguments[5].get())); this->profiles[6] = &breakdown(*static_cast<T6*>(this->arguments[6].get())); this->pin = this->profiles[6]; } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 > void operation::prototype_template(void (*)( T0& , T1& , T2& , T3& , T4& , T5& , pinned T6& )) { ((void (*)( T0& , T1& , T2& , T3& , T4& , T5& , pinned T6& ))this->operation_ptr) ( *static_cast<T0*>(this->arguments[0].get()) , *static_cast<T1*>(this->arguments[1].get()) , *static_cast<T2*>(this->arguments[2].get()) , *static_cast<T3*>(this->arguments[3].get()) , *static_cast<T4*>(this->arguments[4].get()) , *static_cast<T5*>(this->arguments[5].get()) , marked *static_cast<T6*>(this->arguments[6].get()) ); }

template< typename FP, typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 >
operation::operation( FP op, T0 *arg0 , T1 *arg1 , T2 *arg2 , T3 *arg3 , T4 *arg4 , T5 *arg5 , T6 *arg6 , T7 *arg7 ){
    this->init();
    this->operation_ptr = (void(*)())op;
    this->count = 8;
    this->profiles = (p_object**)malloc(sizeof(p_object*)*this->count);
    this->arguments = new boost::shared_ptr<void>[this->count];
    this->arguments[0] = boost::shared_ptr<void>(get_handle(*arg0)); this->arguments[1] = boost::shared_ptr<void>(get_handle(*arg1)); this->arguments[2] = boost::shared_ptr<void>(get_handle(*arg2)); this->arguments[3] = boost::shared_ptr<void>(get_handle(*arg3)); this->arguments[4] = boost::shared_ptr<void>(get_handle(*arg4)); this->arguments[5] = boost::shared_ptr<void>(get_handle(*arg5)); this->arguments[6] = boost::shared_ptr<void>(get_handle(*arg6)); this->arguments[7] = boost::shared_ptr<void>(get_handle(*arg7));
    void(operation::*ptr)(FP); ptr = &operation::prototype_template;
    this->prototype = (void(operation::*)())ptr;
    ptr = &operation::extract_template;
    this->extract = (void(operation::*)())ptr;
}
template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 >
void operation::extract_template(void (*)( T0& , T1& , T2& , T3& , T4& , T5& , T6& , T7& ))
{
    this->profiles[0] = &breakdown(*static_cast<T0*>(this->arguments[0].get())); this->profiles[1] = &breakdown(*static_cast<T1*>(this->arguments[1].get())); this->profiles[2] = &breakdown(*static_cast<T2*>(this->arguments[2].get())); this->profiles[3] = &breakdown(*static_cast<T3*>(this->arguments[3].get())); this->profiles[4] = &breakdown(*static_cast<T4*>(this->arguments[4].get())); this->profiles[5] = &breakdown(*static_cast<T5*>(this->arguments[5].get())); this->profiles[6] = &breakdown(*static_cast<T6*>(this->arguments[6].get())); this->profiles[7] = &breakdown(*static_cast<T7*>(this->arguments[7].get()));
}
template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 >
void operation::prototype_template(void (*)( T0& , T1& , T2& , T3& , T4& , T5& , T6& , T7& ))
{
    ((void (*)( T0& , T1& , T2& , T3& , T4& , T5& , T6& , T7& ))this->operation_ptr)
    ( *static_cast<T0*>(this->arguments[0].get()) , *static_cast<T1*>(this->arguments[1].get()) , *static_cast<T2*>(this->arguments[2].get()) , *static_cast<T3*>(this->arguments[3].get()) , *static_cast<T4*>(this->arguments[4].get()) , *static_cast<T5*>(this->arguments[5].get()) , *static_cast<T6*>(this->arguments[6].get()) , *static_cast<T7*>(this->arguments[7].get()) );
}
template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 > void operation::extract_template(void (*)( pinned T0& , T1& , T2& , T3& , T4& , T5& , T6& , T7& )) { this->profiles[0] = &breakdown(*static_cast<T0*>(this->arguments[0].get())); this->profiles[1] = &breakdown(*static_cast<T1*>(this->arguments[1].get())); this->profiles[2] = &breakdown(*static_cast<T2*>(this->arguments[2].get())); this->profiles[3] = &breakdown(*static_cast<T3*>(this->arguments[3].get())); this->profiles[4] = &breakdown(*static_cast<T4*>(this->arguments[4].get())); this->profiles[5] = &breakdown(*static_cast<T5*>(this->arguments[5].get())); this->profiles[6] = &breakdown(*static_cast<T6*>(this->arguments[6].get())); this->profiles[7] = &breakdown(*static_cast<T7*>(this->arguments[7].get())); this->pin = this->profiles[0]; } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 > void operation::prototype_template(void (*)( pinned T0& , T1& , T2& , T3& , T4& , T5& , T6& , T7& )) { ((void (*)( pinned T0& , T1& , T2& , T3& , T4& , T5& , T6& , T7& ))this->operation_ptr) ( marked *static_cast<T0*>(this->arguments[0].get()) , *static_cast<T1*>(this->arguments[1].get()) , *static_cast<T2*>(this->arguments[2].get()) , *static_cast<T3*>(this->arguments[3].get()) , *static_cast<T4*>(this->arguments[4].get()) , *static_cast<T5*>(this->arguments[5].get()) , *static_cast<T6*>(this->arguments[6].get()) , *static_cast<T7*>(this->arguments[7].get()) ); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 > void operation::extract_template(void (*)( T0& , pinned T1& , T2& , T3& , T4& , T5& , T6& , T7& )) { this->profiles[0] = &breakdown(*static_cast<T0*>(this->arguments[0].get())); this->profiles[1] = &breakdown(*static_cast<T1*>(this->arguments[1].get())); this->profiles[2] = &breakdown(*static_cast<T2*>(this->arguments[2].get())); this->profiles[3] = &breakdown(*static_cast<T3*>(this->arguments[3].get())); this->profiles[4] = &breakdown(*static_cast<T4*>(this->arguments[4].get())); this->profiles[5] = &breakdown(*static_cast<T5*>(this->arguments[5].get())); this->profiles[6] = &breakdown(*static_cast<T6*>(this->arguments[6].get())); this->profiles[7] = &breakdown(*static_cast<T7*>(this->arguments[7].get())); this->pin = this->profiles[1]; } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 > void operation::prototype_template(void (*)( T0& , pinned T1& , T2& , T3& , T4& , T5& , T6& , T7& )) { ((void (*)( T0& , pinned T1& , T2& , T3& , T4& , T5& , T6& , T7& ))this->operation_ptr) ( *static_cast<T0*>(this->arguments[0].get()) , marked *static_cast<T1*>(this->arguments[1].get()) , *static_cast<T2*>(this->arguments[2].get()) , *static_cast<T3*>(this->arguments[3].get()) , *static_cast<T4*>(this->arguments[4].get()) , *static_cast<T5*>(this->arguments[5].get()) , *static_cast<T6*>(this->arguments[6].get()) , *static_cast<T7*>(this->arguments[7].get()) ); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 > void operation::extract_template(void (*)( T0& , T1& , pinned T2& , T3& , T4& , T5& , T6& , T7& )) { this->profiles[0] = &breakdown(*static_cast<T0*>(this->arguments[0].get())); this->profiles[1] = &breakdown(*static_cast<T1*>(this->arguments[1].get())); this->profiles[2] = &breakdown(*static_cast<T2*>(this->arguments[2].get())); this->profiles[3] = &breakdown(*static_cast<T3*>(this->arguments[3].get())); this->profiles[4] = &breakdown(*static_cast<T4*>(this->arguments[4].get())); this->profiles[5] = &breakdown(*static_cast<T5*>(this->arguments[5].get())); this->profiles[6] = &breakdown(*static_cast<T6*>(this->arguments[6].get())); this->profiles[7] = &breakdown(*static_cast<T7*>(this->arguments[7].get())); this->pin = this->profiles[2]; } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 > void operation::prototype_template(void (*)( T0& , T1& , pinned T2& , T3& , T4& , T5& , T6& , T7& )) { ((void (*)( T0& , T1& , pinned T2& , T3& , T4& , T5& , T6& , T7& ))this->operation_ptr) ( *static_cast<T0*>(this->arguments[0].get()) , *static_cast<T1*>(this->arguments[1].get()) , marked *static_cast<T2*>(this->arguments[2].get()) , *static_cast<T3*>(this->arguments[3].get()) , *static_cast<T4*>(this->arguments[4].get()) , *static_cast<T5*>(this->arguments[5].get()) , *static_cast<T6*>(this->arguments[6].get()) , *static_cast<T7*>(this->arguments[7].get()) ); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 > void operation::extract_template(void (*)( T0& , T1& , T2& , pinned T3& , T4& , T5& , T6& , T7& )) { this->profiles[0] = &breakdown(*static_cast<T0*>(this->arguments[0].get())); this->profiles[1] = &breakdown(*static_cast<T1*>(this->arguments[1].get())); this->profiles[2] = &breakdown(*static_cast<T2*>(this->arguments[2].get())); this->profiles[3] = &breakdown(*static_cast<T3*>(this->arguments[3].get())); this->profiles[4] = &breakdown(*static_cast<T4*>(this->arguments[4].get())); this->profiles[5] = &breakdown(*static_cast<T5*>(this->arguments[5].get())); this->profiles[6] = &breakdown(*static_cast<T6*>(this->arguments[6].get())); this->profiles[7] = &breakdown(*static_cast<T7*>(this->arguments[7].get())); this->pin = this->profiles[3]; } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 > void operation::prototype_template(void (*)( T0& , T1& , T2& , pinned T3& , T4& , T5& , T6& , T7& )) { ((void (*)( T0& , T1& , T2& , pinned T3& , T4& , T5& , T6& , T7& ))this->operation_ptr) ( *static_cast<T0*>(this->arguments[0].get()) , *static_cast<T1*>(this->arguments[1].get()) , *static_cast<T2*>(this->arguments[2].get()) , marked *static_cast<T3*>(this->arguments[3].get()) , *static_cast<T4*>(this->arguments[4].get()) , *static_cast<T5*>(this->arguments[5].get()) , *static_cast<T6*>(this->arguments[6].get()) , *static_cast<T7*>(this->arguments[7].get()) ); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 > void operation::extract_template(void (*)( T0& , T1& , T2& , T3& , pinned T4& , T5& , T6& , T7& )) { this->profiles[0] = &breakdown(*static_cast<T0*>(this->arguments[0].get())); this->profiles[1] = &breakdown(*static_cast<T1*>(this->arguments[1].get())); this->profiles[2] = &breakdown(*static_cast<T2*>(this->arguments[2].get())); this->profiles[3] = &breakdown(*static_cast<T3*>(this->arguments[3].get())); this->profiles[4] = &breakdown(*static_cast<T4*>(this->arguments[4].get())); this->profiles[5] = &breakdown(*static_cast<T5*>(this->arguments[5].get())); this->profiles[6] = &breakdown(*static_cast<T6*>(this->arguments[6].get())); this->profiles[7] = &breakdown(*static_cast<T7*>(this->arguments[7].get())); this->pin = this->profiles[4]; } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 > void operation::prototype_template(void (*)( T0& , T1& , T2& , T3& , pinned T4& , T5& , T6& , T7& )) { ((void (*)( T0& , T1& , T2& , T3& , pinned T4& , T5& , T6& , T7& ))this->operation_ptr) ( *static_cast<T0*>(this->arguments[0].get()) , *static_cast<T1*>(this->arguments[1].get()) , *static_cast<T2*>(this->arguments[2].get()) , *static_cast<T3*>(this->arguments[3].get()) , marked *static_cast<T4*>(this->arguments[4].get()) , *static_cast<T5*>(this->arguments[5].get()) , *static_cast<T6*>(this->arguments[6].get()) , *static_cast<T7*>(this->arguments[7].get()) ); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 > void operation::extract_template(void (*)( T0& , T1& , T2& , T3& , T4& , pinned T5& , T6& , T7& )) { this->profiles[0] = &breakdown(*static_cast<T0*>(this->arguments[0].get())); this->profiles[1] = &breakdown(*static_cast<T1*>(this->arguments[1].get())); this->profiles[2] = &breakdown(*static_cast<T2*>(this->arguments[2].get())); this->profiles[3] = &breakdown(*static_cast<T3*>(this->arguments[3].get())); this->profiles[4] = &breakdown(*static_cast<T4*>(this->arguments[4].get())); this->profiles[5] = &breakdown(*static_cast<T5*>(this->arguments[5].get())); this->profiles[6] = &breakdown(*static_cast<T6*>(this->arguments[6].get())); this->profiles[7] = &breakdown(*static_cast<T7*>(this->arguments[7].get())); this->pin = this->profiles[5]; } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 > void operation::prototype_template(void (*)( T0& , T1& , T2& , T3& , T4& , pinned T5& , T6& , T7& )) { ((void (*)( T0& , T1& , T2& , T3& , T4& , pinned T5& , T6& , T7& ))this->operation_ptr) ( *static_cast<T0*>(this->arguments[0].get()) , *static_cast<T1*>(this->arguments[1].get()) , *static_cast<T2*>(this->arguments[2].get()) , *static_cast<T3*>(this->arguments[3].get()) , *static_cast<T4*>(this->arguments[4].get()) , marked *static_cast<T5*>(this->arguments[5].get()) , *static_cast<T6*>(this->arguments[6].get()) , *static_cast<T7*>(this->arguments[7].get()) ); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 > void operation::extract_template(void (*)( T0& , T1& , T2& , T3& , T4& , T5& , pinned T6& , T7& )) { this->profiles[0] = &breakdown(*static_cast<T0*>(this->arguments[0].get())); this->profiles[1] = &breakdown(*static_cast<T1*>(this->arguments[1].get())); this->profiles[2] = &breakdown(*static_cast<T2*>(this->arguments[2].get())); this->profiles[3] = &breakdown(*static_cast<T3*>(this->arguments[3].get())); this->profiles[4] = &breakdown(*static_cast<T4*>(this->arguments[4].get())); this->profiles[5] = &breakdown(*static_cast<T5*>(this->arguments[5].get())); this->profiles[6] = &breakdown(*static_cast<T6*>(this->arguments[6].get())); this->profiles[7] = &breakdown(*static_cast<T7*>(this->arguments[7].get())); this->pin = this->profiles[6]; } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 > void operation::prototype_template(void (*)( T0& , T1& , T2& , T3& , T4& , T5& , pinned T6& , T7& )) { ((void (*)( T0& , T1& , T2& , T3& , T4& , T5& , pinned T6& , T7& ))this->operation_ptr) ( *static_cast<T0*>(this->arguments[0].get()) , *static_cast<T1*>(this->arguments[1].get()) , *static_cast<T2*>(this->arguments[2].get()) , *static_cast<T3*>(this->arguments[3].get()) , *static_cast<T4*>(this->arguments[4].get()) , *static_cast<T5*>(this->arguments[5].get()) , marked *static_cast<T6*>(this->arguments[6].get()) , *static_cast<T7*>(this->arguments[7].get()) ); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 > void operation::extract_template(void (*)( T0& , T1& , T2& , T3& , T4& , T5& , T6& , pinned T7& )) { this->profiles[0] = &breakdown(*static_cast<T0*>(this->arguments[0].get())); this->profiles[1] = &breakdown(*static_cast<T1*>(this->arguments[1].get())); this->profiles[2] = &breakdown(*static_cast<T2*>(this->arguments[2].get())); this->profiles[3] = &breakdown(*static_cast<T3*>(this->arguments[3].get())); this->profiles[4] = &breakdown(*static_cast<T4*>(this->arguments[4].get())); this->profiles[5] = &breakdown(*static_cast<T5*>(this->arguments[5].get())); this->profiles[6] = &breakdown(*static_cast<T6*>(this->arguments[6].get())); this->profiles[7] = &breakdown(*static_cast<T7*>(this->arguments[7].get())); this->pin = this->profiles[7]; } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 > void operation::prototype_template(void (*)( T0& , T1& , T2& , T3& , T4& , T5& , T6& , pinned T7& )) { ((void (*)( T0& , T1& , T2& , T3& , T4& , T5& , T6& , pinned T7& ))this->operation_ptr) ( *static_cast<T0*>(this->arguments[0].get()) , *static_cast<T1*>(this->arguments[1].get()) , *static_cast<T2*>(this->arguments[2].get()) , *static_cast<T3*>(this->arguments[3].get()) , *static_cast<T4*>(this->arguments[4].get()) , *static_cast<T5*>(this->arguments[5].get()) , *static_cast<T6*>(this->arguments[6].get()) , marked *static_cast<T7*>(this->arguments[7].get()) ); }

template< typename FP, typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 >
operation::operation( FP op, T0 *arg0 , T1 *arg1 , T2 *arg2 , T3 *arg3 , T4 *arg4 , T5 *arg5 , T6 *arg6 , T7 *arg7 , T8 *arg8 ){
    this->init();
    this->operation_ptr = (void(*)())op;
    this->count = 9;
    this->profiles = (p_object**)malloc(sizeof(p_object*)*this->count);
    this->arguments = new boost::shared_ptr<void>[this->count];
    this->arguments[0] = boost::shared_ptr<void>(get_handle(*arg0)); this->arguments[1] = boost::shared_ptr<void>(get_handle(*arg1)); this->arguments[2] = boost::shared_ptr<void>(get_handle(*arg2)); this->arguments[3] = boost::shared_ptr<void>(get_handle(*arg3)); this->arguments[4] = boost::shared_ptr<void>(get_handle(*arg4)); this->arguments[5] = boost::shared_ptr<void>(get_handle(*arg5)); this->arguments[6] = boost::shared_ptr<void>(get_handle(*arg6)); this->arguments[7] = boost::shared_ptr<void>(get_handle(*arg7)); this->arguments[8] = boost::shared_ptr<void>(get_handle(*arg8));
    void(operation::*ptr)(FP); ptr = &operation::prototype_template;
    this->prototype = (void(operation::*)())ptr;
    ptr = &operation::extract_template;
    this->extract = (void(operation::*)())ptr;
}
template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 >
void operation::extract_template(void (*)( T0& , T1& , T2& , T3& , T4& , T5& , T6& , T7& , T8& ))
{
    this->profiles[0] = &breakdown(*static_cast<T0*>(this->arguments[0].get())); this->profiles[1] = &breakdown(*static_cast<T1*>(this->arguments[1].get())); this->profiles[2] = &breakdown(*static_cast<T2*>(this->arguments[2].get())); this->profiles[3] = &breakdown(*static_cast<T3*>(this->arguments[3].get())); this->profiles[4] = &breakdown(*static_cast<T4*>(this->arguments[4].get())); this->profiles[5] = &breakdown(*static_cast<T5*>(this->arguments[5].get())); this->profiles[6] = &breakdown(*static_cast<T6*>(this->arguments[6].get())); this->profiles[7] = &breakdown(*static_cast<T7*>(this->arguments[7].get())); this->profiles[8] = &breakdown(*static_cast<T8*>(this->arguments[8].get()));
}
template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 >
void operation::prototype_template(void (*)( T0& , T1& , T2& , T3& , T4& , T5& , T6& , T7& , T8& ))
{
    ((void (*)( T0& , T1& , T2& , T3& , T4& , T5& , T6& , T7& , T8& ))this->operation_ptr)
    ( *static_cast<T0*>(this->arguments[0].get()) , *static_cast<T1*>(this->arguments[1].get()) , *static_cast<T2*>(this->arguments[2].get()) , *static_cast<T3*>(this->arguments[3].get()) , *static_cast<T4*>(this->arguments[4].get()) , *static_cast<T5*>(this->arguments[5].get()) , *static_cast<T6*>(this->arguments[6].get()) , *static_cast<T7*>(this->arguments[7].get()) , *static_cast<T8*>(this->arguments[8].get()) );
}
template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 > void operation::extract_template(void (*)( pinned T0& , T1& , T2& , T3& , T4& , T5& , T6& , T7& , T8& )) { this->profiles[0] = &breakdown(*static_cast<T0*>(this->arguments[0].get())); this->profiles[1] = &breakdown(*static_cast<T1*>(this->arguments[1].get())); this->profiles[2] = &breakdown(*static_cast<T2*>(this->arguments[2].get())); this->profiles[3] = &breakdown(*static_cast<T3*>(this->arguments[3].get())); this->profiles[4] = &breakdown(*static_cast<T4*>(this->arguments[4].get())); this->profiles[5] = &breakdown(*static_cast<T5*>(this->arguments[5].get())); this->profiles[6] = &breakdown(*static_cast<T6*>(this->arguments[6].get())); this->profiles[7] = &breakdown(*static_cast<T7*>(this->arguments[7].get())); this->profiles[8] = &breakdown(*static_cast<T8*>(this->arguments[8].get())); this->pin = this->profiles[0]; } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 > void operation::prototype_template(void (*)( pinned T0& , T1& , T2& , T3& , T4& , T5& , T6& , T7& , T8& )) { ((void (*)( pinned T0& , T1& , T2& , T3& , T4& , T5& , T6& , T7& , T8& ))this->operation_ptr) ( marked *static_cast<T0*>(this->arguments[0].get()) , *static_cast<T1*>(this->arguments[1].get()) , *static_cast<T2*>(this->arguments[2].get()) , *static_cast<T3*>(this->arguments[3].get()) , *static_cast<T4*>(this->arguments[4].get()) , *static_cast<T5*>(this->arguments[5].get()) , *static_cast<T6*>(this->arguments[6].get()) , *static_cast<T7*>(this->arguments[7].get()) , *static_cast<T8*>(this->arguments[8].get()) ); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 > void operation::extract_template(void (*)( T0& , pinned T1& , T2& , T3& , T4& , T5& , T6& , T7& , T8& )) { this->profiles[0] = &breakdown(*static_cast<T0*>(this->arguments[0].get())); this->profiles[1] = &breakdown(*static_cast<T1*>(this->arguments[1].get())); this->profiles[2] = &breakdown(*static_cast<T2*>(this->arguments[2].get())); this->profiles[3] = &breakdown(*static_cast<T3*>(this->arguments[3].get())); this->profiles[4] = &breakdown(*static_cast<T4*>(this->arguments[4].get())); this->profiles[5] = &breakdown(*static_cast<T5*>(this->arguments[5].get())); this->profiles[6] = &breakdown(*static_cast<T6*>(this->arguments[6].get())); this->profiles[7] = &breakdown(*static_cast<T7*>(this->arguments[7].get())); this->profiles[8] = &breakdown(*static_cast<T8*>(this->arguments[8].get())); this->pin = this->profiles[1]; } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 > void operation::prototype_template(void (*)( T0& , pinned T1& , T2& , T3& , T4& , T5& , T6& , T7& , T8& )) { ((void (*)( T0& , pinned T1& , T2& , T3& , T4& , T5& , T6& , T7& , T8& ))this->operation_ptr) ( *static_cast<T0*>(this->arguments[0].get()) , marked *static_cast<T1*>(this->arguments[1].get()) , *static_cast<T2*>(this->arguments[2].get()) , *static_cast<T3*>(this->arguments[3].get()) , *static_cast<T4*>(this->arguments[4].get()) , *static_cast<T5*>(this->arguments[5].get()) , *static_cast<T6*>(this->arguments[6].get()) , *static_cast<T7*>(this->arguments[7].get()) , *static_cast<T8*>(this->arguments[8].get()) ); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 > void operation::extract_template(void (*)( T0& , T1& , pinned T2& , T3& , T4& , T5& , T6& , T7& , T8& )) { this->profiles[0] = &breakdown(*static_cast<T0*>(this->arguments[0].get())); this->profiles[1] = &breakdown(*static_cast<T1*>(this->arguments[1].get())); this->profiles[2] = &breakdown(*static_cast<T2*>(this->arguments[2].get())); this->profiles[3] = &breakdown(*static_cast<T3*>(this->arguments[3].get())); this->profiles[4] = &breakdown(*static_cast<T4*>(this->arguments[4].get())); this->profiles[5] = &breakdown(*static_cast<T5*>(this->arguments[5].get())); this->profiles[6] = &breakdown(*static_cast<T6*>(this->arguments[6].get())); this->profiles[7] = &breakdown(*static_cast<T7*>(this->arguments[7].get())); this->profiles[8] = &breakdown(*static_cast<T8*>(this->arguments[8].get())); this->pin = this->profiles[2]; } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 > void operation::prototype_template(void (*)( T0& , T1& , pinned T2& , T3& , T4& , T5& , T6& , T7& , T8& )) { ((void (*)( T0& , T1& , pinned T2& , T3& , T4& , T5& , T6& , T7& , T8& ))this->operation_ptr) ( *static_cast<T0*>(this->arguments[0].get()) , *static_cast<T1*>(this->arguments[1].get()) , marked *static_cast<T2*>(this->arguments[2].get()) , *static_cast<T3*>(this->arguments[3].get()) , *static_cast<T4*>(this->arguments[4].get()) , *static_cast<T5*>(this->arguments[5].get()) , *static_cast<T6*>(this->arguments[6].get()) , *static_cast<T7*>(this->arguments[7].get()) , *static_cast<T8*>(this->arguments[8].get()) ); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 > void operation::extract_template(void (*)( T0& , T1& , T2& , pinned T3& , T4& , T5& , T6& , T7& , T8& )) { this->profiles[0] = &breakdown(*static_cast<T0*>(this->arguments[0].get())); this->profiles[1] = &breakdown(*static_cast<T1*>(this->arguments[1].get())); this->profiles[2] = &breakdown(*static_cast<T2*>(this->arguments[2].get())); this->profiles[3] = &breakdown(*static_cast<T3*>(this->arguments[3].get())); this->profiles[4] = &breakdown(*static_cast<T4*>(this->arguments[4].get())); this->profiles[5] = &breakdown(*static_cast<T5*>(this->arguments[5].get())); this->profiles[6] = &breakdown(*static_cast<T6*>(this->arguments[6].get())); this->profiles[7] = &breakdown(*static_cast<T7*>(this->arguments[7].get())); this->profiles[8] = &breakdown(*static_cast<T8*>(this->arguments[8].get())); this->pin = this->profiles[3]; } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 > void operation::prototype_template(void (*)( T0& , T1& , T2& , pinned T3& , T4& , T5& , T6& , T7& , T8& )) { ((void (*)( T0& , T1& , T2& , pinned T3& , T4& , T5& , T6& , T7& , T8& ))this->operation_ptr) ( *static_cast<T0*>(this->arguments[0].get()) , *static_cast<T1*>(this->arguments[1].get()) , *static_cast<T2*>(this->arguments[2].get()) , marked *static_cast<T3*>(this->arguments[3].get()) , *static_cast<T4*>(this->arguments[4].get()) , *static_cast<T5*>(this->arguments[5].get()) , *static_cast<T6*>(this->arguments[6].get()) , *static_cast<T7*>(this->arguments[7].get()) , *static_cast<T8*>(this->arguments[8].get()) ); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 > void operation::extract_template(void (*)( T0& , T1& , T2& , T3& , pinned T4& , T5& , T6& , T7& , T8& )) { this->profiles[0] = &breakdown(*static_cast<T0*>(this->arguments[0].get())); this->profiles[1] = &breakdown(*static_cast<T1*>(this->arguments[1].get())); this->profiles[2] = &breakdown(*static_cast<T2*>(this->arguments[2].get())); this->profiles[3] = &breakdown(*static_cast<T3*>(this->arguments[3].get())); this->profiles[4] = &breakdown(*static_cast<T4*>(this->arguments[4].get())); this->profiles[5] = &breakdown(*static_cast<T5*>(this->arguments[5].get())); this->profiles[6] = &breakdown(*static_cast<T6*>(this->arguments[6].get())); this->profiles[7] = &breakdown(*static_cast<T7*>(this->arguments[7].get())); this->profiles[8] = &breakdown(*static_cast<T8*>(this->arguments[8].get())); this->pin = this->profiles[4]; } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 > void operation::prototype_template(void (*)( T0& , T1& , T2& , T3& , pinned T4& , T5& , T6& , T7& , T8& )) { ((void (*)( T0& , T1& , T2& , T3& , pinned T4& , T5& , T6& , T7& , T8& ))this->operation_ptr) ( *static_cast<T0*>(this->arguments[0].get()) , *static_cast<T1*>(this->arguments[1].get()) , *static_cast<T2*>(this->arguments[2].get()) , *static_cast<T3*>(this->arguments[3].get()) , marked *static_cast<T4*>(this->arguments[4].get()) , *static_cast<T5*>(this->arguments[5].get()) , *static_cast<T6*>(this->arguments[6].get()) , *static_cast<T7*>(this->arguments[7].get()) , *static_cast<T8*>(this->arguments[8].get()) ); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 > void operation::extract_template(void (*)( T0& , T1& , T2& , T3& , T4& , pinned T5& , T6& , T7& , T8& )) { this->profiles[0] = &breakdown(*static_cast<T0*>(this->arguments[0].get())); this->profiles[1] = &breakdown(*static_cast<T1*>(this->arguments[1].get())); this->profiles[2] = &breakdown(*static_cast<T2*>(this->arguments[2].get())); this->profiles[3] = &breakdown(*static_cast<T3*>(this->arguments[3].get())); this->profiles[4] = &breakdown(*static_cast<T4*>(this->arguments[4].get())); this->profiles[5] = &breakdown(*static_cast<T5*>(this->arguments[5].get())); this->profiles[6] = &breakdown(*static_cast<T6*>(this->arguments[6].get())); this->profiles[7] = &breakdown(*static_cast<T7*>(this->arguments[7].get())); this->profiles[8] = &breakdown(*static_cast<T8*>(this->arguments[8].get())); this->pin = this->profiles[5]; } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 > void operation::prototype_template(void (*)( T0& , T1& , T2& , T3& , T4& , pinned T5& , T6& , T7& , T8& )) { ((void (*)( T0& , T1& , T2& , T3& , T4& , pinned T5& , T6& , T7& , T8& ))this->operation_ptr) ( *static_cast<T0*>(this->arguments[0].get()) , *static_cast<T1*>(this->arguments[1].get()) , *static_cast<T2*>(this->arguments[2].get()) , *static_cast<T3*>(this->arguments[3].get()) , *static_cast<T4*>(this->arguments[4].get()) , marked *static_cast<T5*>(this->arguments[5].get()) , *static_cast<T6*>(this->arguments[6].get()) , *static_cast<T7*>(this->arguments[7].get()) , *static_cast<T8*>(this->arguments[8].get()) ); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 > void operation::extract_template(void (*)( T0& , T1& , T2& , T3& , T4& , T5& , pinned T6& , T7& , T8& )) { this->profiles[0] = &breakdown(*static_cast<T0*>(this->arguments[0].get())); this->profiles[1] = &breakdown(*static_cast<T1*>(this->arguments[1].get())); this->profiles[2] = &breakdown(*static_cast<T2*>(this->arguments[2].get())); this->profiles[3] = &breakdown(*static_cast<T3*>(this->arguments[3].get())); this->profiles[4] = &breakdown(*static_cast<T4*>(this->arguments[4].get())); this->profiles[5] = &breakdown(*static_cast<T5*>(this->arguments[5].get())); this->profiles[6] = &breakdown(*static_cast<T6*>(this->arguments[6].get())); this->profiles[7] = &breakdown(*static_cast<T7*>(this->arguments[7].get())); this->profiles[8] = &breakdown(*static_cast<T8*>(this->arguments[8].get())); this->pin = this->profiles[6]; } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 > void operation::prototype_template(void (*)( T0& , T1& , T2& , T3& , T4& , T5& , pinned T6& , T7& , T8& )) { ((void (*)( T0& , T1& , T2& , T3& , T4& , T5& , pinned T6& , T7& , T8& ))this->operation_ptr) ( *static_cast<T0*>(this->arguments[0].get()) , *static_cast<T1*>(this->arguments[1].get()) , *static_cast<T2*>(this->arguments[2].get()) , *static_cast<T3*>(this->arguments[3].get()) , *static_cast<T4*>(this->arguments[4].get()) , *static_cast<T5*>(this->arguments[5].get()) , marked *static_cast<T6*>(this->arguments[6].get()) , *static_cast<T7*>(this->arguments[7].get()) , *static_cast<T8*>(this->arguments[8].get()) ); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 > void operation::extract_template(void (*)( T0& , T1& , T2& , T3& , T4& , T5& , T6& , pinned T7& , T8& )) { this->profiles[0] = &breakdown(*static_cast<T0*>(this->arguments[0].get())); this->profiles[1] = &breakdown(*static_cast<T1*>(this->arguments[1].get())); this->profiles[2] = &breakdown(*static_cast<T2*>(this->arguments[2].get())); this->profiles[3] = &breakdown(*static_cast<T3*>(this->arguments[3].get())); this->profiles[4] = &breakdown(*static_cast<T4*>(this->arguments[4].get())); this->profiles[5] = &breakdown(*static_cast<T5*>(this->arguments[5].get())); this->profiles[6] = &breakdown(*static_cast<T6*>(this->arguments[6].get())); this->profiles[7] = &breakdown(*static_cast<T7*>(this->arguments[7].get())); this->profiles[8] = &breakdown(*static_cast<T8*>(this->arguments[8].get())); this->pin = this->profiles[7]; } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 > void operation::prototype_template(void (*)( T0& , T1& , T2& , T3& , T4& , T5& , T6& , pinned T7& , T8& )) { ((void (*)( T0& , T1& , T2& , T3& , T4& , T5& , T6& , pinned T7& , T8& ))this->operation_ptr) ( *static_cast<T0*>(this->arguments[0].get()) , *static_cast<T1*>(this->arguments[1].get()) , *static_cast<T2*>(this->arguments[2].get()) , *static_cast<T3*>(this->arguments[3].get()) , *static_cast<T4*>(this->arguments[4].get()) , *static_cast<T5*>(this->arguments[5].get()) , *static_cast<T6*>(this->arguments[6].get()) , marked *static_cast<T7*>(this->arguments[7].get()) , *static_cast<T8*>(this->arguments[8].get()) ); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 > void operation::extract_template(void (*)( T0& , T1& , T2& , T3& , T4& , T5& , T6& , T7& , pinned T8& )) { this->profiles[0] = &breakdown(*static_cast<T0*>(this->arguments[0].get())); this->profiles[1] = &breakdown(*static_cast<T1*>(this->arguments[1].get())); this->profiles[2] = &breakdown(*static_cast<T2*>(this->arguments[2].get())); this->profiles[3] = &breakdown(*static_cast<T3*>(this->arguments[3].get())); this->profiles[4] = &breakdown(*static_cast<T4*>(this->arguments[4].get())); this->profiles[5] = &breakdown(*static_cast<T5*>(this->arguments[5].get())); this->profiles[6] = &breakdown(*static_cast<T6*>(this->arguments[6].get())); this->profiles[7] = &breakdown(*static_cast<T7*>(this->arguments[7].get())); this->profiles[8] = &breakdown(*static_cast<T8*>(this->arguments[8].get())); this->pin = this->profiles[8]; } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 > void operation::prototype_template(void (*)( T0& , T1& , T2& , T3& , T4& , T5& , T6& , T7& , pinned T8& )) { ((void (*)( T0& , T1& , T2& , T3& , T4& , T5& , T6& , T7& , pinned T8& ))this->operation_ptr) ( *static_cast<T0*>(this->arguments[0].get()) , *static_cast<T1*>(this->arguments[1].get()) , *static_cast<T2*>(this->arguments[2].get()) , *static_cast<T3*>(this->arguments[3].get()) , *static_cast<T4*>(this->arguments[4].get()) , *static_cast<T5*>(this->arguments[5].get()) , *static_cast<T6*>(this->arguments[6].get()) , *static_cast<T7*>(this->arguments[7].get()) , marked *static_cast<T8*>(this->arguments[8].get()) ); }

template< typename FP, typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 >
operation::operation( FP op, T0 *arg0 , T1 *arg1 , T2 *arg2 , T3 *arg3 , T4 *arg4 , T5 *arg5 , T6 *arg6 , T7 *arg7 , T8 *arg8 , T9 *arg9 ){
    this->init();
    this->operation_ptr = (void(*)())op;
    this->count = 10;
    this->profiles = (p_object**)malloc(sizeof(p_object*)*this->count);
    this->arguments = new boost::shared_ptr<void>[this->count];
    this->arguments[0] = boost::shared_ptr<void>(get_handle(*arg0)); this->arguments[1] = boost::shared_ptr<void>(get_handle(*arg1)); this->arguments[2] = boost::shared_ptr<void>(get_handle(*arg2)); this->arguments[3] = boost::shared_ptr<void>(get_handle(*arg3)); this->arguments[4] = boost::shared_ptr<void>(get_handle(*arg4)); this->arguments[5] = boost::shared_ptr<void>(get_handle(*arg5)); this->arguments[6] = boost::shared_ptr<void>(get_handle(*arg6)); this->arguments[7] = boost::shared_ptr<void>(get_handle(*arg7)); this->arguments[8] = boost::shared_ptr<void>(get_handle(*arg8)); this->arguments[9] = boost::shared_ptr<void>(get_handle(*arg9));
    void(operation::*ptr)(FP); ptr = &operation::prototype_template;
    this->prototype = (void(operation::*)())ptr;
    ptr = &operation::extract_template;
    this->extract = (void(operation::*)())ptr;
}
template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 >
void operation::extract_template(void (*)( T0& , T1& , T2& , T3& , T4& , T5& , T6& , T7& , T8& , T9& ))
{
    this->profiles[0] = &breakdown(*static_cast<T0*>(this->arguments[0].get())); this->profiles[1] = &breakdown(*static_cast<T1*>(this->arguments[1].get())); this->profiles[2] = &breakdown(*static_cast<T2*>(this->arguments[2].get())); this->profiles[3] = &breakdown(*static_cast<T3*>(this->arguments[3].get())); this->profiles[4] = &breakdown(*static_cast<T4*>(this->arguments[4].get())); this->profiles[5] = &breakdown(*static_cast<T5*>(this->arguments[5].get())); this->profiles[6] = &breakdown(*static_cast<T6*>(this->arguments[6].get())); this->profiles[7] = &breakdown(*static_cast<T7*>(this->arguments[7].get())); this->profiles[8] = &breakdown(*static_cast<T8*>(this->arguments[8].get())); this->profiles[9] = &breakdown(*static_cast<T9*>(this->arguments[9].get()));
}
template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 >
void operation::prototype_template(void (*)( T0& , T1& , T2& , T3& , T4& , T5& , T6& , T7& , T8& , T9& ))
{
    ((void (*)( T0& , T1& , T2& , T3& , T4& , T5& , T6& , T7& , T8& , T9& ))this->operation_ptr)
    ( *static_cast<T0*>(this->arguments[0].get()) , *static_cast<T1*>(this->arguments[1].get()) , *static_cast<T2*>(this->arguments[2].get()) , *static_cast<T3*>(this->arguments[3].get()) , *static_cast<T4*>(this->arguments[4].get()) , *static_cast<T5*>(this->arguments[5].get()) , *static_cast<T6*>(this->arguments[6].get()) , *static_cast<T7*>(this->arguments[7].get()) , *static_cast<T8*>(this->arguments[8].get()) , *static_cast<T9*>(this->arguments[9].get()) );
}
template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 > void operation::extract_template(void (*)( pinned T0& , T1& , T2& , T3& , T4& , T5& , T6& , T7& , T8& , T9& )) { this->profiles[0] = &breakdown(*static_cast<T0*>(this->arguments[0].get())); this->profiles[1] = &breakdown(*static_cast<T1*>(this->arguments[1].get())); this->profiles[2] = &breakdown(*static_cast<T2*>(this->arguments[2].get())); this->profiles[3] = &breakdown(*static_cast<T3*>(this->arguments[3].get())); this->profiles[4] = &breakdown(*static_cast<T4*>(this->arguments[4].get())); this->profiles[5] = &breakdown(*static_cast<T5*>(this->arguments[5].get())); this->profiles[6] = &breakdown(*static_cast<T6*>(this->arguments[6].get())); this->profiles[7] = &breakdown(*static_cast<T7*>(this->arguments[7].get())); this->profiles[8] = &breakdown(*static_cast<T8*>(this->arguments[8].get())); this->profiles[9] = &breakdown(*static_cast<T9*>(this->arguments[9].get())); this->pin = this->profiles[0]; } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 > void operation::prototype_template(void (*)( pinned T0& , T1& , T2& , T3& , T4& , T5& , T6& , T7& , T8& , T9& )) { ((void (*)( pinned T0& , T1& , T2& , T3& , T4& , T5& , T6& , T7& , T8& , T9& ))this->operation_ptr) ( marked *static_cast<T0*>(this->arguments[0].get()) , *static_cast<T1*>(this->arguments[1].get()) , *static_cast<T2*>(this->arguments[2].get()) , *static_cast<T3*>(this->arguments[3].get()) , *static_cast<T4*>(this->arguments[4].get()) , *static_cast<T5*>(this->arguments[5].get()) , *static_cast<T6*>(this->arguments[6].get()) , *static_cast<T7*>(this->arguments[7].get()) , *static_cast<T8*>(this->arguments[8].get()) , *static_cast<T9*>(this->arguments[9].get()) ); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 > void operation::extract_template(void (*)( T0& , pinned T1& , T2& , T3& , T4& , T5& , T6& , T7& , T8& , T9& )) { this->profiles[0] = &breakdown(*static_cast<T0*>(this->arguments[0].get())); this->profiles[1] = &breakdown(*static_cast<T1*>(this->arguments[1].get())); this->profiles[2] = &breakdown(*static_cast<T2*>(this->arguments[2].get())); this->profiles[3] = &breakdown(*static_cast<T3*>(this->arguments[3].get())); this->profiles[4] = &breakdown(*static_cast<T4*>(this->arguments[4].get())); this->profiles[5] = &breakdown(*static_cast<T5*>(this->arguments[5].get())); this->profiles[6] = &breakdown(*static_cast<T6*>(this->arguments[6].get())); this->profiles[7] = &breakdown(*static_cast<T7*>(this->arguments[7].get())); this->profiles[8] = &breakdown(*static_cast<T8*>(this->arguments[8].get())); this->profiles[9] = &breakdown(*static_cast<T9*>(this->arguments[9].get())); this->pin = this->profiles[1]; } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 > void operation::prototype_template(void (*)( T0& , pinned T1& , T2& , T3& , T4& , T5& , T6& , T7& , T8& , T9& )) { ((void (*)( T0& , pinned T1& , T2& , T3& , T4& , T5& , T6& , T7& , T8& , T9& ))this->operation_ptr) ( *static_cast<T0*>(this->arguments[0].get()) , marked *static_cast<T1*>(this->arguments[1].get()) , *static_cast<T2*>(this->arguments[2].get()) , *static_cast<T3*>(this->arguments[3].get()) , *static_cast<T4*>(this->arguments[4].get()) , *static_cast<T5*>(this->arguments[5].get()) , *static_cast<T6*>(this->arguments[6].get()) , *static_cast<T7*>(this->arguments[7].get()) , *static_cast<T8*>(this->arguments[8].get()) , *static_cast<T9*>(this->arguments[9].get()) ); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 > void operation::extract_template(void (*)( T0& , T1& , pinned T2& , T3& , T4& , T5& , T6& , T7& , T8& , T9& )) { this->profiles[0] = &breakdown(*static_cast<T0*>(this->arguments[0].get())); this->profiles[1] = &breakdown(*static_cast<T1*>(this->arguments[1].get())); this->profiles[2] = &breakdown(*static_cast<T2*>(this->arguments[2].get())); this->profiles[3] = &breakdown(*static_cast<T3*>(this->arguments[3].get())); this->profiles[4] = &breakdown(*static_cast<T4*>(this->arguments[4].get())); this->profiles[5] = &breakdown(*static_cast<T5*>(this->arguments[5].get())); this->profiles[6] = &breakdown(*static_cast<T6*>(this->arguments[6].get())); this->profiles[7] = &breakdown(*static_cast<T7*>(this->arguments[7].get())); this->profiles[8] = &breakdown(*static_cast<T8*>(this->arguments[8].get())); this->profiles[9] = &breakdown(*static_cast<T9*>(this->arguments[9].get())); this->pin = this->profiles[2]; } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 > void operation::prototype_template(void (*)( T0& , T1& , pinned T2& , T3& , T4& , T5& , T6& , T7& , T8& , T9& )) { ((void (*)( T0& , T1& , pinned T2& , T3& , T4& , T5& , T6& , T7& , T8& , T9& ))this->operation_ptr) ( *static_cast<T0*>(this->arguments[0].get()) , *static_cast<T1*>(this->arguments[1].get()) , marked *static_cast<T2*>(this->arguments[2].get()) , *static_cast<T3*>(this->arguments[3].get()) , *static_cast<T4*>(this->arguments[4].get()) , *static_cast<T5*>(this->arguments[5].get()) , *static_cast<T6*>(this->arguments[6].get()) , *static_cast<T7*>(this->arguments[7].get()) , *static_cast<T8*>(this->arguments[8].get()) , *static_cast<T9*>(this->arguments[9].get()) ); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 > void operation::extract_template(void (*)( T0& , T1& , T2& , pinned T3& , T4& , T5& , T6& , T7& , T8& , T9& )) { this->profiles[0] = &breakdown(*static_cast<T0*>(this->arguments[0].get())); this->profiles[1] = &breakdown(*static_cast<T1*>(this->arguments[1].get())); this->profiles[2] = &breakdown(*static_cast<T2*>(this->arguments[2].get())); this->profiles[3] = &breakdown(*static_cast<T3*>(this->arguments[3].get())); this->profiles[4] = &breakdown(*static_cast<T4*>(this->arguments[4].get())); this->profiles[5] = &breakdown(*static_cast<T5*>(this->arguments[5].get())); this->profiles[6] = &breakdown(*static_cast<T6*>(this->arguments[6].get())); this->profiles[7] = &breakdown(*static_cast<T7*>(this->arguments[7].get())); this->profiles[8] = &breakdown(*static_cast<T8*>(this->arguments[8].get())); this->profiles[9] = &breakdown(*static_cast<T9*>(this->arguments[9].get())); this->pin = this->profiles[3]; } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 > void operation::prototype_template(void (*)( T0& , T1& , T2& , pinned T3& , T4& , T5& , T6& , T7& , T8& , T9& )) { ((void (*)( T0& , T1& , T2& , pinned T3& , T4& , T5& , T6& , T7& , T8& , T9& ))this->operation_ptr) ( *static_cast<T0*>(this->arguments[0].get()) , *static_cast<T1*>(this->arguments[1].get()) , *static_cast<T2*>(this->arguments[2].get()) , marked *static_cast<T3*>(this->arguments[3].get()) , *static_cast<T4*>(this->arguments[4].get()) , *static_cast<T5*>(this->arguments[5].get()) , *static_cast<T6*>(this->arguments[6].get()) , *static_cast<T7*>(this->arguments[7].get()) , *static_cast<T8*>(this->arguments[8].get()) , *static_cast<T9*>(this->arguments[9].get()) ); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 > void operation::extract_template(void (*)( T0& , T1& , T2& , T3& , pinned T4& , T5& , T6& , T7& , T8& , T9& )) { this->profiles[0] = &breakdown(*static_cast<T0*>(this->arguments[0].get())); this->profiles[1] = &breakdown(*static_cast<T1*>(this->arguments[1].get())); this->profiles[2] = &breakdown(*static_cast<T2*>(this->arguments[2].get())); this->profiles[3] = &breakdown(*static_cast<T3*>(this->arguments[3].get())); this->profiles[4] = &breakdown(*static_cast<T4*>(this->arguments[4].get())); this->profiles[5] = &breakdown(*static_cast<T5*>(this->arguments[5].get())); this->profiles[6] = &breakdown(*static_cast<T6*>(this->arguments[6].get())); this->profiles[7] = &breakdown(*static_cast<T7*>(this->arguments[7].get())); this->profiles[8] = &breakdown(*static_cast<T8*>(this->arguments[8].get())); this->profiles[9] = &breakdown(*static_cast<T9*>(this->arguments[9].get())); this->pin = this->profiles[4]; } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 > void operation::prototype_template(void (*)( T0& , T1& , T2& , T3& , pinned T4& , T5& , T6& , T7& , T8& , T9& )) { ((void (*)( T0& , T1& , T2& , T3& , pinned T4& , T5& , T6& , T7& , T8& , T9& ))this->operation_ptr) ( *static_cast<T0*>(this->arguments[0].get()) , *static_cast<T1*>(this->arguments[1].get()) , *static_cast<T2*>(this->arguments[2].get()) , *static_cast<T3*>(this->arguments[3].get()) , marked *static_cast<T4*>(this->arguments[4].get()) , *static_cast<T5*>(this->arguments[5].get()) , *static_cast<T6*>(this->arguments[6].get()) , *static_cast<T7*>(this->arguments[7].get()) , *static_cast<T8*>(this->arguments[8].get()) , *static_cast<T9*>(this->arguments[9].get()) ); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 > void operation::extract_template(void (*)( T0& , T1& , T2& , T3& , T4& , pinned T5& , T6& , T7& , T8& , T9& )) { this->profiles[0] = &breakdown(*static_cast<T0*>(this->arguments[0].get())); this->profiles[1] = &breakdown(*static_cast<T1*>(this->arguments[1].get())); this->profiles[2] = &breakdown(*static_cast<T2*>(this->arguments[2].get())); this->profiles[3] = &breakdown(*static_cast<T3*>(this->arguments[3].get())); this->profiles[4] = &breakdown(*static_cast<T4*>(this->arguments[4].get())); this->profiles[5] = &breakdown(*static_cast<T5*>(this->arguments[5].get())); this->profiles[6] = &breakdown(*static_cast<T6*>(this->arguments[6].get())); this->profiles[7] = &breakdown(*static_cast<T7*>(this->arguments[7].get())); this->profiles[8] = &breakdown(*static_cast<T8*>(this->arguments[8].get())); this->profiles[9] = &breakdown(*static_cast<T9*>(this->arguments[9].get())); this->pin = this->profiles[5]; } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 > void operation::prototype_template(void (*)( T0& , T1& , T2& , T3& , T4& , pinned T5& , T6& , T7& , T8& , T9& )) { ((void (*)( T0& , T1& , T2& , T3& , T4& , pinned T5& , T6& , T7& , T8& , T9& ))this->operation_ptr) ( *static_cast<T0*>(this->arguments[0].get()) , *static_cast<T1*>(this->arguments[1].get()) , *static_cast<T2*>(this->arguments[2].get()) , *static_cast<T3*>(this->arguments[3].get()) , *static_cast<T4*>(this->arguments[4].get()) , marked *static_cast<T5*>(this->arguments[5].get()) , *static_cast<T6*>(this->arguments[6].get()) , *static_cast<T7*>(this->arguments[7].get()) , *static_cast<T8*>(this->arguments[8].get()) , *static_cast<T9*>(this->arguments[9].get()) ); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 > void operation::extract_template(void (*)( T0& , T1& , T2& , T3& , T4& , T5& , pinned T6& , T7& , T8& , T9& )) { this->profiles[0] = &breakdown(*static_cast<T0*>(this->arguments[0].get())); this->profiles[1] = &breakdown(*static_cast<T1*>(this->arguments[1].get())); this->profiles[2] = &breakdown(*static_cast<T2*>(this->arguments[2].get())); this->profiles[3] = &breakdown(*static_cast<T3*>(this->arguments[3].get())); this->profiles[4] = &breakdown(*static_cast<T4*>(this->arguments[4].get())); this->profiles[5] = &breakdown(*static_cast<T5*>(this->arguments[5].get())); this->profiles[6] = &breakdown(*static_cast<T6*>(this->arguments[6].get())); this->profiles[7] = &breakdown(*static_cast<T7*>(this->arguments[7].get())); this->profiles[8] = &breakdown(*static_cast<T8*>(this->arguments[8].get())); this->profiles[9] = &breakdown(*static_cast<T9*>(this->arguments[9].get())); this->pin = this->profiles[6]; } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 > void operation::prototype_template(void (*)( T0& , T1& , T2& , T3& , T4& , T5& , pinned T6& , T7& , T8& , T9& )) { ((void (*)( T0& , T1& , T2& , T3& , T4& , T5& , pinned T6& , T7& , T8& , T9& ))this->operation_ptr) ( *static_cast<T0*>(this->arguments[0].get()) , *static_cast<T1*>(this->arguments[1].get()) , *static_cast<T2*>(this->arguments[2].get()) , *static_cast<T3*>(this->arguments[3].get()) , *static_cast<T4*>(this->arguments[4].get()) , *static_cast<T5*>(this->arguments[5].get()) , marked *static_cast<T6*>(this->arguments[6].get()) , *static_cast<T7*>(this->arguments[7].get()) , *static_cast<T8*>(this->arguments[8].get()) , *static_cast<T9*>(this->arguments[9].get()) ); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 > void operation::extract_template(void (*)( T0& , T1& , T2& , T3& , T4& , T5& , T6& , pinned T7& , T8& , T9& )) { this->profiles[0] = &breakdown(*static_cast<T0*>(this->arguments[0].get())); this->profiles[1] = &breakdown(*static_cast<T1*>(this->arguments[1].get())); this->profiles[2] = &breakdown(*static_cast<T2*>(this->arguments[2].get())); this->profiles[3] = &breakdown(*static_cast<T3*>(this->arguments[3].get())); this->profiles[4] = &breakdown(*static_cast<T4*>(this->arguments[4].get())); this->profiles[5] = &breakdown(*static_cast<T5*>(this->arguments[5].get())); this->profiles[6] = &breakdown(*static_cast<T6*>(this->arguments[6].get())); this->profiles[7] = &breakdown(*static_cast<T7*>(this->arguments[7].get())); this->profiles[8] = &breakdown(*static_cast<T8*>(this->arguments[8].get())); this->profiles[9] = &breakdown(*static_cast<T9*>(this->arguments[9].get())); this->pin = this->profiles[7]; } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 > void operation::prototype_template(void (*)( T0& , T1& , T2& , T3& , T4& , T5& , T6& , pinned T7& , T8& , T9& )) { ((void (*)( T0& , T1& , T2& , T3& , T4& , T5& , T6& , pinned T7& , T8& , T9& ))this->operation_ptr) ( *static_cast<T0*>(this->arguments[0].get()) , *static_cast<T1*>(this->arguments[1].get()) , *static_cast<T2*>(this->arguments[2].get()) , *static_cast<T3*>(this->arguments[3].get()) , *static_cast<T4*>(this->arguments[4].get()) , *static_cast<T5*>(this->arguments[5].get()) , *static_cast<T6*>(this->arguments[6].get()) , marked *static_cast<T7*>(this->arguments[7].get()) , *static_cast<T8*>(this->arguments[8].get()) , *static_cast<T9*>(this->arguments[9].get()) ); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 > void operation::extract_template(void (*)( T0& , T1& , T2& , T3& , T4& , T5& , T6& , T7& , pinned T8& , T9& )) { this->profiles[0] = &breakdown(*static_cast<T0*>(this->arguments[0].get())); this->profiles[1] = &breakdown(*static_cast<T1*>(this->arguments[1].get())); this->profiles[2] = &breakdown(*static_cast<T2*>(this->arguments[2].get())); this->profiles[3] = &breakdown(*static_cast<T3*>(this->arguments[3].get())); this->profiles[4] = &breakdown(*static_cast<T4*>(this->arguments[4].get())); this->profiles[5] = &breakdown(*static_cast<T5*>(this->arguments[5].get())); this->profiles[6] = &breakdown(*static_cast<T6*>(this->arguments[6].get())); this->profiles[7] = &breakdown(*static_cast<T7*>(this->arguments[7].get())); this->profiles[8] = &breakdown(*static_cast<T8*>(this->arguments[8].get())); this->profiles[9] = &breakdown(*static_cast<T9*>(this->arguments[9].get())); this->pin = this->profiles[8]; } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 > void operation::prototype_template(void (*)( T0& , T1& , T2& , T3& , T4& , T5& , T6& , T7& , pinned T8& , T9& )) { ((void (*)( T0& , T1& , T2& , T3& , T4& , T5& , T6& , T7& , pinned T8& , T9& ))this->operation_ptr) ( *static_cast<T0*>(this->arguments[0].get()) , *static_cast<T1*>(this->arguments[1].get()) , *static_cast<T2*>(this->arguments[2].get()) , *static_cast<T3*>(this->arguments[3].get()) , *static_cast<T4*>(this->arguments[4].get()) , *static_cast<T5*>(this->arguments[5].get()) , *static_cast<T6*>(this->arguments[6].get()) , *static_cast<T7*>(this->arguments[7].get()) , marked *static_cast<T8*>(this->arguments[8].get()) , *static_cast<T9*>(this->arguments[9].get()) ); } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 > void operation::extract_template(void (*)( T0& , T1& , T2& , T3& , T4& , T5& , T6& , T7& , T8& , pinned T9& )) { this->profiles[0] = &breakdown(*static_cast<T0*>(this->arguments[0].get())); this->profiles[1] = &breakdown(*static_cast<T1*>(this->arguments[1].get())); this->profiles[2] = &breakdown(*static_cast<T2*>(this->arguments[2].get())); this->profiles[3] = &breakdown(*static_cast<T3*>(this->arguments[3].get())); this->profiles[4] = &breakdown(*static_cast<T4*>(this->arguments[4].get())); this->profiles[5] = &breakdown(*static_cast<T5*>(this->arguments[5].get())); this->profiles[6] = &breakdown(*static_cast<T6*>(this->arguments[6].get())); this->profiles[7] = &breakdown(*static_cast<T7*>(this->arguments[7].get())); this->profiles[8] = &breakdown(*static_cast<T8*>(this->arguments[8].get())); this->profiles[9] = &breakdown(*static_cast<T9*>(this->arguments[9].get())); this->pin = this->profiles[9]; } template < typename T0 , typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 > void operation::prototype_template(void (*)( T0& , T1& , T2& , T3& , T4& , T5& , T6& , T7& , T8& , pinned T9& )) { ((void (*)( T0& , T1& , T2& , T3& , T4& , T5& , T6& , T7& , T8& , pinned T9& ))this->operation_ptr) ( *static_cast<T0*>(this->arguments[0].get()) , *static_cast<T1*>(this->arguments[1].get()) , *static_cast<T2*>(this->arguments[2].get()) , *static_cast<T3*>(this->arguments[3].get()) , *static_cast<T4*>(this->arguments[4].get()) , *static_cast<T5*>(this->arguments[5].get()) , *static_cast<T6*>(this->arguments[6].get()) , *static_cast<T7*>(this->arguments[7].get()) , *static_cast<T8*>(this->arguments[8].get()) , marked *static_cast<T9*>(this->arguments[9].get()) ); }
}
